@using Microsoft.AspNetCore.Components.Forms
@using SharedModels.Models



<div>
    <EditForm Model="_form" OnValidSubmit="SubmitForm">
        <label for="date">Date</label>
        <InputDate Type="InputDateType.DateTimeLocal"
                   @bind-Value="_form.date" />

        <label for="type">Type</label>
        <div>
            <select id="type" @bind="_form.type">
                <option value="">Select Type</option>
                @foreach (var option in Enum.GetValues(typeof(AssessmentType)))
                {
                    <option value="@option">@option</option>
                }
            </select>
            <input type="text" @bind="_form.customDescription" placeholder="Enter custom type" disabled="@(_form.type != AssessmentType.Custom)" />
        </div>

        <label for="status">Status</label>
        <div>
            <select id="status" @bind="_form.status">
                <option value="">Select Status</option>
                @foreach (var option in Enum.GetValues(typeof(AssessmentStatus)))
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>

        <button type="submit">Submit</button>
        <button @onclick="Cancel">Cancel</button>
    </EditForm>
</div>

@code {
    public Assessment _form = new();

        [CascadingParameter] BlazoredModalInstance BlazoredAssessmentModal { get; set; } = default!;

        protected override void OnInitialized() => BlazoredAssessmentModal.SetTitle("Enter The Assessment Details");

        private async Task SubmitForm()
        {
            Console.WriteLine("Confrimed");
            _form.date = _form.date.AddHours(1);
            await BlazoredAssessmentModal.CloseAsync(ModalResult.Ok(_form));
        }

        private async Task Cancel() {
            Console.WriteLine("Cancelled");
            await BlazoredAssessmentModal.CancelAsync();
            }
    }

