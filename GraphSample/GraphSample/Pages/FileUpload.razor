@page "/fileupload"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Extensions.Logging
@using Azure;
@using Azure.AI.OpenAI;
@using static System.Environment


@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject ILogger<FileUpload> Logger
@inject GraphSample.AI.OpenAIService OpenAIService

<AuthorizeView>
    <Authorized>
        <h1>Upload File</h1>

        <p>
            <label>
                Upload a file of up to 500kB:
                <InputFile OnChange="@LoadFile" />
            </label>
        </p>

        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        else if (isSummarizing)
        {
            <p>Summarizing...</p>
        }
        else if (!string.IsNullOrEmpty(summary))
        {
            <h3>Summary:</h3>
            <p>@summary</p>
        }

        <button @onclick="SummarizeFile">Summarize</button>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<IBrowserFile> loadedFile = new();
    private long maxFileSize = 1024 * 500;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private bool isSummarizing;
    private string summary;

    // Event handler for file upload
    private void LoadFile(InputFileChangeEventArgs e)
    {
        loadedFile.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            loadedFile.Add(file);
        }
    }

    // Helper method to split the content into smaller chunks
    private IEnumerable<string> SplitContentIntoChunks(string content, int chunkSize)
    {
        for (int i = 0; i < content.Length; i += chunkSize)
        {
            yield return content.Substring(i, Math.Min(chunkSize, content.Length - i));
        }
    }

    // Event handler for the "Summarize" button click
    private async Task SummarizeFile()
    {
        if (loadedFile.Count == 0)
        {
            return;
        }

        isLoading = true;
        isSummarizing = true; // Set the flag to indicate that summarization is in progress

        // Read the content of the file
        var file = loadedFile[0];
        var stream = file.OpenReadStream(maxFileSize);
        var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        // Perform summarization until the overall summary is less than 3000 characters
        var summaries = new List<string>();
        var overallSummary = "";

        //while (overallSummary.Length < 3000)
        //{
            // Split the content into smaller chunks
            var chunkSize = 3000; // Adjust this value as per your model's character limit
            var chunks = SplitContentIntoChunks(content, chunkSize);

            // Perform summarization for each chunk
            foreach (var chunk in chunks)
            {
                string prompt = $"Summarize the following text while keeping a scientific stance on the information and in as much detail as possible:\n\n{chunk}\n";
                Console.Write($"Input: {prompt}\n");

                var completionsResponse = await OpenAIService.client.GetCompletionsAsync(OpenAIService.engine, prompt);
                var completion = completionsResponse.Value.Choices[0].Text;

                summaries.Add(completion);
            }

            // Combine the individual summaries into an overall summary
            overallSummary = string.Join(" ", summaries);

            // Break the loop if the overall summary exceeds 3000 characters
            //if (overallSummary.Length >= 3000)
            //{
            //    break;
            //}

            // Prepare for the next round of summarization
            content = overallSummary;
            summaries.Clear();
        //}

        // Trim the overall summary to 3000 characters if needed
        //if (overallSummary.Length > 3000)
        //{
        //    overallSummary = overallSummary.Substring(0, 3000);
        //}

        summary = overallSummary;

        isLoading = false;
        isSummarizing = false; // Set the flag to indicate that summarization is complete
    }



    // Helper method to read the content of the uploaded file
    private async Task<string> ReadFileContentAsync(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream(maxFileSize))
        using (var reader = new StreamReader(stream))
        {
            return await reader.ReadToEndAsync();
        }
    }
}
