@page "/todo"

@using System.Security.Authentication
@using System.Text
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Extensions.Logging
@using GrapeCity.Documents.Pdf
@using Azure
@using Azure.AI.OpenAI
@using static System.Environment
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    body{
        width: 100%;
    }

    .form-input{
        padding: 5%;
        border-style: solid;
        border-color: rgb(222, 222, 222);
        box-shadow: inset;
        border-radius: 3px;
        margin-bottom: 20px;
        width: 80%;
    }
</style>

<body>
<h1>Todo</h1>

<div class=form-input>
    <FluentTextArea @bind-Value="textValue" Placeholder="Type your plans for today..." style="width: 60%;">
    </FluentTextArea>
    <br>
    <br>
    <form>
        <label for="taskList">Task List</label>
        <FluentSelect 
                Items="@toDos"
                Id="taskList"
                OptionValue="@(t => t.DisplayName)"
                OptionText="@(t => t.DisplayName)"
                @bind-Value="@selectedList"
                />
    </form>

    <br>
    <FluentButton @onclick="ConvertTasks">Create To Do List</FluentButton>
</div>

@if (creating){
    <FluentProgressRing></FluentProgressRing>
}


<form>
    @foreach (var key in TaskDict.Keys){
        string time = key.Remove(key.Length - 1, 1);
        <div class="form-input">
            <input type="time" value="@time" id=time bind-value="@key">
            <input type="text" value="@TaskDict[key]" style="width: 100%;">
        </div>
    }
</form>

</body>
@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;
    private string? textValue;
    private string[]? todolist;
    private string? todoStart;
    private string? todoEnd;
    private string todoTasks;
    private IList<TodoTaskList> toDos = new List<TodoTaskList>();
    private string selectedList = "Tasks";
    Dictionary<string,string> TaskDict = new Dictionary<string, string>();

    Dictionary<string, string> TaskLists = new Dictionary<string, string>();    

    public System.Security.Claims.ClaimsPrincipal? user { get; set; }

    private OpenAIService? openAIService;

    public bool creating = false;

    [Inject]
    protected IAccessTokenProvider? AccessTokenProvider { get; set; }
    protected string? AccessToken { get; private set; }

    protected override async Task OnInitializedAsync()
    {   
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            AccessToken = accessToken.Value;
        }

        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        //user = (await authenticationStateTask).User;
        graphClient = clientFactory.GetAuthenticatedClient();

        openAIService = new OpenAIService(); // Create an instance of the 'OpenAIService'
        var getLists = await graphClient.Me.Todo.Lists.GetAsync();
        toDos = getLists?.Value ?? new List<TodoTaskList>();

        foreach(var item in toDos)
        {
            if (item == null)
            {
                throw new ArgumentNullException(nameof(item));
            }
            if (item.DisplayName != null){
                TaskLists[item.DisplayName] = item.Id;
            }
        }
    }


    private void ExtractText()
    {
        string extractedText = textValue;
        Console.WriteLine(extractedText);
    }

    private async Task ConvertToDo()
    {
        Console.WriteLine("Converting to do list to a schedule...");
        //string agenda = "Wake up, make my bed and eat breakfast";
        string prompt = $"Can you create a to-do list including start time and end time in the form of hh:mm - hh:mm for today according to my plans below, it is not always written in chronological order. List each todo task with a '+' where the time is written first and the task is written next to it, separated by ':' and rewrite some tasks to make them clearer and more precise: \n {textValue}";
        Console.Write($"Input: {prompt}\n");

        var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        var completion = completionsResponse.Value.Choices[0].Text;
        Console.Write($"Completion: {completion}\n");
    }

    private async Task ConvertTasks()
    {
        creating = true;
        //string completion = "+10:00 - 11:00> Reply to emails +11:00 - 12:00> Schedule a meeting +12:00 - 12:30> Grab morning coffee +12:30 - 13:30> Meet colleague at cafe for lunch +19:00 - 20:00> Meet friend for dinner"; *@
        //string prompt = $"Can you create a to-do list including start time in the form of hh:mm for today according to my plans below, it is not always written in chronological order. List each todo task with a '+' where the time is written first and the task is written next to it, separated by '>' and rewrite some tasks to make them clearer and more precise: \n {textValue}";
        //Console.Write($"Input: {prompt}\n");

        //var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        //var completion = completionsResponse.Value.Choices[0].Text;
        string completion = "+06:00 > Grab morning coffee +08:00 > Reply to emails +12:00 > Meet colleague at cafe for lunch +18:00 > Meet friend for dinner +20:00 > Schedule meeting with someone in Toronto";
        Console.WriteLine(completion);
        //todolist = completion.Split("\n");
        todolist = completion.Split("+");

        foreach (string todo in todolist)
        {
            if (todo.Length > 2)
            {
                //todoStart = todo.Split(">")[0].Split("+")[1];
                todoStart = todo.Split(">")[0];
                todoTasks = todo.Split(">")[1];

                TaskDict[todoStart] = todoTasks;
                await SendToDo(todoTasks, todoStart);
            }
        }  
        creating = false;
    }

    private async Task SendToDo(string todoTasks, string todoStart){
        DateTime now = DateTime.UtcNow.Date; // Get the current date in UTC

        // Split the time string into hours and minutes
        string[] timeParts = todoStart.Split(':');
        int hours = int.Parse(timeParts[0]);
        int minutes = int.Parse(timeParts[1]);

        // Create a new DateTime object with the current date and the specified time
        DateTime startTime = now.AddHours(hours).AddMinutes(minutes);

        DateTimeTimeZone dateTimeTimeZone = new DateTimeTimeZone
        {
            DateTime = startTime.ToString("yyyy-MM-ddTHH:mm:ss"),
            TimeZone = TimeZoneInfo.Utc.Id
        };

        var requestBody = new TodoTask
        {
            Title = todoTasks,
            ReminderDateTime = dateTimeTimeZone,
        };

        var todoTask = await graphClient.Me.Todo.Lists[TaskLists[selectedList]].Tasks
            .PostAsync(requestBody);

    }


}
