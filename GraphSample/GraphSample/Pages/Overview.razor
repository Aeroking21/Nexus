<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/overview"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter

@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Overview</h1>
        <a href="/newevent" class="btn btn-light btn-sm mb-3">New event</a>

        <div class="container">
            <div class="emailSec">
                <div class="emailList">
                    @foreach (var mail in allMessages)
                    {
                        /*<img src=""/>*/
                        <div class="emailEntryBox">
                            <div class="emailEntryData">
                                <h3>@mail.Subject</h3>
                                <p>@mail.Sender</p>
                            </div>

                            <div class="emailDateTime">60!</div>
                        </div>
                    }
                </div>
            </div>

            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Organizer</th>
                            <th>Subject</th>
                            <th>Start</th>
                            <th>End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var calendarEvent in events)
                        {
                            <tr>
                                <td>@calendarEvent?.Organizer?.EmailAddress?.Name</td>
                                <td>@calendarEvent?.Subject</td>
                                <td>@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</td>
                                <td>@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Subject</th>
                            <th>Sender</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mail in allMessages)
                        {
                            <tr>
                                <td>@mail.Subject</td>
                                <td>@mail.Sender</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Sender</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var teamsChat in chats)
                        {
                            <tr>
                                <td>@teamsChat</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <style>
            /* Split page into 3! */
            .container {
                display: flex;
                justify-content: space-between;
            }
              
            .container div {
                width: 100%;
                padding: 5px;
            }

            /* Make nice box */
            .emailList{
                position: relative;
                display: flex;
                flex-direction: column;
                gap: 30px;
            }

            .emailEntryBox {
                position: relative;
                width: 400px;
                height: 100px;
                background: #fff;
                cursor: pointer;
                box-shadow: 10px 10px 15px rgba(0,0,0,0.025);
            }

            .emailEntryBox::before{
                content: '';
                position: absolute;
                width: 6px;
                height: 100%;
                background: #f00;
            }

            .emailEntryData {
                position: relative;
                display: flex;
                align-items: center;
                height: 100%;
            }

            .emailDateTime{

            }
            

        </style>

    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IList<Event> events = new List<Event>();
    private IList<Message> allMessages = new List<Message>();
    private IList<Chat> chats = new List<Chat>();

    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        var eventPage = await graphClient.Me
            .CalendarView
            .GetAsync(config =>
            {
                // Send user time zone in request so date/time in
                // response will be in preferred time zone
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                // Specifies the start and end of the view on the calendar
                // Translates to: ?startDateTime=""&endDateTime=""
                config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
                config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
                // Get max 50 per request
                config.QueryParameters.Top = 50;
                // Only return fields app will use
                config.QueryParameters.Select = new [] { "subject", "organizer", "start", "end" };
                // Order results chronologically
                config.QueryParameters.Orderby = new [] { "start/dateTime" };
            });

        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync( config => 
                {
                    config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                    config.QueryParameters.Select = new string[] { "subject", "sender"};
                    config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
                });
        
        var chatPage = await graphClient.Me
            .Chats
            .GetAsync(config =>
            {
                config.QueryParameters.Top = 50;
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                //config.QueryParameters.Select = new string[] { "subject", "sender"};
                //config.QueryParameters.Orderby = new string[] { "receivedDateTime" };

            });

        chats = chatPage?.Value ?? new List<Chat>();
        allMessages = mailPage?.Value ?? new List<Message>();
        events = eventPage?.Value ?? new List<Event>();
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }
}
