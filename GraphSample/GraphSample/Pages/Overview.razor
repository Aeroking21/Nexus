<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/overview/{ids}"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Fast.Components.FluentUI

@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        @* <link href="{PROJECT_NAME}.styles.css" rel="stylesheet" /> *@
        @* <link href="_content/Microsoft.Fast.Components.FluentUI/css/reboot.css" rel="stylesheet" /> *@
        
        @* To get the id out of the link *@
        @* @{
            string idss = ids;
            string[] idArray = idss.Split('=');
        }
        <h1>HI: @idArray[1]</h1> *@
        <div class="groupSec">
            <div class="seeGroups">
                <FluentSelect Id="state" name="state" TOption="GroupItem" @onchange="UpdateGroup" @bind-Value="selectedGroupValue">
                    <FluentOption Selected="true" Value="@null">All</FluentOption>
                    @foreach (var group in myGroups)
                    {
                        <FluentOption Value="@(group.mailName+';'+group.teamName+';'+group.calName)">@group.Name</FluentOption>
                    }
                </FluentSelect>

            </div>

            <div class="addGroup">
                <div class="groupSettings">

                    <div class="nameBox">
                        <FluentTextField @bind-Value=placename></FluentTextField>
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=mailSearchTest
                                      @oninput=handleMailSearchInput
                                      @onchange=handleMailSearchInput
                                      @bind-Value="@mailListValue"
                                      Placeholder="Mailing account" />
                        <br />
                        <FluentListbox Items=@mailResults TOption="string" SelectedOptionChanged="@(e => mailListValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=teamSearchTest
                                      @oninput=handleTeamSearchInput
                                      @onchange=handleTeamSearchInput
                                      @bind-Value="@teamNameValue"
                                      Placeholder="Team Chat" />
                        <br />
                        <FluentListbox Items=@teamResults TOption="string" SelectedOptionChanged="@(e => teamNameValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=calSearchTest
                                      @oninput=handleCalSearchInput
                                      @onchange=handleCalSearchInput
                                      @bind-Value="@calendarValue"
                                      Placeholder="Calendar" />
                        <br />
                        <FluentListbox Items=@calResults TOption="string" SelectedOptionChanged="@(e => calendarValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>
                </div>

                <div class="groupAdd">
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => addToGroup(mailListValue, teamNameValue, calendarValue)">Add</FluentButton>
                </div>
            </div>
        </div>

        <FluentTabs ActiveId="@activeid" OnTabChange="HandleOnTabChange">
            <FluentTab Text="Mail" />
            <FluentTab Text="Teams" />
            <FluentTab Text="Calendar" />

            @* OUTLOOK TAB *@
            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="emailSec">
                            @foreach (var mail in allMessages)
                            {
                                <FluentCard @onclick="() => Toggle(mail)">
                                    <div class="emailEntryBox">
                                        <div class="emailEntryData">
                                            <p class="subject">@mail?.Subject</p>
                                            <p class="sender">@mail?.Sender?.EmailAddress?.Name</p>
                                            <p class="content">@mail?.Body?.Content</p>
                                        </div>

                                        <div class="emailDateTime">3:30PM</div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">
                        <div class="majorContent">
                            <div class="heading">@currentEmail?.Subject</div>
                            <div class="email">
                                <div class="send">
                                    @currentEmail?.Sender.EmailAddress.Name
                                </div>

                                <div class="sendee">
                                    @currentEmail?.ToRecipients
                                </div>

                                <div class="emailContent">
                                    @currentEmail?.Body?.Content
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </FluentTabPanel>


            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="teamSec">
                            @foreach (var teamsChat in teams)
                            {
                                <FluentCard>
                                    <div class="teamEntryBox">
                                        <div class="teamEntryData">
                                            <p class="subject">@teamsChat?.DisplayName</p>
                                        </div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">

                    </div>
                </div>

            </FluentTabPanel>

            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="calSec">
                            @foreach (var calendarEvent in events)
                            {
                                <FluentCard>
                                    <div class="calEntryBox">
                                        <div class="calEntryData">
                                            <p class="subject">@calendarEvent?.Subject</p>
                                            <p class="organizer">@calendarEvent?.Organizer?.EmailAddress?.Name</p>
                                            <p class="content">Content</p>
                                        </div>

                                        <div class="calDateTime">
                                            <p class="begin">@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</p>
                                            <p class="fin">@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</p>
                                        </div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">
                        hi
                    </div>
                </div>
            </FluentTabPanel>
        </FluentTabs>

        <style>

            /* Split page into 2 */
            /* Control the left side */
            .row {
                display: flex;
            }

            .splitleft {
                max-width: 33.3%;
            }

            .splitright {
                max-width: 66.6%;
            }

            /*
             * Group settings
            */
            .groupSec {
                display: flex;
            }

            .groupSettings {
                display: flex;
            }

            .addGroup {
                display: flex;
            }

            /*
             * EMAILS
            */

            .emailSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .emailEntryBox {
                display: flex;
                padding-bottom: 5px;
                padding-top: 5px;
            }

            .emailEntryData {
                flex: 100%;
            }

            .emailEntryData .subject {
                padding: 0;
                padding-right: 10px;
                margin-bottom: 0;
                font-size: large;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 300px;
            }

            .emailEntryData .sender {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 300px;
            }

            .emailEntryData .content {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 200px;
            }

            .emailDateTime {
                padding: 0;
                flex: 15%;
                font-size: small;
            }

            a {
                color: white !important;
                font-size: 1rem !important;
            }

            .heading {
                white-space: nowrap;
                overflow-wrap: break-all;
            }

            .send {
                overflow-wrap: break-all;
            }

            .sendee {
                overflow-wrap: break-all;
            }

            .emailContent {
                overflow-wrap: break-all;
                word-wrap: break-word;
            }

            /*
             * TEAMS
            */

            .teamSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .teamEntryBox {
                display: flex;
                padding-bottom: 5px;
                padding-top: 5px;
            }

            .teamEntryData {
                flex: 100%;
            }

                .teamEntryData .subject {
                    padding: 0;
                    padding-right: 10px;
                    margin-bottom: 0;
                    font-size: large;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 300px;
                }

            /*
             * CALENDAR
            */

            .calSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .calEntryBox {
                display: flex;
                justify-content: space-between;
                padding-top: 50px;
            }

            .calEntryData .subject {
                padding: 0;
                margin-bottom: 0;
                font-size: large;
            }

            .calEntryData .organizer {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calEntryData .content {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calDateTime {
                justify-content: space-between;
            }

            .calDateTime .begin {
                padding: 0;
                font-size: small;
                margin-bottom: 0;
                margin-top: 27px;
            }

            .calDateTime .fin {
                padding: 0;
                font-size: small;
            }
        </style>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>

@code{
    [Parameter]
    public string ids{ get; set; } 

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IList<Event> events = new List<Event>();
    private IList<Message> allMessages = new List<Message>();
    private IList<Team> teams = new List<Team>();

    private string? dateTimeFormat;
    private string? oldData;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        await BeginMail("All");
        await BeginTeam();
        //await BeginCal();
    }

    /*public void GetQueryStringValues()
    {
        NavManager.TryGetQueryString<int>("initialCount", out currentCount);
        Console.WriteLine
    }*/


    public async Task BeginMail(string addresses)
    {
        Console.WriteLine("GOT IN HERE??");
        graphClient = clientFactory.GetAuthenticatedClient();
        /*
         * GET RECENT MAIL EVENTS
         */
        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", "outlook.body-content-type='text'");
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");

                if (addresses != "All") { config.QueryParameters.Filter = "(from/emailAddress/address) eq '" + addresses; }

                config.QueryParameters.Select = new string[] { "subject", "sender", "body" };
                //config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });
        /*
         * Set to non-async variable. Can then be accessed in html.
         */
        allMessages = mailPage?.Value ?? new List<Message>();
    }

    public async Task BeginTeam()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        /*
         * GET RECENT TEAM CHATS
         */

        var teamPage = await graphClient.Me.JoinedTeams.GetAsync();
        teams = teamPage?.Value ?? new List<Team>();
    }

    public async Task BeginCal()
    {
        // Get the user
        //var user = (await authenticationStateTask).User;
        //var graphTimeZone = user.GetUserGraphTimeZone();
        //dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        //var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        //var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        /*
         * GET ALL CALENDAR EVENTS
         */
        var eventPage = await graphClient.Me
            .CalendarView
            .GetAsync(config =>
            {
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                //config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
                //config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
                config.QueryParameters.Top = 50;
                config.QueryParameters.Select = new[] { "subject", "organizer", "start", "end" };
                config.QueryParameters.Orderby = new[] { "start/dateTime" };
            });
        /*
         * Set to non-async variable. Can then be accessed in html.
         */
        events = eventPage?.Value ?? new List<Event>();
    }

    async void UpdateGroup(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();
            if (searchTerm == "all") { await BeginMail("All"); StateHasChanged(); }
            else
            {
                string mailQuery = searchTerm.Split(';')[0] + "'";
                string teamQuery = searchTerm.Split(';')[1] + "'";
                string calQuery = searchTerm.Split(';')[2] + "'";
                await BeginMail(mailQuery);
                StateHasChanged();
            }
        }
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }

    /*
     * HANDLE WHICH TAB IS BEING PRESENTED
    */
    string? activeid = "Mail";
    FluentTab? changedto;
    private void HandleOnTabChange(FluentTab tab) { changedto = tab; }

    /*
     * SHOW THE DETAILS OF THE CURRENT EMAIL
    */
    private Message currentEmail { get; set; } = null;
    private void Toggle(Message email) { currentEmail = email; }

    /*
     * ALL INPUT BOXES TO CREATE GROUPS
     * GETTING DATA FROM GRAPH TO FILL SEARCH BOXES
     */
    FluentSearch? mailSearchTest;
    FluentSearch? teamSearchTest;
    FluentSearch? calSearchTest;
    string? mailListValue = string.Empty;
    string? teamNameValue = string.Empty;
    string? calendarValue = string.Empty;

    List<string> searchData = new()
    {
        "ajp20@7qp7mb.onmicrosoft.com",
        "Brendon",
        "Charmaine",
        "Indraneel",
        "Konstantinos",
        "Mahanoor"
    };

    List<string> mailResults = defaultResults();
    List<string> teamResults = defaultResults();
    List<string> calResults = defaultResults();
    static string defaultResultsText = "no results";

    static List<string> defaultResults()
    {
        return new() { defaultResultsText };
    }

    void handleMailSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { mailResults = temp; }
            }
        }
        else
        {
            mailResults = defaultResults();
            mailListValue = string.Empty;
        }
    }

    void handleTeamSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { teamResults = temp; }
            }
        }
        else
        {
            teamResults = defaultResults();
            teamNameValue = string.Empty;
        }
    }

    void handleCalSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { calResults = temp; }
            }
        }
        else
        {
            calResults = defaultResults();
            calendarValue = string.Empty;
        }
    }

    /*
     * CREATE LOCAL CLASS TO STORE GROUPS.
     * ALSO SEND TO API MONGO DB
     */
    public class GroupItem
    {
        public string? Name { get; set; }
        public string? mailName { get; set; }
        public string? teamName { get; set; }
        public string? calName { get; set; }
    }

    string? placename { get; set; } = string.Empty;
    string? selectedGroupValue;
    private List<GroupItem> myGroups = new();

    void addToGroup(string m, string t, string c)
    {
        if (!string.IsNullOrWhiteSpace(placename) && !string.IsNullOrWhiteSpace(m) && !string.IsNullOrWhiteSpace(t) && !string.IsNullOrWhiteSpace(c))
        {
            myGroups.Add(new GroupItem { Name = placename, mailName = m, teamName = t, calName = c });
        }
    }

}