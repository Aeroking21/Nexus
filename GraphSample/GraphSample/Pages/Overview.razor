@page "/overview/{ids}"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Fast.Components.FluentUI
@using BlazorFluentUI
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq;
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations

@inject GraphSample.Graph.GraphClientFactory clientFactory


<AuthorizeView>
    <Authorized>
        <link href="https://cdn.jsdelivr.net/npm/@@mdi/font@7.2.96/css/materialdesignicons.min.css" rel="stylesheet">
        <link href="GraphSample.styles.css" rel="stylesheet">
        <link href="Overview.razor.css" rel="stylesheet">
        <link rel="stylesheet" href="~/@(nameof(GraphSample)).styles.css" />

        <div class="groupSec">
            <div class="seeGroups" style="margin-top: 10px;">
                <FluentSelect Id="state" name="state" TOption="GroupItem" @onchange="UpdateGroup" @bind-Value="selectedGroupValue">
                    <FluentOption Selected="true" Value="@null">All</FluentOption>
                    @foreach (var group in myGroups)
                    {
                        <FluentOption Value="@(group.mailName+';'+group.teamName+';'+group.calName)">@group.Name</FluentOption>
                    }
                </FluentSelect>
            </div>

            <div class="addGroup">
                <div class="groupSettings">

                    <div class="nameBox" style="margin: 10px;">
                        <FluentTextField Style="z-index: 20;" @bind-Value=placename Placeholder="Group Name"></FluentTextField>
                    </div>

                    <div class="searchBoxes" style="margin: 10px;">
                        <FluentCombobox Items=@mailOptions
                                        OptionText="@(i => i.Text)"
                                        OptionValue="@(i => i.Value)"
                                        OptionSelected="@(i => i.Selected)"
                                        @bind-SelectedOption="@selectedMailOption"
                                        @bind-Value="@mailValue" />
                    </div>

                    <div class="searchBoxes" style="margin: 10px;">
                        <FluentCombobox Items=@teamOptions
                                        OptionText="@(i => i.Text)"
                                        OptionValue="@(i => i.Value)"
                                        OptionSelected="@(i => i.Selected)"
                                        @bind-SelectedOption="@selectedTeamOption"
                                        @bind-Value="@teamValue" />
                    </div>

                    <div class="searchBoxes" style="margin: 10px;">
                        <FluentCombobox Items=@calOptions
                                        OptionText="@(i => i.Text)"
                                        OptionValue="@(i => i.Value)"
                                        OptionSelected="@(i => i.Selected)"
                                        @bind-SelectedOption="@selectedCalOption"
                                        @bind-Value="@calValue" />
                    </div>
                </div>

                <div class="groupAdd" style="margin: 10px;">
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => addToGroup(mailValue, teamValue, calValue)">Add Filter</FluentButton>
                </div>
            </div>
        </div>

   
        <div class="mainContent">
            <div class="emailTeamsSection">
                <FluentTabs ActiveId="myActiveId" OnTabChange="HandleOnTabChange">
                    <FluentTab Text="Mail" />
                    <FluentTab Text="Teams" />
                    <FluentTab Text="Chats" />

                    @* OUTLOOK TAB *@
                    <FluentTabPanel>
                        <div class="mailPage">
                            <div class="emailBar">
                                <div class="emailSelect">
                                    @foreach (var mail in myMessages)
                                    {
                                        <div class="emailGap"></div>
                                        <div class="emailSelectBox" @onclick="() => ToggleMail(mail)">
                                            <div class="emailData">
                                                <p class="sender">@mail?.Sender?.EmailAddress?.Name</p>
                                                <p class="subject">@mail?.Subject</p>
                                                <p class="content">@mail?.BodyPreview</p>
                                            </div>


                                            <div class="emailRight">
                                                <div class="emailRightData">
                                                    <div class="timing">3:30PM</div>
                                                    @if (@mail?.IsRead == false)
                                                    {<span class="dotOn">&nbsp;</span> }
                                                    else
                                                    { <span class="dotOff">&nbsp;</span>}
                                                </div>

                                                <div class="emailInteraction">
                                                    <button class="btn2 btn-delete2" @onclick="() => deleteMail(currentEmail)">
                                                        <span class="mdi mdi-delete mdi-16px"></span>
                                                        <span class="mdi mdi-delete-empty mdi-16px"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="emailDisplay">
                                @if (currentEmail != null)
                                {
                                    <div class="emailDisplayContent">
                                        <div class="heading">
                                            <div class="ccDetails">
                                                <p class="subject">@currentEmail?.Subject</p>
                                                <p class="sender">From: @currentEmail?.Sender?.EmailAddress?.Name</p>
                                                <p class="recipient">To: @currentEmail?.ToRecipients?[0].EmailAddress?.Address</p>
                                            </div>

                                            <div class="emailInteraction">
                                                <button class="btn2 btn-delete2" @onclick="() => deleteMail(currentEmail)">
                                                    <span class="mdi mdi-delete mdi-16px"></span>
                                                    <span class="mdi mdi-delete-empty mdi-16px"></span>
                                                </button>
                                                <button class="btn2 btn-delete2" @onclick="() => replyToEmail(true)">
                                                    <span class="mdi mdi-reply-outline mdi-16px"></span>
                                                    <span class="mdi mdi-reply mdi-16px"></span>
                                                </button>
                                                <button class="btn2 btn-delete2" @onclick="() => replyToEmail(true)">
                                                    <span class="mdi mdi-reply-all-outline mdi-16px"></span>
                                                    <span class="mdi mdi-reply-all mdi-16px"></span>
                                                </button>
                                            </div>

                                        </div>

                                        <div class="content">
                                            <div class="body">@((MarkupString)currentEmail?.Body?.Content)</div>
                                        </div>

                                        <div class="emailReply" hidden="@(!emailReply)">

                                            <div class="heading">
                                                <div class="replyDetails">
                                                    <div class="replyContent">
                                                        <p class="subject">Re: @currentEmail?.Subject</p>
                                                        <p class="recipient">To: @currentEmail?.Sender?.EmailAddress?.Name</p>
                                                    </div>
                                                    <button class="btn2 btn-delete2" @onclick="() => replyToEmail(false)">
                                                        <span class="mdi mdi-close mdi-20px"></span>
                                                        <span class="mdi mdi-close-outline mdi-20px"></span>
                                                    </button>
                                                </div>

                                                <div class="emailResponseContent">
                                                    <FluentTextArea style="width: 95%;" size="large" class="reponseBox" @bind-Value=emailContent></FluentTextArea>

                                                    <div>
                                                        <button class="btn2 btn-delete2" @onclick="() => sendEmail(currentEmail, emailContent)">
                                                            <span class="mdi mdi-send-outline mdi-20px"></span>
                                                            <span class="mdi mdi-send mdi-20px"></span>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </FluentTabPanel>

                    @* TEAMS TAB *@
                    <FluentTabPanel>
                        <div class="teamsPage">
                            <div class="teamsBar">
                                @foreach (var team in myTeams)
                                {
                                    <button class="teamsSelectBox" @onclick="() => ToggleTeam(team)">
                                        <div class="teamName">&nbsp;@team?.DisplayName</div>
                                    </button>
                                }
                            </div>

                            <div class="channelBar">
                                @foreach (var channel in myChannels)
                                {
                                    <button class="channelSelectBox" @onclick="() => {ToggleChannel(channel); }">
                                        <div class="channelName">&nbsp;@channel?.DisplayName</div>
                                    </button>
                                }
                            </div>

                            <div class="teamChatBar">
                                @if (currentChannel != null)
                                {
                                    <div class="teamsMessageBlock">
                                        <ul class="nestedMessages">
                                            @foreach (var convo in myConvos)
                                            {
                                                @if (convo?.MessageType.ToString() == "Message")
                                                {
                                                    <li class="teamMessageBlock">
                                                        <div class="teamChatInital">
                                                            <div class="details">
                                                                <div class="teamChatName">@convo?.From?.User?.DisplayName</div>
                                                                <div>@convo?.CreatedDateTime</div>
                                                                @if (convo?.DeletedDateTime != null)
                                                                {<div class="teamChatContent"><i>This message has been deleted</i></div> }
                                                                else
                                                                { <div class="teamChatContent">@((MarkupString)convo?.Body?.Content)</div>}
                                                            </div>

                                                            <div class="interact">
                                                                @if (convo?.From.User.Id == myID)
                                                                {
                                                                    <button class="btn2 btn-delete2" @onclick="() => delChannelMessage(convo)">
                                                                        <span class="mdi mdi-delete mdi-16px"></span>
                                                                        <span class="mdi mdi-delete-empty mdi-16px"></span>
                                                                    </button>
                                                                }
                                                                <button class="btn2 btn-delete2" @onclick="() => replyToChannelMsg(true)">
                                                                    <span class="mdi mdi-reply-outline mdi-16px"></span>
                                                                    <span class="mdi mdi-reply mdi-16px"></span>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <ul>
                                                            @foreach (var reply in myReplies)
                                                            {
                                                                @foreach (var subreply in reply.Reverse())
                                                                {
                                                                    @if (convo.Id == subreply["replyToId"].ToString())
                                                                    {
                                                                        <li>
                                                                            <div class="teamReplySection">
                                                                                <div class="teamChatName">@subreply?["from"]?["user"]?["displayName"]</div>

                                                                                <div>@subreply?["createdDateTime"]</div>

                                                                                @if (subreply?["deletedDateTime"].ToString() != "")
                                                                                {<div class="teamChatContent"><i>This message has been deleted</i></div> }
                                                                                else
                                                                                { <div class="teamChatContent">@((MarkupString)(subreply?["body"]?["content"]).ToString())</div>}

                                                                            </div>
                                                                        </li>
                                                                    }
                                                                }
                                                            }
                                                        </ul>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                        <div class="teamInteract" hidden="@(!newChannelMessageBool)">

                                            <FluentTextArea @bind-Value=newChannelMessageContent style="width: 95%;" size="large"></FluentTextArea>

                                            <div class="teamMsgInteract">
                                                <button class="btn2 btn-delete2" @onclick="() => sendChannelMessage(false)">
                                                    <span class="mdi mdi-close mdi-20px"></span>
                                                    <span class="mdi mdi-close-outline mdi-20px"></span>
                                                </button>

                                                <button class="btn2 btn-delete2" @onclick="() => newChannelMessage(newChannelMessageContent)">
                                                    <span class="mdi mdi-send-outline mdi-20px"></span>
                                                    <span class="mdi mdi-send mdi-20px"></span>
                                                </button>
                                            </div>

                                        </div>
                                        <span class="mdi mdi-plus-circle" style="color: blue; font-size: 40px;" @onclick="() => sendChannelMessage(true)" hidden="@newChannelMessageBool"></span>
                                    </div>
                                }
                            </div>
                        </div>
                    </FluentTabPanel>

                    @* CHATS TAB *@
                    <FluentTabPanel>
                        <div class="chatsPage">
                            <div class="mypChats">
                                @foreach (var myChat in myChats)
                                {
                                    @if (myChat?.Topic == null)
                                    {
                                        <div class="chatSelectBox" @onclick="() => ToggleChat(myChat)">
                                            <div class="chatName">@myChat?.ChatType</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="chatSelectBox" @onclick="() => ToggleChat(myChat)">
                                            <div class="chatName">@myChat?.Topic</div>
                                        </div>
                                    }
                                }
                            </div>

                            <div class="pChatBarContainer">
                                @if (currentChat != null)
                                {
                                    <div class="chatMessageBlock">
                                        <div class="pChatBar">
                                            @foreach (var thisChat in myChatReplies)
                                            {
                                                @if (@thisChat?.From?.User?.Id == myID)
                                                {
                                                    <div class="isend">
                                                        <div class="chatname">@thisChat?.From?.User?.DisplayName</div>
                                                        <div class="chattime">@thisChat?.CreatedDateTime</div>
                                                        <div class="chatcontent">@((MarkupString)thisChat?.Body?.Content)</div>
                                                    </div>
                                                }
                                                else if (@thisChat?.From?.User?.Id != null)
                                                {
                                                    <div class="theysend">
                                                        <div class="chatname">@thisChat?.From?.User?.DisplayName</div>
                                                        <div class="chattime">@thisChat?.CreatedDateTime</div>
                                                        <div class="chatcontent">@((MarkupString)thisChat?.Body?.Content)</div>
                                                    </div>
                                                }
                                            }
                                        </div>

                                        <div class="teamInteract" hidden="@(!newChatMessageBool)">

                                            <FluentTextArea @bind-Value=newChatMessageContent style="width: 95%;" size="large"></FluentTextArea>

                                            <div class="teamMsgInteract">
                                                <button class="btn2 btn-delete2" @onclick="() => sendChatMessage(false)">
                                                    <span class="mdi mdi-close mdi-20px"></span>
                                                    <span class="mdi mdi-close-outline mdi-20px"></span>
                                                </button>

                                                <button class="btn2 btn-delete2" @onclick="() => newChatMessage(newChatMessageContent)">
                                                    <span class="mdi mdi-send-outline mdi-20px"></span>
                                                    <span class="mdi mdi-send mdi-20px"></span>
                                                </button>
                                            </div>

                                        </div>
                                        <span class="mdi mdi-plus-circle" style="color: blue; font-size: 40px;" @onclick="() => sendChatMessage(true)" hidden="@newChatMessageBool"></span>
                                    </div>
                                }
                            </div>
                        </div>
                    </FluentTabPanel>
                </FluentTabs>
            </div>

            <div class="calendarSection">
                @foreach (var calendarEvent in myEvents)
                {
                    <div class="event">
                        <p class="subject">@calendarEvent?.Subject</p>

                        <div class="timing">
                            <p class="date">@FormatIso8601DateTime(calendarEvent?.Start?.DateTime).Substring(0, 10)</p>
                            <p class="time">@FormatIso8601DateTime(calendarEvent?.Start?.DateTime).Substring(11, 5) - @FormatIso8601DateTime(calendarEvent?.Start?.DateTime).Substring(11, 5)</p>
                        </div>

                        <p class="organiser">@calendarEvent?.Organizer?.EmailAddress?.Name</p>

                    </div>
                }
            </div>
        </div>

        <div class="chat-bot">
            <Chat />
        </div>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>


@code{
    [Parameter]
    public string ids { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private string? myID;

    private string? dateTimeFormat;
    private string? oldData;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        if (ids != null) { await initialLayout(); }

        graphClient = clientFactory.GetAuthenticatedClient();
        var me = await graphClient.Me.GetAsync();
        myID = me?.Id;
        await refreshContent(4);
    }

    /*
    * REFRESH EVERY 10s
    */
    private static System.Timers.Timer _timer;
    private int counter = 60;

    protected override void OnInitialized()
    {
        StartTimer();
    }

    public void StartTimer()
    {
        _timer = new System.Timers.Timer(5000);
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            _timer.Enabled = false;
        }

        await refreshContent(4);
    }

    public async Task initialLayout()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        string idss = ids;
        string[] idArray = idss.Split('=', 2);

        if (idArray[0] == "mailid")
        {
            myActiveId = "Mail";
            var initMail = await graphClient.Me.Messages[idArray[1]].GetAsync();
            currentEmail = initMail;
        }
        else if (idArray[0] == "teamid")
        {
            myActiveId = "Teams";
            var initTeam = await graphClient.Teams[idArray[1]].GetAsync();
            currentTeam = initTeam;
        }
        StateHasChanged();
    }

    /*
    * Refresh the screen
    */
    public async Task refreshContent(int page)
    {
        if (page == 0) { await getMail(mailQuery); }
        else if (page == 1)
        {
            //await getTeams(teamQuery);
            //await getChannels();
            await displayChannelData();
        }
        else if (page == 2) { await getChats("hi"); await getChatReplies(); }
        else if (page == 3) { }
        else
        {
            await getMail(mailQuery);
            await getTeams(teamQuery);
            await getChats("hi");
            await displayChannelData();
        }
        await getCal(calQuery);
        StateHasChanged();
    }

    /*
    * GET MAIL EVENTS
    */
    /* MAIL LIST */
    private IList<Message> myMessages = new List<Message>();

    /* ASYNCHRONOUSLY GET MAIL */
    public async Task getMail(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        var result = await graphClient.Me.MailFolders.GetAsync();

        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                //config.Headers.Add("Prefer", "outlook.body-content-type='text'");
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");

                if (addresses != "All") { config.QueryParameters.Filter = "(from/emailAddress/address) eq '" + addresses; }

                config.QueryParameters.Select = new string[] { "subject", "sender", "body", "isRead", "bodyPreview" };
            });

        /*
        * Set to non-async variable. Can then be accessed in html.
        */
        myMessages = mailPage?.Value ?? new List<Message>();
    }

    // REPLY TO EMAILS
    string? emailContent;
    private bool emailReply { get; set; } = false;
    private void replyToEmail(bool change) { emailReply = change; }

    public async void sendEmail(Message originEmail, string content)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        var recipients = originEmail.ToRecipients;
        var mainAddress = originEmail?.Sender?.EmailAddress?.Address;

        if (recipients == null) { recipients = new List<Recipient> { new Recipient { EmailAddress = new EmailAddress { Address = mainAddress, }, }, }; }
        else
        {
            var mainAddressSend = new Recipient { EmailAddress = new EmailAddress { Address = mainAddress, }, };
            recipients.Add(mainAddressSend);
        }

        var requestBody = new Microsoft.Graph.Me.Messages.Item.Reply.ReplyPostRequestBody
        {
            Message = new Message
            {
                ToRecipients = recipients,
            },
            Comment = content,
        };
        emailContent = String.Empty;
        emailReply = false;

        await graphClient.Me.Messages[originEmail?.Id].Reply.PostAsync(requestBody);
        await refreshContent(0);
    }

    public async Task deleteMail(Message email)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        await graphClient.Me.Messages[email.Id].DeleteAsync();

        if (email == currentEmail) { currentEmail = null; }
        await refreshContent(0);
    }

    /*
    * GET TEAM EVENTS
    */
    /* TEAMS LIST */
    private IList<Team> myTeams = new List<Team>();

    /* ASYNCHRONOUSLY GET TEAMS */
    public async Task getTeams(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var teamPage = await graphClient.Me.JoinedTeams.GetAsync();

        if (addresses != "All")
        {
            var tempTeams = new List<Team>();
            foreach (var myTeam in teamPage.Value) {
                if (myTeam.DisplayName.ToLower() == addresses) { tempTeams.Add(myTeam); Console.WriteLine("///////////////////////////////////////"); Console.WriteLine(myTeam.DisplayName); Console.WriteLine("///////////////////////////////////////"); }
            }
            myTeams = tempTeams ?? new List<Team>();
        }
        else { myTeams = teamPage?.Value ?? new List<Team>(); }
    }

    /*
    * GET CHANNEL EVENTS
    */
    /* CHANNEL LIST */
    private IList<Channel> myChannels = new List<Channel>();

    /* ASYNCHRONOUSLY GET CHANNELS */
    public async Task getChannels()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var channelPage = await graphClient.Teams[currentTeam.Id].Channels.GetAsync();
        myChannels = channelPage?.Value ?? new List<Channel>();
    }

    /*
    * GET ALL CHANNEL CHATS
    */
    public class messageBlock
    {
        public ChatMessage? mainMessage { get; set; }
        public IList<ChatMessage>? replies { get; set; }
    }

    private IList<ChatMessage> myConvos = new List<ChatMessage>();
    private IList<JToken> myReplies = new List<JToken>();

    internal class OData<T>
    {
        public T Value { get; set; }
    }

    public async Task displayChannelData()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var myRepliesLocal = new List<JToken>();

        if (currentChannel != null)
        {
            var convoPageTest = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages.GetAsync();
            var reversal = convoPageTest?.Value ?? new List<ChatMessage>();
            reversal.Reverse();
            myConvos = reversal;

            var batchRequestContent = new BatchRequestContent(graphClient);
            string? repliesRequestId = null;

            foreach (var conversation in myConvos)
            {
                var replyPageTest = graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages[conversation.Id].Replies.ToGetRequestInformation();
                repliesRequestId = await batchRequestContent.AddBatchRequestStepAsync(replyPageTest);
            }
            var returnedResponse = await graphClient.Batch.PostAsync(batchRequestContent);

            try
            {
                var gotReplies = await returnedResponse.GetResponsesAsync();
                foreach (var x in gotReplies)
                {
                    var y = await x.Value.Content.ReadAsStringAsync();
                    JObject myjson = JObject.Parse(y);
                    JToken myToken = myjson["value"];
                    if (myToken?.ToString() != "[]") { myRepliesLocal.Add(myToken); }
                }
                myReplies = myRepliesLocal;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Getting replies failed: {ex.Message}");
            }
        }
    }

    // Create new channel message
    string? newChannelMessageContent;
    private bool newChannelMessageBool { get; set; } = false;
    private void sendChannelMessage(bool change) { newChannelMessageBool = change; }

    public async void newChannelMessage(string content)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        var requestBody = new ChatMessage
        {
            Body = new ItemBody
            {
                Content = content,
            },
        };

        newChannelMessageContent = String.Empty;
        newChannelMessageBool = false;

        var result = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages.PostAsync(requestBody);
        await refreshContent(1);
    }

    // Delete Channel message
    public async void delChannelMessage(ChatMessage currMessage)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages[currMessage.Id].SoftDelete.PostAsync();
        await refreshContent(1);
    }

    // Reply to a message account
    string? messageContent;
    private bool messageReply { get; set; } = false;
    private void replyToChannelMsg(bool change) { messageReply = change; }

    public async void replyChannelMessage(ChatMessage currMessage)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var requestBody = new ChatMessage
        {
            Body = new ItemBody
            {
                ContentType = BodyType.Html,
                Content = "Hello World",
            },
        };
        var result = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages[currMessage.Id].Replies.PostAsync(requestBody);
        await refreshContent(2);
    }

    /*
    * GET PERSONAL CHATS
    */
    /* CHAT LIST */
    private IList<Microsoft.Graph.Models.Chat> myChats = new List<Microsoft.Graph.Models.Chat>();
    private IList<ChatMessage> myChatReplies = new List<ChatMessage>();

    /* ASYNCHRONOUSLY GET CHATS */
    public async Task getChats(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var chatPage = await graphClient.Me.Chats.GetAsync();
        myChats = chatPage?.Value ?? new List<Microsoft.Graph.Models.Chat>();
    }

    public async Task getChatReplies()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var thisChat = await graphClient.Me.Chats[currentChat.Id].Messages.GetAsync();
        var thisChatTemp = thisChat?.Value;
        thisChatTemp.Reverse();

        myChatReplies = thisChatTemp ?? new List<ChatMessage>();
    }

    // Create new chat message
    string? newChatMessageContent;
    private bool newChatMessageBool { get; set; } = false;
    private void sendChatMessage(bool change) { newChatMessageBool = change; }

    public async void newChatMessage(string content)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        var requestBody = new ChatMessage
        {
            Body = new ItemBody
            {
                Content = content,
            },
        };

        newChatMessageContent = String.Empty;
        newChatMessageBool = false;

        var result = await graphClient.Chats[currentChat.Id].Messages.PostAsync(requestBody);
        await refreshContent(2);
    }

    /*
    * GET CALENDAR EVENTS
    */
    /* EVENTS LIST */
    private IList<Event> myEvents = new List<Event>();

    /* ASYNCHRONOUSLY GET EVENTs */
    public async Task getCal(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        /*
        * GET ALL CALENDAR EVENTS
        */
        /*var eventPage = await graphClient.Me
        .CalendarView
        .GetAsync(config =>
        {
        //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
        //config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
        //config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
        config.QueryParameters.Top = 50;
        config.QueryParameters.Select = new[] { "subject", "organizer", "start", "end" };
        config.QueryParameters.Orderby = new[] { "start/dateTime" };
    });*/

        @* var eventPage = await graphClient.Me.Calendar.Events.GetAsync(); *@

        var eventPage = await graphClient.Me.Calendar.CalendarView.GetAsync(config =>
            {
                config.QueryParameters.StartDateTime = "2022-06-28T19:00:00-08:00";
                config.QueryParameters.EndDateTime = "2023-06-30T19:00:00-08:00";
                config.QueryParameters.Top = 15;
            });
        myEvents.Clear();

        var pageIterator =
            PageIterator<Event, EventCollectionResponse>
            .CreatePageIterator(
        graphClient,
        eventPage,
        // Callback executed for each item in
        // the collection
        (msg) =>
        {
            myEvents.Add(msg);
            return true;
        },
        // Used to configure subsequent page
        // requests
        (req) =>
        {
            // Re-add the header to subsequent requests
            req.Headers.Add("Prefer", "outlook.body-content-type=\"text\"");
            return req;
        });
        await pageIterator.IterateAsync();

    }

    /*
    * DATE-TIME STUFF
    */
    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }

    /*
    * HANDLE WHICH TAB IS BEING PRESENTED
    */
    string? myActiveId;
    FluentTab? changedto;
    private void HandleOnTabChange(FluentTab tab) { changedto = tab; }

    /*
    * SHOW THE DETAILS OF THE CURRENT EMAIL/TEAM/CHANNEL/CHAT
    */
    private Message currentEmail { get; set; } = null;
    private async void ToggleMail(Message email)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        currentEmail = (currentEmail == email) ? null : email;


        //Set to read.
        if (currentEmail?.IsRead == false)
        {
            var requestBody = new Message
            {
                IsRead = true,
            };
            await graphClient.Me.Messages[currentEmail.Id].PatchAsync(requestBody);
            await getMail("All");
            StateHasChanged();
        }

        emailContent = String.Empty;
        emailReply = false;
    }

    private Team currentTeam { get; set; } = null;
    private async void ToggleTeam(Team teamsChat)
    {
        currentTeam = (currentTeam == teamsChat) ? null : teamsChat;
        currentChannel = null;
        myConvos.Clear();
        myReplies.Clear();
        await getChannels();
        StateHasChanged();
    }

    private Channel currentChannel { get; set; } = null;
    private async void ToggleChannel(Channel channelChat)
    {
        currentChannel = (currentChannel == channelChat) ? null : channelChat;
        myConvos.Clear();
        myReplies.Clear();
        if(currentChannel != null) { await displayChannelData(); }
        StateHasChanged();
    }

    private Microsoft.Graph.Models.Chat currentChat { get; set; } = null;
    private async void ToggleChat(Microsoft.Graph.Models.Chat chat)
    {
        currentChat = (currentChat == chat) ? null : chat;
        if (currentChat != null) { await getChatReplies(); }
        StateHasChanged();
    }

    /*
    * NEW GROUP ADDED - UPDATE ASYNC
    */
    public string mailQuery { get; set; } = "All";
    public string teamQuery { get; set; } = "All";
    public string calQuery { get; set; } = "All";

    async void UpdateGroup(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();
            if (searchTerm == "all")
            {
                mailQuery = "All";
                teamQuery = "All";
                calQuery = "All";
                await refreshContent(4);
            }
            else
            {
                mailQuery = searchTerm.Split(';')[0] + "'";
                teamQuery = searchTerm.Split(';')[1];
                calQuery = searchTerm.Split(';')[2] + "'";

                Console.WriteLine("mailQuery " + mailQuery);
                Console.WriteLine("teamQuery " + teamQuery);
                Console.WriteLine("calQuery " + calQuery);

                await refreshContent(4);
            }
        }
    }

    /*
    * CREATE LOCAL CLASS TO STORE GROUPS.
    * ALSO SEND TO API MONGO DB
    */

    public class GroupItem
    {
        public string? Name { get; set; }
        public string? mailName { get; set; }
        public string? teamName { get; set; }
        public string? calName { get; set; }
    }

    string? placename { get; set; } = string.Empty;
    string? selectedGroupValue;
    private List<GroupItem> myGroups = new() {
        { new GroupItem { Name = "ikd", mailName = "ikd@7qp7mb.onmicrosoft.com", teamName = "Mark 8 Project Team", calName = "All" } }
    };


    /*
    * ALL INPUT BOXES TO CREATE GROUPS
    * GETTING DATA FROM GRAPH TO FILL SEARCH BOXES
    */

    string? mailValue;
    Option<string> selectedMailOption = default!;
    string? teamValue;
    Option<string> selectedTeamOption = default!;
    string? calValue;
    Option<string> selectedCalOption = default!;

    List<Option<string>> mailOptions = new()
    {
        { new Option<string> { Value = "AdeleV@7qp7mb.onmicrosoft.com", Text = "AdeleV@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "AlexW@7qp7mb.onmicrosoft.com", Text = "AlexW@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ajp20@7qp7mb.onmicrosoft.com", Text = "ajp20@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "brendon@7qp7mb.onmicrosoft.com", Text = "brendon@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ccl19@7qp7mb.onmicrosoft.com", Text = "ccl19@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "DiegoS@7qp7mb.onmicrosoft.com", Text = "DiegoS@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "extraadmin@7qp7mb.onmicrosoft.com", Text = "extraadmin@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "GradyA@7qp7mb.onmicrosoft.com", Text = "GradyA@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "HenriettaM@7qp7mb.onmicrosoft.com", Text = "HenriettaM@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ikd@7qp7mb.onmicrosoft.com", Text = "ikd@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "IsaiahL@7qp7mb.onmicrosoft.com", Text = "IsaiahL@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "JohannaL@7qp7mb.onmicrosoft.com", Text = "JohannaL@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "JoniS@7qp7mb.onmicrosoft.com", Text = "JoniS@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "LeeG@7qp7mb.onmicrosoft.com", Text = "LeeG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "LidiaH@7qp7mb.onmicrosoft.com", Text = "LidiaH@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "LynneR@7qp7mb.onmicrosoft.com", Text = "LynneR@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "maha@7qp7mb.onmicrosoft.com", Text = "maha@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "MeganB@7qp7mb.onmicrosoft.com", Text = "MeganB@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "MiriamG@7qp7mb.onmicrosoft.com", Text = "MiriamG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "NestorW@7qp7mb.onmicrosoft.com", Text = "NestorW@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "PattiF@7qp7mb.onmicrosoft.com", Text = "PattiF@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "PradeepG@7qp7mb.onmicrosoft.com", Text = "PradeepG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "sarimbaig@7qp7mb.onmicrosoft.com", Text = "sarimbaig@7qp7mb.onmicrosoft.com"} }
    };

    List<Option<string>> teamOptions = new()
    {
        { new Option<string> { Value = "Digital Initiative Public Relations", Text = "Digital Initiative Public Relations" } },
        { new Option<string> { Value = "Mark 8 Project Team", Text = "Mark 8 Project Team"} },
        { new Option<string> { Value = "MSFT", Text = "MSFT" } },
        { new Option<string> { Value = "MSFT1", Text = "MSFT1"} },
        { new Option<string> { Value = "MSFT2", Text = "MSFT2"} },
        { new Option<string> { Value = "MSFT3", Text = "MSFT3"} },
        { new Option<string> { Value = "Project Alpha", Text = "Project Alpha"} },
        { new Option<string> { Value = "Retail", Text = "Retail"} },
        { new Option<string> { Value = "Sales and Marketing", Text = "Sales and Marketing"} },
        { new Option<string> { Value = "Sample Site Team", Text = "Sample Site Team"} },
        { new Option<string> { Value = "Test", Text = "Test"} },
        { new Option<string> { Value = "U.S. Sales", Text = "U.S. Sales"} }
    };

    List<Option<string>> calOptions = new()
    {
        { new Option<string> { Value = "AdeleV@7qp7mb.onmicrosoft.com", Text = "AdeleV@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "AlexW@7qp7mb.onmicrosoft.com", Text = "AlexW@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ajp20@7qp7mb.onmicrosoft.com", Text = "ajp20@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "brendon@7qp7mb.onmicrosoft.com", Text = "brendon@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ccl19@7qp7mb.onmicrosoft.com", Text = "ccl19@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "DiegoS@7qp7mb.onmicrosoft.com", Text = "DiegoS@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "extraadmin@7qp7mb.onmicrosoft.com", Text = "extraadmin@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "GradyA@7qp7mb.onmicrosoft.com", Text = "GradyA@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "HenriettaM@7qp7mb.onmicrosoft.com", Text = "HenriettaM@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "ikd@7qp7mb.onmicrosoft.com", Text = "ikd@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "IsaiahL@7qp7mb.onmicrosoft.com", Text = "IsaiahL@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "JohannaL@7qp7mb.onmicrosoft.com", Text = "JohannaL@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "JoniS@7qp7mb.onmicrosoft.com", Text = "JoniS@7qp7mb.onmicrosoft.com" } },
        { new Option<string> { Value = "LeeG@7qp7mb.onmicrosoft.com", Text = "LeeG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "LidiaH@7qp7mb.onmicrosoft.com", Text = "LidiaH@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "LynneR@7qp7mb.onmicrosoft.com", Text = "LynneR@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "maha@7qp7mb.onmicrosoft.com", Text = "maha@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "MeganB@7qp7mb.onmicrosoft.com", Text = "MeganB@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "MiriamG@7qp7mb.onmicrosoft.com", Text = "MiriamG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "NestorW@7qp7mb.onmicrosoft.com", Text = "NestorW@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "PattiF@7qp7mb.onmicrosoft.com", Text = "PattiF@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "PradeepG@7qp7mb.onmicrosoft.com", Text = "PradeepG@7qp7mb.onmicrosoft.com"} },
        { new Option<string> { Value = "sarimbaig@7qp7mb.onmicrosoft.com", Text = "sarimbaig@7qp7mb.onmicrosoft.com"} }
    };

    void addToGroup(string m, string t, string c)
    {
        if(m == "") { m = "All"; };
        if(t == "") { t = "All"; };
        if (c == "") { c = "All"; };

        if (!string.IsNullOrWhiteSpace(placename))
        {
            myGroups.Add(new GroupItem { Name = placename, mailName = m, teamName = t, calName = c });
        }

        placename = String.Empty;
        selectedCalOption = default;
        calValue = String.Empty;
        selectedMailOption = default!;
        mailValue = String.Empty;
        selectedTeamOption = default!;
        teamValue = String.Empty;
    }

}