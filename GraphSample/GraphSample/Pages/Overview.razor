@page "/overview/{ids}"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Fast.Components.FluentUI

@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    .container{
        height: 100vh;
        width: 100% !important;
        background-image: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8));
        border-radius: 1rem;
        padding: 1px;
    }
</style>
<div class="container">
<AuthorizeView>
    <Authorized>
        @* <link href="{PROJECT_NAME}.styles.css" rel="stylesheet" /> *@
        @* <link href="_content/Microsoft.Fast.Components.FluentUI/css/reboot.css" rel="stylesheet" /> *@
        
        @* To get the id out of the link *@
        @* @{
            string idss = ids;
            string[] idArray = idss.Split('=');
        }
        <h1>HI: @idArray[1]</h1> *@ 
        <div class="groupSec">
            <div class="seeGroups">
                <FluentSelect Id="state" name="state" TOption="GroupItem" @onchange="UpdateGroup" @bind-Value="selectedGroupValue">
                    <FluentOption Selected="true" Value="@null">All</FluentOption>
                    @foreach (var group in myGroups)
                    {
                        <FluentOption Value="@(group.mailName+';'+group.teamName+';'+group.calName)">@group.Name</FluentOption>
                    }
                </FluentSelect>

            </div>

            <div class="addGroup">
                <div class="groupSettings">

                    <div class="nameBox">
                        <FluentTextField @bind-Value=placename></FluentTextField>
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=mailSearchTest
                                      @oninput=handleMailSearchInput
                                      @onchange=handleMailSearchInput
                                      @bind-Value="@mailListValue"
                                      Placeholder="Mailing account" />
                        <br />
                        <FluentListbox Items=@mailResults TOption="string" SelectedOptionChanged="@(e => mailListValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=teamSearchTest
                                      @oninput=handleTeamSearchInput
                                      @onchange=handleTeamSearchInput
                                      @bind-Value="@teamNameValue"
                                      Placeholder="Team Chat" />
                        <br />
                        <FluentListbox Items=@teamResults TOption="string" SelectedOptionChanged="@(e => teamNameValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>

                    <div class="searchBoxes">
                        <FluentSearch @ref=calSearchTest
                                      @oninput=handleCalSearchInput
                                      @onchange=handleCalSearchInput
                                      @bind-Value="@calendarValue"
                                      Placeholder="Calendar" />
                        <br />
                        <FluentListbox Items=@calResults TOption="string" SelectedOptionChanged="@(e => calendarValue = (e != defaultResultsText ? e : string.Empty) )" />
                    </div>
                </div>

                <div class="groupAdd">
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => addToGroup(mailListValue, teamNameValue, calendarValue)">Add</FluentButton>
                </div>
            </div>
        </div>


        <div class="mainContent">
            <div class="emailTeamsSection">
                <FluentTabs ActiveId="@activeid" OnTabChange="HandleOnTabChange">
                    <FluentTab Text="Mail" />
                    <FluentTab Text="Teams" />
                    <FluentTab Text="Chats" />
                    <FluentTab Text="Calendar" />

                    @* OUTLOOK TAB *@
                    <FluentTabPanel>
                        <div class="mailPage">
                            <div class="emailBar">
                                <div class="emailSelect">
                                    @foreach (var mail in myMessages)
                                    {
                                        <FluentCard @onclick="() => ToggleMail(mail)">
                                            <div class="emailSelectBox">
                                                <div class="emailData">
                                                    <p class="sender">@mail?.Sender?.EmailAddress?.Name</p>
                                                    <p class="subject">@mail?.Subject</p>
                                                    <p class="content">@mail?.Body?.Content</p>
                                                </div>
                                                <div class="timing">@mail?.ReceivedDateTime</div>
                                                <button class="deleteButton" @onclick="()=> deleteMail(mail)">Delete</button>
                                            </div>
                                        </FluentCard>
                                    }
                                </div>
                            </div>
                            <div class="emailDisplay">
                                <div class="heading">
                                    <p class="subject">@currentEmail?.Subject</p>
                                    <p class="sender">@currentEmail?.Sender?.EmailAddress?.Name</p>
                                    <p class="recipient">@currentEmail?.ToRecipients</p>
                                </div>
                                <div class="content">@currentEmail?.Body?.Content</div>

                                <div class="emailReply" hidden="@(!emailReply)">
                                    <button @onclick="() => replyToEmail(false)">CLOSE</button>
                                    <div class="heading">
                                        <p class="subject">Re: @currentEmail?.Subject</p>
                                        <p class="sender">To: @currentEmail?.Sender?.EmailAddress?.Name</p>
                                        <p class="recipient">From: @currentEmail?.ToRecipients?[0].EmailAddress?.Name</p>
                                    </div>
                                    <div class="emailResponseContent">
                                        <FluentTextArea @bind-Value=emailContent></FluentTextArea>
                                    </div>
                                    <button @onclick="() => sendEmail(currentEmail?.Sender?.EmailAddress?.Address, currentEmail?.ToRecipients, currentEmail?.Subject, emailContent)">SEND</button>
                                </div>
                            </div>
                            <div class="mailInteract">
                                <button @onclick="() => replyToEmail(true)">Reply</button>

                            </div>
                        </div>

                    </FluentTabPanel>

                    @* TEAMS TAB *@
                    <FluentTabPanel>
                        <div class="teamsPage">
                            <div class="teamsBar">
                                <div class="teamsSelect">
                                    @foreach (var team in myTeams)
                                    {
                                        <FluentCard @onclick="() => ToggleTeam(team)">
                                            <div class="teamsSelectBox">
                                                <div class="teamName">@team?.DisplayName</div>
                                            </div>
                                        </FluentCard>
                                    }
                                </div>
                            </div>
                            <div class="channelBar">
                                <div class="channelSelect">
                                    @foreach (var channel in myChannels)
                                    {
                                        <FluentCard @onclick="() => {ToggleChannel(channel); displayChannelData(channel); }">
                                            <div class="channelSelectBox">
                                                <div class="channelName">@channel?.DisplayName</div>
                                            </div>
                                        </FluentCard>
                                    }
                                </div>
                            </div>
                            <div class="teamChatBar">
                                <div class="teamChatSelect">
                                    <div class="teamsMessageBlock">
                                        <ul class="nestedMessages">
                                            @foreach (var full in fullPage)
                                            {
                                                <li class="teamMessageBlock">
                                                    <div class="teamChatInital">
                                                        <div class="teamChatName">@full?.mainMessage?.From?.User?.DisplayName</div>
                                                        <div>@full?.mainMessage?.CreatedDateTime</div>
                                                        <div class="teamChatContent">@full?.mainMessage?.Body?.Content</div>
                                                        <button>Reply</button>
                                                    </div>
                                                    <ul>
                                                        @foreach (var reply in full?.replies)
                                                        {
                                                            <li>
                                                                <div class="teamReplySection">
                                                                    <div class="teamChatName">@reply?.From?.User?.DisplayName</div>
                                                                    <div>@reply?.CreatedDateTime</div>
                                                                    <div class="teamChatContent">@reply?.Body?.Content</div>
                                                                </div>
                                                            </li>
                                                        }
                                                    </ul>
                                                </li>
                                            }
                                            <div hidden="@(!newChannelMessageBool)">
                                                <FluentTextArea @bind-Value=newChannelMessageContent></FluentTextArea>
                                                <button @onclick="() => newChannelMessage(newChannelMessageContent)">New Chat</button>
                                            </div>
                                        </ul>
                                        <button @onclick="() => sendChannelMessage(true)">New Message</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </FluentTabPanel>

                    @* CHATS TAB *@
                    <FluentTabPanel>
                        <div class="row">
                            <div class="splitleft">
                                <div class="teamSec">
                                    @foreach (var chat in myChats)
                                    {
                                        <FluentCard @onclick="() => ToggleChat(chat)">
                                            <div class="teamEntryBox">
                                                <div class="teamEntryData">
                                                    <p class="subject">@chat?</p>
                                                    <p class="subject">@chat?</p>
                                                </div>
                                            </div>
                                        </FluentCard>
                                    }
                                </div>
                            </div>

                            <div class="splitright">
                            </div>
                        </div>

                    </FluentTabPanel>

                    @* CALENDAR TAB *@
                    <FluentTabPanel>
                        <div class="row">
                            <div class="splitleft">
                                <div class="calSec">
                                    @foreach (var calendarEvent in myEvents)
                                    {
                                        <FluentCard>
                                            <div class="calEntryBox">
                                                <div class="calEntryData">
                                                    <p class="subject">@calendarEvent?.Subject</p>
                                                    <p class="organizer">@calendarEvent?.Organizer?.EmailAddress?.Name</p>
                                                    <p class="content">Content</p>
                                                </div>

                                                <div class="calDateTime">
                                                    <p class="begin">@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</p>
                                                    <p class="fin">@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</p>
                                                </div>
                                            </div>
                                        </FluentCard>
                                    }
                                </div>
                            </div>

                            <div class="splitright">
                            </div>
                        </div>
                    </FluentTabPanel>
                </FluentTabs>
            </div>

            <div class="calendarSection">
                @foreach (var calendarEvent in myEvents)
                {
                    <FluentCard>
                        <p>@calendarEvent?.Subject</p>
                        <p>@calendarEvent?.Organizer?.EmailAddress?.Name</p>
                        <p>Content</p>

                        <p>@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</p>
                        <p>@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</p>
                    </FluentCard>
                }
            </div>
        </div>

        <style>
            /*
             *Generic
             */
            ul {
                list-style-type: none;
            }

            .mainContent {
                display: flex;
            }

            /*
             * Group settings
             */
            .groupSec {
                display: flex;
            }

            .groupSettings {
                display: flex;
            }

            .addGroup {
                display: flex;
            }

            /*
             * EMAILS
             */
            .mailPage {
                height: 70vh;
                display: flex;
            }

                .emailBar {
                    width: 20%;
                    overflow-y: scroll;
                }

                    .emailSelect {
                    }

                        .emailSelectBox {
                            padding: 5px;
                            display: flex;
                        }

                            .emailData {
                                width: 90%;
                            }

                                .emailData .sender {
                                    padding-right: 10px;
                                    margin-bottom: 0;
                                    font-size: large;
                                    white-space: nowrap;
                                    overflow: hidden;
                                    text-overflow: ellipsis;
                                    max-width: 90%;
                                }

                                .emailData .subject {
                                    padding: 0;
                                    margin-bottom: 0;
                                    font-size: small;
                                    white-space: nowrap;
                                    overflow: hidden;
                                    text-overflow: ellipsis;
                                    max-width: 90%;
                                }

                                .emailData .content {
                                    padding: 0;
                                    margin-bottom: 0;
                                    font-size: small;
                                    white-space: nowrap;
                                    overflow: hidden;
                                    text-overflow: ellipsis;
                                    max-width: 90%;
                                }

                            .emailSelectBox .timing {
                                width: 10%;
                            }

                .emailDisplay {
                    width: 60%;
                    overflow-y: scroll;
                    padding-left: 25px;
                }

                    .emailDisplay .heading {
                    }
                        
                        .heading .subject {
                            overflow-wrap: break-all;
                        }

                        .heading .sender {
                        }

                        .heading .recipient {
                        }

                    .emailDisplay .content {
                        width: 100%;
                        word-wrap: break-word;
                    }

            /*
             * TEAMS
             */

            .teamsPage {
                display: flex;
                height: 70vh;
            }

                .teamsBar {
                    width: 20%;
                    overflow-y: scroll;
                }

                    .teamsSelect {
                        width: 100%;
                    }

                        .teamChatIntial {
                            width: 100%;
                            padding: 5px;
                        }

                            .teamName {
                                width: 90%;
                                padding-bottom: 5px;
                                font-size: large;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 90%;
                            }

                .channelBar {
                    width: 20%;
                    overflow-y: scroll;
                }
                    .channelSelect {
                        width: 100%;
                    }

                        .channelSelectBox {
                            width: 100%;
                            padding: 5px;
                        }

                            .channelName {
                                width: 90%;
                                padding-bottom: 5px;
                                font-size: large;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 90%;
                            }

                .teamChatBar {
                    width: 60%;
                    overflow-y: scroll;
                    display: flex;
                    flex-direction: column-reverse;
                }
                    .teamChatSelect {
                        width: 100%;
                    }

                        .teamChatInital {
                            width: 100%;
                            padding: 5px;
                            padding-top: 20px;
                        }

                            .teamChatName {
                                width: 90%;
                                padding-bottom: 5px;
                                font-size: large;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 90%;
                            }

                            .teamChatContent {
                                width: 90%;
                                padding-bottom: 5px;
                                max-width: 90%;
                            }

                        .teamReplySection {
                            width: 70%;
                            align-items
                        }

            /* Split page into 2 */
            /* Control the left side */
            .row {
                display: flex;
            }

            .splitleft {
                max-width: 33.3%;
            }

            .splitright {
                max-width: 66.6%;
            }

            /*
             * TEAMS
            */

            .teamSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .teamEntryBox {
                display: flex;
                padding-bottom: 5px;
                padding-top: 5px;
            }

            .teamEntryData {
                flex: 100%;
            }

                .teamEntryData .subject {
                    padding: 0;
                    padding-right: 10px;
                    margin-bottom: 0;
                    font-size: large;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 300px;
                }

            /*
             * CALENDAR
            */

            .calSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .calEntryBox {
                display: flex;
                justify-content: space-between;
                padding-top: 50px;
            }

            .calEntryData .subject {
                padding: 0;
                margin-bottom: 0;
                font-size: large;
            }

            .calEntryData .organizer {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calEntryData .content {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calDateTime {
                justify-content: space-between;
            }

            .calDateTime .begin {
                padding: 0;
                font-size: small;
                margin-bottom: 0;
                margin-top: 27px;
            }

            .calDateTime .fin {
                padding: 0;
                font-size: small;
            }
        </style>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>
</div>
@code {
    [Parameter]
    public string ids{ get; set; } 

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;

    private string? dateTimeFormat;
    private string? oldData;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        await getMail("All");
        await getTeams("All");
        //await getChats("All");
        await getCal();
    }

    //Updating every 10s. Need to actually re-request though.
    private static System.Timers.Timer _timer;
    private int counter = 60;

    protected override void OnInitialized()
    {
        StartTimer();
    }

    public void StartTimer()
    {
        _timer = new System.Timers.Timer(10000);
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            _timer.Enabled = false;
        }

        StateHasChanged();
    }

    /*
    * GET MAIL EVENTS
    */

    /* MAIL LIST */
    private IList<Message> myMessages = new List<Message>();

    /* ASYNCHRONOUSLY GET MAIL */
    public async Task getMail(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", "outlook.body-content-type='text'");
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");

                if (addresses != "All") { config.QueryParameters.Filter = "(from/emailAddress/address) eq '" + addresses; }

                config.QueryParameters.Select = new string[] { "subject", "sender", "body" };
                //config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });
        /*
        * Set to non-async variable. Can then be accessed in html.
        */
        myMessages = mailPage?.Value ?? new List<Message>();
    }

    public async Task deleteMail(Message email)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        await graphClient.Me.Messages[email.Id].DeleteAsync();
    }

    /*
    * GET TEAM EVENTS
    */

    /* TEAMS LIST */
    private IList<Team> myTeams = new List<Team>();

    /* ASYNCHRONOUSLY GET TEAMS */
    public async Task getTeams(string addresses)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var teamPage = await graphClient.Me.JoinedTeams.GetAsync();
        myTeams = teamPage?.Value ?? new List<Team>();
    }

    /*
    * GET CHANNEL EVENTS
    */

    /* CHANNEL LIST */
    private IList<Channel> myChannels = new List<Channel>();

    /* ASYNCHRONOUSLY GET CHANNELS */
    public async Task getChannels()
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var channelPage = await graphClient.Teams[currentTeam.Id].Channels.GetAsync();
        myChannels = channelPage?.Value ?? new List<Channel>();
    }

    /*
    * GET ALL CHANNEL CHATS
    */
    public class messageBlock
    {
        public ChatMessage? mainMessage { get; set; }
        public IList<ChatMessage>? replies { get; set; }
    }

    private IList<messageBlock> fullPage = new List<messageBlock>();
    private IList<ChatMessage> myConvos = new List<ChatMessage>();
    private IList<ChatMessage> myReplies = new List<ChatMessage>();

    public async void displayChannelData(Channel thisChannel)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var fullPageLocal = new List<messageBlock>();

        if (currentChannel != null)
        {
            var convoPageTest = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages.GetAsync();
            myConvos = convoPageTest?.Value ?? new List<ChatMessage>();

            foreach (var conversation in myConvos)
            {
                var replyPageTest = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages[conversation.Id].Replies.GetAsync();
                myReplies = replyPageTest?.Value ?? new List<ChatMessage>();

                fullPageLocal.Add(new messageBlock { mainMessage = conversation, replies = myReplies });
            }
        }

        fullPageLocal.Reverse();
        fullPage = fullPageLocal;
        StateHasChanged();
    }

    /*
    * GET PERSONAL CHATS
    */

    /* CHAT LIST */
    private IList<Chat> myChats = new List<Chat>();

    /* ASYNCHRONOUSLY GET CHATS */
    //public async Task getChats(string addresses)
    //{
    //    graphClient = clientFactory.GetAuthenticatedClient();
    //    var chatPage = await graphClient.Me.Chats.GetAsync();
    //    myChats = chatPage?.Value ?? new List<Chat>();
    //}

    /*
    * GET PERSONAL CHAT REPLIES
    */


    /*
    * GET CALENDAR EVENTS
    */

    /* EVENTS LIST */
    private IList<Event> myEvents = new List<Event>();

    /* ASYNCHRONOUSLY GET EVENTs */
    public async Task getCal()
    {
        // Get the user
        //var user = (await authenticationStateTask).User;
        //var graphTimeZone = user.GetUserGraphTimeZone();
        //dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        //var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        //var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        /*
        * GET ALL CALENDAR EVENTS
        */
        /*var eventPage = await graphClient.Me
            .CalendarView
            .GetAsync(config =>
            {
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                //config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
                //config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
                config.QueryParameters.Top = 50;
                config.QueryParameters.Select = new[] { "subject", "organizer", "start", "end" };
                config.QueryParameters.Orderby = new[] { "start/dateTime" };
            });*/

        var eventPage = await graphClient.Me.Calendar.Events.GetAsync();
        /*
        * Set to non-async variable. Can then be accessed in html.
        */

        myEvents = eventPage?.Value ?? new List<Event>();
    }

    /*
    * NEW GROUP ADDED - UPDATE ASYNC
    */

    async void UpdateGroup(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();
            if (searchTerm == "all") { await getMail("All"); StateHasChanged(); }
            else
            {
                string mailQuery = searchTerm.Split(';')[0] + "'";
                string teamQuery = searchTerm.Split(';')[1] + "'";
                string calQuery = searchTerm.Split(';')[2] + "'";
                await getMail(mailQuery);
                StateHasChanged();
            }
        }
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }

    /*
    * HANDLE WHICH TAB IS BEING PRESENTED
    */
    string? activeid = "Mail";
    FluentTab? changedto;
    private void HandleOnTabChange(FluentTab tab) { changedto = tab; }

    /*
    * SHOW THE DETAILS OF THE CURRENT ITEM
    */
    private Message currentEmail { get; set; } = null;
    private void ToggleMail(Message email) { currentEmail = (currentEmail == email) ? null : email; }

    private Team currentTeam { get; set; } = null;
    private async void ToggleTeam(Team teamsChat) { currentTeam = (currentTeam == teamsChat) ? null : teamsChat; await getChannels(); StateHasChanged(); }

    private Channel currentChannel { get; set; } = null;
    private async void ToggleChannel(Channel channelChat) { currentChannel = (currentChannel == channelChat) ? null : channelChat; StateHasChanged(); }

    private Chat currentChat { get; set; } = null;
    private void ToggleChat(Chat chat) { currentChat = (currentChat == chat) ? null : chat; }

    /*
    * ALL INPUT BOXES TO CREATE GROUPS
    * GETTING DATA FROM GRAPH TO FILL SEARCH BOXES
    */
    FluentSearch? mailSearchTest;
    FluentSearch? teamSearchTest;
    FluentSearch? calSearchTest;
    string? mailListValue = string.Empty;
    string? teamNameValue = string.Empty;
    string? calendarValue = string.Empty;

    List<string> searchData = new()
    {
        "ajp20@7qp7mb.onmicrosoft.com",
        "Brendon",
        "Charmaine",
        "Indraneel",
        "Konstantinos",
        "Mahanoor"
    };

    List<string> mailResults = defaultResults();
    List<string> teamResults = defaultResults();
    List<string> calResults = defaultResults();
    static string defaultResultsText = "no results";

    static List<string> defaultResults()
    {
        return new() { defaultResultsText };
    }

    void handleMailSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { mailResults = temp; }
            }
        }
        else
        {
            mailResults = defaultResults();
            mailListValue = string.Empty;
        }
    }

    void handleTeamSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { teamResults = temp; }
            }
        }
        else
        {
            teamResults = defaultResults();
            teamNameValue = string.Empty;
        }
    }

    void handleCalSearchInput(ChangeEventArgs args)
    {
        if (args is not null && !string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            string searchTerm = args.Value.ToString()!.ToLower();

            if (searchTerm.Length > 0)
            {
                List<string> temp = searchData.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
                if (temp.Count() > 0) { calResults = temp; }
            }
        }
        else
        {
            calResults = defaultResults();
            calendarValue = string.Empty;
        }
    }

    /*
    * CREATE LOCAL CLASS TO STORE GROUPS.
    * ALSO SEND TO API MONGO DB
    */
    public class GroupItem
    {
        public string? Name { get; set; }
        public string? mailName { get; set; }
        public string? teamName { get; set; }
        public string? calName { get; set; }
    }

    string? placename { get; set; } = string.Empty;
    string? selectedGroupValue;
    private List<GroupItem> myGroups = new();

    void addToGroup(string m, string t, string c)
    {
        if (!string.IsNullOrWhiteSpace(placename) && !string.IsNullOrWhiteSpace(m) && !string.IsNullOrWhiteSpace(t) && !string.IsNullOrWhiteSpace(c))
        {
            myGroups.Add(new GroupItem { Name = placename, mailName = m, teamName = t, calName = c });
        }
    }

    /*
    * REPLY TO EMAILS
    */
    string? emailContent;
    private bool emailReply { get; set; } = false;
    private void replyToEmail(bool change) { emailReply = change; }

    public async void sendEmail(string mainAddress, List<Recipient> recipients, string subject, string content)
    {
        graphClient = clientFactory.GetAuthenticatedClient();

        if (recipients == null) { recipients = new List<Recipient> { new Recipient { EmailAddress = new EmailAddress { Address = mainAddress, }, }, }; }
        else
        {
            var mainAddressSend = new Recipient { EmailAddress = new EmailAddress { Address = mainAddress, }, };
            recipients.Add(mainAddressSend);
        }

        var requestBody = new Microsoft.Graph.Me.SendMail.SendMailPostRequestBody
            {
                Message = new Message
                {
                    Subject = subject,
                    Body = new ItemBody
                    {
                        ContentType = BodyType.Text,
                        Content = content,
                    },
                    ToRecipients = recipients,
                },
            };

        await graphClient.Me.SendMail.PostAsync(requestBody);
        StateHasChanged();

        emailContent = String.Empty;
        emailReply = false;
    }

    /*
    * Create new channel message
    */
    string? newChannelMessageContent;
    private bool newChannelMessageBool { get; set; } = false;
    private void sendChannelMessage(bool change) { newChannelMessageBool = change; }

    public async void newChannelMessage(string content)
    {
        graphClient = clientFactory.GetAuthenticatedClient();
        var requestBody = new ChatMessage
            {
                Body = new ItemBody
                {
                    Content = content,
                },
            };
        var result = await graphClient.Teams[currentTeam.Id].Channels[currentChannel.Id].Messages.PostAsync(requestBody);

        StateHasChanged();
        newChannelMessageContent = String.Empty;
        newChannelMessageBool = false;

    }


    //public class myTeamClass
    //{
    //    public Team? myTeam { get; set; }
    //    public IList<myChannelClass>? allChannels { get; set; }
    //}

    //public class myChannelClass
    //{
    //    public Channel? myChannel { get; set; }
    //    public IList<myConvosClass>? allConvos { get; set; }
    //}

    //public class myConvosClass
    //{
    //    public ChatMessage myConvos { get; set; }
    //    public IList<ChatMessage>? allReplies { get; set; }
    //}

    //private IList<myTeamClass> allMyTeams = new List<myTeamClass>();

    //public async Task getAllTeamsContent()
    //{
    //    graphClient = clientFactory.GetAuthenticatedClient();

    //    var teamPage = await graphClient.Me.JoinedTeams.GetAsync();
    //    var myTeamPage = teamPage?.Value ?? new List<Team>();

    //    List<myTeamClass>? localTeams = new List<myTeamClass>();

    //    foreach (var team in myTeamPage)
    //    {
    //        List<myChannelClass>? localChannels = new List<myChannelClass>();

    //        var channelPage = await graphClient.Teams[team.Id].Channels.GetAsync();
    //        var myChannelsPage = channelPage?.Value ?? new List<Channel>();

    //        foreach (var channel in myChannelsPage)
    //        {
    //            List<myConvosClass>? localConvos = new List<myConvosClass>();

    //            var convoPage = await graphClient.Teams[team.Id].Channels[channel.Id].Messages.GetAsync();
    //            var myConvosPage = convoPage?.Value ?? new List<ChatMessage>();

    //            foreach (var convo in myConvosPage)
    //            {
    //                var replyPage = await graphClient.Teams[team.Id].Channels[channel.Id].Messages[convo.Id].Replies.GetAsync();
    //                var myRepliesPage = replyPage?.Value ?? new List<ChatMessage>();

    //                Console.WriteLine("in here????");

    //                localConvos.Add(new myConvosClass { myConvos = convo, allReplies = myRepliesPage } );
    //            }
    //            localChannels.Add(new myChannelClass { myChannel = channel, allConvos = localConvos } );
    //        }
    //        localTeams.Add(new myTeamClass { myTeam = team, allChannels = localChannels });
    //    }
    //    allMyTeams = localTeams;
    //}
}