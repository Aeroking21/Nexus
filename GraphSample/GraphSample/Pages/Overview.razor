<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/overview"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Fast.Components.FluentUI

@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <link href="{PROJECT_NAME}.styles.css" rel="stylesheet" />
        <link href="_content/Microsoft.Fast.Components.FluentUI/css/reboot.css" rel="stylesheet" />
        
        <h1 class="mb-3">Overview</h1>

        <FluentTabs ActiveId="@activeid" OnTabChange="HandleOnTabChange">
            <FluentTab Text="Mail" />
            <FluentTab Text="Teams" />
            <FluentTab Text="Calendar" />

            @* OUTLOOK TAB *@
            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="emailSec">
                            @foreach (var mail in allMessages)
                            {
                                <FluentCard @onclick="() => Toggle(mail)">
                                    <div class="emailEntryBox">
                                        <div class="emailEntryData">
                                            <p class="subject">@mail?.Subject</p>
                                            <p class="sender">@mail?.Sender.EmailAddress.Name</p>
                                            <p class="content">@mail?.Body?.Content</p>
                                        </div>

                                        <div class="emailDateTime">3:30PM</div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">
                        <div class="majorContent" hidden="@hideFullContent">
                            <div class="heading">@currentEmail?.Subject</div>
                            <div class="email">
                                <div class="send">
                                    @currentEmail?.Sender.EmailAddress.Name
                                </div>

                                <div class="sendee">
                                    hi
                                </div>

                                <div class="emailContent">
                                    hello @currentEmail?.Body?.Content
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </FluentTabPanel>

            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="calSec">
                            @foreach (var calendarEvent in events)
                            {
                                <FluentCard>
                                    <div class="calEntryBox">
                                        <div class="calEntryData">
                                            <p class="subject">@calendarEvent?.Subject</p>
                                            <p class="organizer">@calendarEvent?.Organizer?.EmailAddress?.Name</p>
                                            <p class="content">Content</p>
                                        </div>

                                        <div class="calDateTime">
                                            <p class="begin">@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</p>
                                            <p class="fin">@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</p>
                                        </div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">
                        hi
                    </div>
                </div>
            </FluentTabPanel>

            <FluentTabPanel>
                <div class="row">
                    <div class="splitleft">
                        <div class="calSec">
                            @foreach (var teamsChat in chats)
                            {
                                <FluentCard>
                                    <div class="calEntryBox">
                                        <div class="calEntryData">
                                            <p class="subject">@teamsChat?</p>
                                        </div>
                                    </div>
                                </FluentCard>
                            }
                        </div>
                    </div>

                    <div class="splitright">

                    </div>
                </div>

            </FluentTabPanel>
        </FluentTabs>

        <style>
            /* Split page into 2 */
            /* Control the left side */
            .row {
                display: flex;
            }

            .splitleft {
                flex: 33.33%;
            }

            .splitright {
                flex: 66.66%;
            }

            /*
             * EMAILS
            */

            .emailSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .emailEntryBox {
                display: flex;
                padding-bottom: 5px;
                padding-top: 5px;
            }

            .emailEntryData {
                flex: 80%;
            }

                .emailEntryData .subject {
                    padding: 0;
                    padding-right: 10px;
                    margin-bottom: 0;
                    font-size: large;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 300px;
                }

                .emailEntryData .sender {
                    padding: 0;
                    margin-bottom: 0;
                    font-size: small;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 300px;
                }

                .emailEntryData .content {
                    padding: 0;
                    margin-bottom: 0;
                    font-size: small;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 200px;
                }

            .emailDateTime {
                padding: 0;
                flex: 15%;
                font-size: small;
            }

            .heading {
                white-space: nowrap;
                overflow-wrap: break-all;
            }

            .send {
                overflow-wrap: break-all;
            }

            .sendee {
                overflow-wrap: break-all;
            }

            .emailContent {
                overflow-wrap: break-all;
            }

            /*
             * CALENDAR
            */

            .calSec {
                max-height: 78vh;
                overflow-y: scroll;
            }

            .calEntryBox {
                display: flex;
                justify-content: space-between;
                padding-top: 50px;
            }

            .calEntryData .subject {
                padding: 0;
                margin-bottom: 0;
                font-size: large;
            }

            .calEntryData .organizer {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calEntryData .content {
                padding: 0;
                margin-bottom: 0;
                font-size: small;
            }

            .calDateTime {
                justify-content: space-between;
            }

                .calDateTime .begin {
                    padding: 0;
                    font-size: small;
                    margin-bottom: 0;
                    margin-top: 27px;
                }

                .calDateTime .fin {
                    padding: 0;
                    font-size: small;
                }
        </style>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IList<Event> events = new List<Event>();
    private IList<Message> allMessages = new List<Message>();
    private IList<Chat> chats = new List<Chat>();

    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        var eventPage = await graphClient.Me
            .CalendarView
            .GetAsync(config =>
            {
                // Send user time zone in request so date/time in
                // response will be in preferred time zone
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                // Specifies the start and end of the view on the calendar
                // Translates to: ?startDateTime=""&endDateTime=""
                config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
                config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
                // Get max 50 per request
                config.QueryParameters.Top = 50;
                // Only return fields app will use
                config.QueryParameters.Select = new[] { "subject", "organizer", "start", "end" };
                // Order results chronologically
                config.QueryParameters.Orderby = new[] { "start/dateTime" };
            });

        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", "outlook.body-content-type='text'");
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                config.QueryParameters.Select = new string[] { "subject", "sender", "body" };
                config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });

        var chatPage = await graphClient.Me
            .Chats
            .GetAsync(config =>
            {
                config.QueryParameters.Top = 50;
                //config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                //config.QueryParameters.Select = new string[] { "subject", "sender"};
                //config.QueryParameters.Orderby = new string[] { "receivedDateTime" };

            });

        chats = chatPage?.Value ?? new List<Chat>();
        allMessages = mailPage?.Value ?? new List<Message>();
        events = eventPage?.Value ?? new List<Event>();
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }

    // Handling tabs
    string? activeid = "Mail";
    FluentTab? changedto;
    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }

    // Hide or reveal content
    private bool hideFullContent { get; set; } = false;
    private Message currentEmail { get; set; } = null;

    //private void Toggle()
    //{
    //    hideFullContent = !hideFullContent;
    //}

    private void Toggle(Message email)
    {
        currentEmail = email;
        Console.WriteLine("helloo? This is a toggle");
    }
}