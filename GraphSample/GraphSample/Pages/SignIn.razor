@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Graph

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

@using System.Security.Authentication
@using Microsoft.Graph.Models
@using TimeZoneConverter
@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.Fast.Components.FluentUI

<style>
.log-in-screen {
    justify-content: center;
    align-items: center;
    align-self: center;
    text-align: center;
    left: 21%;
    position: absolute;
    width: 60%;
    font-size: large;
}

.card-body {
    background: -webkit-linear-gradient(#005C97, #363795);
    border-radius: 1rem;
    padding: 2rem;
}

.log-in-screen h2 {
    font-size: 2rem;
    color: white !important;
}

.log-in-screen p {
    font-size: 1.5rem;
    color: white !important;
}

.log-in-screen a {
    color: white;
    font-size: 1.5rem;
    border-radius: 1rem;
    border: 1px solid white;
}

.log-in-screen a:hover {
    border: 1px solid white;
    background-color: #00AEEF;
    color: white;
}

/* Responsive Adjustments */
@@media (max-width: 768px) {
    .log-in-screen {
        width: 90%;
    }

    .log-in-screen h2 {
        font-size: 1.5rem;
    }

    .log-in-screen p {
        font-size: 1.2rem;
    }
}

@@media (max-width: 576px) {
    .log-in-screen {
        width: 100%;
        left: 0;
        padding: 0 10px;
    }

    .log-in-screen h2 {
        font-size: 1.2rem;
    }

    .log-in-screen p {
        font-size: 1rem;
    }
}

.btn-outline-danger:hover {
  background-color: rgb(105, 205, 239);
  color: rgb(0, 0, 0);
}

</style>

<link rel="stylesheet" href="https://unpkg.com/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" />
<div class="log-in-screen">
<section class="p-3 p-md-4 p-xl-5 w-100 p-3">
  <div class="container-fluid">
    <div class="row justify-content-center">
      <div class="col-12 col-md-9 col-lg-7 col-xl-6 col-xxl-5">
        <div class="card border border-light-subtle rounded-4">
          <div class="card-body p-3 p-md-4 p-xl-5">
            <div class="row">
              <div class="col-12">
                <div class="mb-5">
                  <div class="text-center mb-4">
                     <img src="img/nexus.png" width="150" height="70" style="filter: brightness(0) invert(1);"/>
                  </div>
                  <h2 class="text-center">Sign in to see your dashboard</h2>
                  <p class="mt-5 mb-5"> Sign in with your work or school account</p>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <div class="log-in-button d-flex gap-2 gap-sm-3 justify-content-center">
                <a href="authentication/login" class="btn btn-lg btn-outline-danger p-3 lh-1">
                    Log in
                </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

</div>


@code{

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;
    [Inject]
    protected IAccessTokenProvider AccessTokenProvider { get; set; }
    protected string? AccessToken { get; private set; }
    public int count = 0;
    public System.Security.Claims.ClaimsPrincipal user { get; set; }

    [JSInvokable]
    private async Task<String> GetAccessToken()
    {
        return this.AccessToken;
    }

    bool isTeams = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            var teams = queryParams.TryGetValue("teams", out var teamsValue) ? teamsValue.ToString() : null;
            
            var tokenResult = await AccessTokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var accessToken))
            {
                AccessToken = accessToken.Value;
                count += 1;
            }
            if (authenticationStateTask == null)
            {
                throw new AuthenticationException(
                "Unable to access authentication state");
            }
            user = (await authenticationStateTask).User;
            graphClient = clientFactory.GetAuthenticatedClient();

            if (!string.IsNullOrEmpty(teams))
            {
                // The "teams" query parameter is present, indicating that the app is running within Microsoft Teams
                isTeams = true;
                await JSRuntime.InvokeVoidAsync("TeamsLogin");
            }
            else
            {
                isTeams = false;
                await JSRuntime.InvokeVoidAsync("mgtInterop.configureProvider", AccessToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            isTeams = false; 
            var tokenResult = await AccessTokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var accessToken))
            {
                AccessToken = accessToken.Value;
                count += 1;
            }
            if (authenticationStateTask == null)
            {
                throw new AuthenticationException(
                "Unable to access authentication state");
            }
            user = (await authenticationStateTask).User;
            graphClient = clientFactory.GetAuthenticatedClient();
            await JSRuntime.InvokeVoidAsync("mgtInterop.configureProvider", AccessToken);
        }
        StateHasChanged();
    }
}
