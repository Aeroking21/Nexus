@page "/"
@inject IJSRuntime JsRuntime
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using Microsoft.Fast.Components.FluentUI


@inject IJSRuntime JSRuntime

<link rel="stylesheet"
    href="https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css" />

<AuthorizeView>
    <Authorized>
        
        @* Get time to greet users *@
        @if (DateTime.UtcNow.Hour >= 6 && DateTime.UtcNow.Hour < 11)
        {
            var name = context?.User?.Identity?.Name;
            if (context?.User?.Identity?.Name.Length > 1)
            {
                name = context?.User?.Identity?.Name.Split(" ")[0];
            }
            <div class="welcome"> Good Morning, @name </div>
        }
        else if (DateTime.UtcNow.Hour >= 11 && DateTime.UtcNow.Hour < 18)
        {
            var name = context?.User?.Identity?.Name;
            if (context?.User?.Identity?.Name.Length > 1)
            {
                name = context?.User?.Identity?.Name.Split(" ")[0];
            }
            <div class="welcome"> Good Afternoon, @name </div>
        }
        else
        {
            var name = context?.User?.Identity?.Name;
            if (context?.User?.Identity?.Name.Length > 1)
            {
                name = context?.User?.Identity?.Name.Split(" ")[0];
            }
            <div class="welcome"> Good Evening, @name </div>
        }

        <div class="grid-container">
            <div class="grid-item">
                <h4 style="color: #0078d4">To Do</h4>
                <div class="glass-container">
                    <mgt-todo></mgt-todo>
                </div>
            </div>
            <div class="grid-item">
                <h4 style="color: #0078d4;">What have you missed?</h4>
                @foreach (var mail in allMessages)
                {
                    @if (mail.IsRead == false)
                    {
                        string mailId = mail.Id;
                        string url = "overview/mailid=" + mailId;
                        <a href=@url>
                            @* !!!!! link to the !!!!!*@
                            <div class="email" href="https://localhost:7067/overview/menu"> 
                                @if (mail.Subject.Length != 0)
                                {
                                    <h3>@mail.Subject</h3>
                                }
                                else
                                {
                                    <h3>(No Subject)</h3>
                                }

                                <h4>
                                    From: @mail.Sender.EmailAddress.Name
                                </h4>
                                <div class="preview">
                                    @mail.BodyPreview
                                </div>
                            </div>
                        </a>
                    }
                }
            </div>
            <div class="grid-item" href="https://localhost:7067/calendar">
                <h4 style="color: #0078d4;">Today</h4>
                <mgt-agenda></mgt-agenda>
            </div>
            <div class="grid-item" href="https://localhost:7067/overview/menu">
                <h4 style="color:#0078d4;">Teams</h4>
                <mgt-get resource="/me/joinedTeams" scopes="TeamSettings.ReadWrite.All,Directory.ReadWrite.All">
                    <template>
                        <div class="grid-container-v2">
                            <div data-for="team in value">
                                <div class="team-circle">
                                    <a href="overview/teamid={{team.id}}">
                                        <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/teams_32x1.svg"
                                             width="32"
                                             height="32"
                                             alt="Teams" />
                                        <h5>{{ team.displayName }}</h5>
                                    </a>
                                </div>
                            </div>
                        </div>

                    </template>
                </mgt-get>
            </div>
        </div>
        <div class="chat-bot">
            <Chat />
        </div>

        <br />

    </Authorized>
    <NotAuthorized>
        <SignIn />
    </NotAuthorized>

</AuthorizeView>



@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;
    private string? dateTimeFormat;
    private IList<TodoTaskList> toDos = new List<TodoTaskList>();
    Dictionary<string, TodoTaskCollectionResponse> TaskLists = new Dictionary<string, TodoTaskCollectionResponse>();
    private IList<Message> allMessages = new List<Message>();
    private IList<Event> events = new List<Event>();
    private IList<Team> teams = new List<Team>();
    private string status = string.Empty;
    private string userTimeZone = string.Empty;
    private string subject = string.Empty;
    private string attendees = string.Empty;
    private DateTime start = new DateTime(DateTime.Today.Ticks);
    private DateTime end = new DateTime(DateTime.Today.Ticks);
    private string body = string.Empty;

    [Inject]
    protected IAccessTokenProvider AccessTokenProvider { get; set; }
    protected string? AccessToken { get; private set; }
    public int count = 0;
    public System.Security.Claims.ClaimsPrincipal user { get; set; }

    [JSInvokable]
    private async Task<String> GetAccessToken()
    {
        return this.AccessToken;
    }

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            AccessToken = accessToken.Value;
            count += 1;
        }
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
            "Unable to access authentication state");
        }
        user = (await authenticationStateTask).User;
        graphClient = clientFactory.GetAuthenticatedClient();
        await JSRuntime.InvokeVoidAsync("mgtInterop.configureProvider", AccessToken);
        await RerunEmail();
        await BeginTeams();
    }

    public async Task BeginEmail()
    {
        // Get the user emails
        if (count > 0)
        {
            var graphTimeZone = user.GetUserGraphTimeZone();
            Console.WriteLine("graphTimeZone");
            Console.WriteLine(graphTimeZone);
            dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

            //Get mail from inbox
            var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                config.QueryParameters.Select = new string[] { "subject", "sender", "bodyPreview", "receivedDateTime", "isRead" };
                config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });

            allMessages = mailPage?.Value ?? new List<Message>();
        }
    }

    public async Task RerunEmail()
    {
        while (true)
        {
            await BeginEmail();

            StateHasChanged();
            
            // Wait 30 seconds before running again
            await Task.Delay(TimeSpan.FromSeconds(30));
        }

    }

    public async Task BeginTeams()
    {
        if (count > 0)
        {
            var teamsPage = await graphClient.Me.JoinedTeams
            .GetAsync();

            teams = teamsPage.Value;
        }
    }

    
}