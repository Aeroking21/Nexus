<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop


@inject IJSRuntime JSRuntime

<style>
    .item {
        color: #000000;
        background: #2a9cb6;
    }

    .tile {
        width: 50px;
        height: 30px;
        margin: 1%;
        padding: 3%
    }

    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto;
        padding: 10px;
        gap: 15px;
        height: 600px;
    }

    .grid-item {
        background-color: #98c5ff;
        border: 1px solid rgba(190, 190, 190, 0.8);
        box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);
        padding: 5px;
        font-size: 30px;
        text-align: center;
        border-radius: 10px;
        color: rgba(0, 0, 0, 0.8);
        font-size: 1.1rem;
    }

    .lists {
        border: 1px solid rgba(190, 190, 190, 0.8);
        background-color: #ffffff5a;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 2%;
    }

    .tasks{
        display: flex;
        justify-content: space-between;
    }

    .left-content {
        float: left;
    }

    .left-contentC {
        float: left;
        text-decoration: line-through;
    }

    .right-content {
        float: right;
    }

    .default-button{
        background-color: #ffffffad;
        border: 1px solid rgba(190, 190, 190, 0.8);
        border-radius: 10px;
        padding: 5px;
        margin: 5px;
    }

    .default-button:hover{
        background-color: #ffffffad;
        border: 1px solid rgba(190, 190, 190, 0.8);
        border-radius: 10px;
        padding: 5px;
        margin: 5px;
        box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);
    }


    .default-button-clicked{
        background-color: rgb(64, 165, 216);
        border: 1px solid rgba(190, 190, 190, 0.8);
        border-radius: 10px;
        padding: 5px;
        margin: 5px;
    }

    .clicked-button:hover{
        background-color: rgb(64, 165, 216);
        border: 1px solid rgba(190, 190, 190, 0.8);
        border-radius: 10px;
        padding: 5px;
        margin: 5px;
        box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);
    }

</style>


<div class="p-5 mb-4 bg-light rounded-3">
    <div class="container-fluid py-5">
        <AuthorizeView>
            <Authorized>
                <h4>Welcome @context?.User?.Identity?.Name!</h4>
                <h1>Dashboard</h1>
                <div class="grid-container">
                    <div class="grid-item">
                        To Do:
                        @if (TaskLists.Count != 0)
                        {
                            @foreach (var key in TaskLists.Keys)
                            {
                                @if (TaskLists[key].Value?.Count != 0){
                                    <div class="lists">
                                        <h4>@key.Split("|")[0]</h4>
                                        <hr>
                                        @foreach (var item in TaskLists[key].Value)
                                        {
                                            string ListId = @key.Split("|")[1];
                                            string TaskId = @item.Id;
                                            bool isClicked = false;
                                            string buttonClass = "";

                                            void ClickedButton()
                                            {
                                                isClicked = true;
                                                buttonClass = "-clicked";
                                                Console.WriteLine(buttonClass);
                                            }

                                            if (item.Status == Microsoft.Graph.Models.TaskStatus.Completed)
                                            {
                                                <div class="tasks">
                                                    <span class="left-contentC">@item.Title</span>
                                                    <span class="right-content">

                                                        <button class="default-button @buttonClass" @onclick="() => { UnDoTask(ListId,TaskId); ClickedButton(); }">Undo</button>
                                                        <button class="default-button @buttonClass" @onclick="() => { DeleteTask(ListId,TaskId); ClickedButton(); }">Delete</button>
                                                    </span>
                                                </div>
                                            }
                                            else if (item.Status == Microsoft.Graph.Models.TaskStatus.NotStarted){
                                                <div class="tasks">
                                                    <span class="left-content">@item.Title</span>
                                                    <span class="right-content">
                                                        @* <button class="default-button" @onclick="() => { CompleteTask(ListId, TaskId); ClickedButton(); }">Completed</button> *@

                                                        <button class="default-button @buttonClass" @onclick="() => { CompleteTask(ListId,TaskId); ClickedButton(); }">Completed</button>
                                                        <button class="default-button @buttonClass" @onclick="() => { DeleteTask(ListId,TaskId); ClickedButton(); }">Delete</button>
                                                    </span>
                                                </div>
                                            }
                                            
                                        }
                                    </div>
                                }
                                    
                            }
                        }
                        else
                        {
                            <p>No To Do's</p>
                        }
                        
                    </div>
                    <div class="grid-item">
                        Emails
                        <mgt-todo></mgt-todo>
                    </div>
                    <div class="grid-item">
                        Schedule
                       

                    </div>  
                    <div class="grid-item">4</div>
                    <div class="grid-item">5</div>
                </div>
            </Authorized>
            <NotAuthorized>
                <h4>Not authorized using Microsoft.AspNetCore.Components.WebAssembly.Authentication</h4>
                <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>


@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;

    private string? dateTimeFormat;

    private IList<TodoTaskList> toDos = new List<TodoTaskList>();
    
    private IList<TodoTaskCollectionResponse> toDoTasks = new List<TodoTaskCollectionResponse>();

    Dictionary<string, TodoTaskCollectionResponse> TaskLists = new Dictionary<string, TodoTaskCollectionResponse>();    
    //private TodoTaskCollectionResponse? resultTasks;
    
    private IList<CalendarCollectionResponse> cals = new List<CalendarCollectionResponse>();


    [Inject]
    protected IAccessTokenProvider AccessTokenProvider { get; set; }
    protected string? AccessToken { get; private set; }

    public int count = 0;

   

    protected override async Task OnInitializedAsync()
    {   
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            AccessToken = accessToken.Value;
            count += 1;
        }
        

        //await JSRuntime.InvokeVoidAsync("mgtInterop.configureProvider", accessToken);

        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }
        await BeginToDos();
        // Get the user
        //var user = (await authenticationStateTask).User;

        //var graphTimeZone = user.GetUserGraphTimeZone();
        //dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        //var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        //var endOfWeek = startOfWeek.AddDays(7);

    }

    public async Task BeginToDos()
    {   
        if(count > 0) {
            Console.WriteLine("Access  " + AccessToken);
            graphClient = clientFactory.GetAuthenticatedClient();

            var toDoList = await graphClient.Me.Todo.Lists.GetAsync(
                config=>{
                    config.QueryParameters.Top = 5;
                }
            );

            var calendarList = await graphClient.Me.Calendars.GetAsync();

            toDos = toDoList?.Value ?? new List<TodoTaskList>();

            //Console.WriteLine(calendarList.Value.Count);

            //cals = calendarList?.Value ?? new List<CalendarCollectionResponse>();

            foreach(var item in toDos)
            {
                //ids.Add(item.Id);
                var resultTasks = await graphClient.Me.Todo.Lists[item.Id].Tasks.GetAsync();
                var key = item.DisplayName + "|" + item.Id;
                TaskLists[key] = resultTasks;
                //toDoTasks.Add(resultTasks);
            }
        }
    }

    protected async Task ConfigureMgtProvider()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            AccessToken = accessToken.Value;
            await JSRuntime.InvokeVoidAsync("mgtInterop.configureProvider", AccessToken);
        }
    }

    public async Task CompleteTask(string ListId, string TaskId){
        graphClient = clientFactory.GetAuthenticatedClient();
        var requestBody = new TodoTask
        {
            Status = Microsoft.Graph.Models.TaskStatus.Completed
        };
        var result = await graphClient.Me.Todo.Lists[ListId].Tasks[TaskId].PatchAsync(requestBody);

        Console.WriteLine(result.Status);
       //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        
    }

    public async Task DeleteTask(string ListId, string TaskId){
        graphClient = clientFactory.GetAuthenticatedClient();
 
        await graphClient.Me.Todo.Lists[ListId].Tasks[TaskId].DeleteAsync();
       // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }

    public async Task UnDoTask(string ListId, string TaskId){
        graphClient = clientFactory.GetAuthenticatedClient();
        var requestBody = new TodoTask
        {
            Status = Microsoft.Graph.Models.TaskStatus.NotStarted
        };
        var result = await graphClient.Me.Todo.Lists[ListId].Tasks[TaskId].PatchAsync(requestBody);

        Console.WriteLine(result.Status);
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        
    }

    
}