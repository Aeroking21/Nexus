@page "/AiSummarize"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using System
@using System.Text.Json;
@using Microsoft.Fast.Components.FluentUI
@using System.IO;
@using System.Text;
@inject IJSRuntime JsRuntime
@inject GraphSample.Graph.GraphClientFactory clientFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop

@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    h3 {
        color: blue;
    }
</style>

<AuthorizeView>
    <Authorized>

        <h2> Component </h2>

        <div>
            <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=true @ondialogdismiss=OnDismiss>
                <mgt-file file-query="/me/drive/items/01DECBKURUIZ4ETBMWTZG3IGVXT26LR5SA"></mgt-file>

            </FluentDialog>
        </div>

        <FluentButton Appearance=Appearance.Accent @onclick="OnOpen">Open dialog</FluentButton>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    private FluentDialog? MyFluentDialog;
    public bool Modal = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    private async void OnOpen()
    {
        MyFluentDialog!.Show();
        await CallApiAsync();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }


    public class Author
    {
        public string Sender { get; }
        public string Title { get; }
        public string Url { get; }
        public string App { get; }

        public Author(string sender, string title, string webLink, string app)
        {
            Sender = sender;
            Title = title;
            Url = webLink;
            App = app;
        }
    }


    private GraphServiceClient? graphClient;
    private List<Author> data_response = new List<Author>();

    protected async Task CallApiAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();


        //var driveItemRequest = graphClient.Me.Drive.Items["01DECBKURCFKOWIKDGYVEY2XGAIQUW2ATR"].Content.Request();
        var driveItemContentRequest = await graphClient.Drives["b!RfF7rfoJs02VJ9un3I-ut-jp_QBFMOVBn3jNroSlMI_GNuGpps7GS7BmF01uUjKx"].Items["01DECBKURCFKOWIKDGYVEY2XGAIQUW2ATR"].Content.GetAsync();

        //ReadContentFromMemoryStream(driveItemContentRequest)
        //Console.WriteLine(ReadContentFromStream(driveItemContentRequest));

        //string mimeType = "<file-mime-type>";
        //string content = ConvertRawContentToText(driveItemContentRequest, mimeType);
        //Console.WriteLine(content);


        //try
        //{


        //    var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(driveId);
        //    // check for hits is 0 or not then it is empty
        //    if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
        //    {
        //        Console.WriteLine("Nothing found in Teams");
        //    }

        //    else
        //    {
        //        var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

        //        JsonElement fromMessage = (JsonElement)searchItems["from"];
        //        string teamName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();

        //        data_response.Add(new Author(teamName, user1.Value[0].HitsContainers[0].Hits[0].Summary, searchItems["webLink"].ToString(), "Teams"));
        //    }


        //}
        //catch (ServiceException ex)
        //{
        //    Console.WriteLine($"Get Teams failed");
        //}


    }

    public string ConvertRawContentToText(Stream stream, string mimeType)
    {
        // Determine the appropriate encoding based on the file's MIME type
        Encoding encoding = GetEncodingFromMimeType(mimeType);

        using (var reader = new StreamReader(stream, encoding))
        {
            string content = reader.ReadToEnd();
            return content;
        }
    }

    private Encoding GetEncodingFromMimeType(string mimeType)
    {
        // Map commonly used MIME types to corresponding encodings
        switch (mimeType)
        {
            case "text/plain":
                return Encoding.UTF8; // or the appropriate encoding for plain text files
            case "application/pdf":
                return Encoding.Default; // or the appropriate encoding for PDF files
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                return Encoding.UTF8; // or the appropriate encoding for Office documents
            default:
                return Encoding.Default; // or the default encoding for other file types
        }
    }

    public string ReadContentFromStream(Stream stream)
    {
        using (var reader = new StreamReader(stream))
        {
            string content = reader.ReadToEnd();
            return content;
        }
    }
}


