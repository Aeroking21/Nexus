@page "/AiSummarize"
@using System.Security.Authentication

@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    h3 {
        color: blue;
    }
</style>

<AuthorizeView>
    <Authorized>

        <h2> Component </h2>

        <div>
            <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=true @ondialogdismiss=OnDismiss>
                @foreach(var file in data_response)
                {
                    string npath = path + file.Id;
                    <mgt-file file-query="@npath" @onclick="() => test(npath)"></mgt-file>
                }
                                    
            </FluentDialog>
        </div>

        <FluentButton Appearance=Appearance.Accent @onclick="OnOpen">Open dialog</FluentButton>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    private FluentDialog? MyFluentDialog;
    public bool Modal = true;
    private GraphServiceClient? graphClient;
    private List<DriveItem> data_response = new List<DriveItem>();
    protected const string path = "/me/drive/items/";


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    private async void OnOpen()
    {
        MyFluentDialog!.Show();
        await CallApiAsync();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }

    protected async void test(string args)
    {
        Console.WriteLine("Clicked on: " + args);
        var stream2 = await graphClient.Drives[userDriveId].Items[pdfId].Content.GetAsync();
    }


    protected async Task CallApiAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();


        var driveItem = await graphClient.Me.Drive.GetAsync();
        var userDriveId = driveItem.Id;

        // List children in the drive
        var files = await graphClient.Drives[userDriveId].Items["root"].Children.GetAsync();

        data_response = files.Value;

        // The type of files is Microsoft.Graph.Models.DriveItem
    }

    // put this in for loop onClick() =>{}
    //var stream2 = await graphClient.Drives[userDriveId].Items[pdfId].Content.GetAsync();



    //using (var stream = stream2) // Replace with your own method to obtain the Stream
    //{
    //    using (var document = DocumentFormat.OpenXml.Packaging.WordprocessingDocument.Open(stream, false))
    //    {
    //        var body = document.MainDocumentPart.Document.Body;
    //        var text = body.InnerText;
    //        Console.WriteLine(text);

    //        //var paragraphs = body.Elements<DocumentFormat.OpenXml.Wordprocessing.Paragraph>();

    //        //foreach (var paragraph in paragraphs)
    //        //{
    //        //    Console.WriteLine(paragraph.InnerText);
    //        //}
    //    }
    //}





    //Console.WriteLine("hi");



}


