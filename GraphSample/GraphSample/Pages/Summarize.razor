@page "/AiSummarize"
@using System.Security.Authentication
@using System.IO;
@using GrapeCity.Documents.Pdf;
@using DocumentFormat.OpenXml.Packaging;
@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    h3 {
        color: blue;
    }

    .dropdown-content {
        max-height: 100%;
        overflow: scroll;
        max-width: 99%;
    }
</style>

<AuthorizeView>
    <Authorized>

        <h2> Component </h2>

        <div>
            <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Class="dropdown-content" Modal=true @ondialogdismiss=OnDismiss>
                <div class="dropdown-content">

                    @foreach (var file in data_response)
                    {
                        string npath = path + file.Id;
                        <mgt-file file-query="@npath" @onclick="() => GetContent(file.Id)"></mgt-file>
                    }

                </div>
         
            </FluentDialog>
        </div>

        <FluentButton Appearance=Appearance.Accent @onclick="OnOpen">Open dialog</FluentButton>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    private FluentDialog? MyFluentDialog;
    public bool Modal = true;
    private GraphServiceClient? graphClient;
    private List<DriveItem> data_response = new List<DriveItem>();
    protected const string path = "/me/drive/items/";
    protected string driveId = string.Empty;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        await listFiles();
    }

    private async void OnOpen()
    {
        MyFluentDialog!.Show();
        await listFiles();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }

    // apply error handling 
    protected async void GetContent(string args)
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();

        Console.WriteLine("Clicked on: " + args);

        var contentStream = await graphClient.Drives[driveId].Items[args].Content.GetAsync();

        var textResponse = ExtractTextFromStream(contentStream);


    }

    // Maybe return tuple instead
    protected string ExtractTextFromStream(Stream input)
    {
        string text = "";

        if (IsPDF(input))
        {
            text = ExtractTextFromPDF(input);
        }
        else if (IsWordDocument(input))
        {
            text = ExtractTextFromWord(input);
        }
        else if (IsPowerPointDocument(input))
        {
            text = ExtractTextFromPowerPoint(input);
        }

        return text;
    }

    private bool IsPDF(Stream stream)
    {
        try
        {
            var document = new GcPdfDocument();
            document.Load(stream);
            return true;
        }
        catch
        {
            return false;
        }
    }

    public string ExtractTextFromPDF(Stream stream)
    {

        var document = new GcPdfDocument();
        document.Load(stream);
        var text = document.GetText();

        return text;
    }

    private bool IsWordDocument(Stream stream)
    {
        try
        {
            using (var document = WordprocessingDocument.Open(stream, false))
            {
                return true;
            }
        }
        catch
        {
            return false;
        }
    }

    private string ExtractTextFromWord(Stream stream)
    {
        var text = "";

        using (var document = WordprocessingDocument.Open(stream, false))
        {
            var body = document.MainDocumentPart.Document.Body;
            text = body.InnerText;
        }

        return text;
    }

    private bool IsPowerPointDocument(Stream stream)
    {
        try
        {
            using (var presentation = PresentationDocument.Open(stream, false))
            {
                return true;
            }
        }
        catch
        {
            return false;
        }
    }

    private string ExtractTextFromPowerPoint(Stream stream)
    {
        var text = "";

        using (var presentation = PresentationDocument.Open(stream, false))
        {
            var slideText = "";

            foreach (var slidePart in presentation.PresentationPart.SlideParts)
            {
                var slide = slidePart.Slide;
                var paragraphs = slide.Descendants<DocumentFormat.OpenXml.Drawing.Paragraph>();

                foreach (var paragraph in paragraphs)
                {
                    slideText += paragraph.InnerText + " ";
                }
            }

            text = slideText.Trim();
        }

        return text;
    }


    protected async Task listFiles()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();


        var driveItem = await graphClient.Me.Drive.GetAsync();
        driveId = driveItem.Id;

        // List children in the drive
        var files = await graphClient.Drives[driveId].Items["root"].Children.GetAsync();
        Console.WriteLine("Getting files...");
        data_response = files.Value;

        // The type of files is Microsoft.Graph.Models.DriveItem
    }


    //Console.WriteLine("hi");



}


