@page "/chat"

@using System.Security.Authentication
@using System.Text
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Extensions.Logging
@using GrapeCity.Documents.Pdf
@using Azure
@using Azure.AI.OpenAI
@using static System.Environment
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
   
    .send-message-bar {
        background-color: #fff;
        padding: 10px;
        height: auto;
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }


    .outer {
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: stretch;
        max-width:99%;
        max-height: 100%;
        min-height:99%;
        min-width:100%;
    }

    .chatbox {
        display: flex;
        flex-direction: column;
        max-height: 80%;
        min-width:99%;
        overflow-y: scroll;
    }

    .right-bubble {
        background-color: #DCF8C6;
        color: black;
        align-self: flex-end;
        padding: 10px;
        margin: 5px;
        border-radius: 10px;
    }

    .left-bubble {
        background-color: #F2F2F2;
        color: black;
        align-self: flex-start;
        padding: 10px;
        margin: 5px;
        border-radius: 10px;
    }

    .typing {
        font-style: italic;
        color: gray;
    }

    .enter {
        border: 2px solid #5B8899;
        border-radius: 0.25rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .enter:hover {
        background-color: #57D657;

    }
</style>


<AuthorizeView>
    <Authorized>

        <div>
            <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=true @ondialogdismiss=OnDismiss>

                <div class="outer">
                    <div class="chatbox">

                        @foreach (var key in mesReply.Keys)
                        {

                            <div class="right-bubble">
                                @key
                            </div>

                            @if (mesReply[key].Length < 1)
                            {

                                <div class="left-bubble typing">
                                    Typing....
                                </div>

                            }
                            else
                            {

                                <div class="left-bubble">
                                    @mesReply[key]
                                </div>

                            }

                        }
                    </div>


                    <div class="send-message-bar">
                        <FluentTextField @bind-Value=value3 @oninput="HandleInput" @onkeypress="HandleKeyPress" style="width:80%;"></FluentTextField>
                        <span class="enter" aria-hidden="true" @onclick="AddMessage" style="width:20%;"> Enter </span>
                   
                    </div>

                </div>

            </FluentDialog>


           <img src="img/openai-white-logomark.png" width="40" height="40" @onclick="OnOpen"/>  


        </div>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    protected string value3 = string.Empty;
    public List<string> messages = new List<string>();
    private FluentDialog? MyFluentDialog;
    public bool Modal = true;
    Dictionary<string, string> mesReply = new Dictionary<string, string>();
    protected string reply = string.Empty;
    private OpenAIService? openAIService;



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }


    private void OnOpen()
    {
        MyFluentDialog!.Show();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        var user = (await authenticationStateTask).User;
        graphClient = clientFactory.GetAuthenticatedClient();

        openAIService = new OpenAIService(); // Create an instance of the 'OpenAIService'
    }

    private void HandleInput(ChangeEventArgs e)
    {
        value3 = e.Value.ToString();
        Console.WriteLine("hi enter");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // call the async function from here;
            await AddMessage();
            Console.WriteLine("Entered: " + value3);
        }
    }


    public async Task AddMessage()
    {
        messages.Add(value3);
        mesReply.Add(value3, "");

        foreach (var item in messages)
        {
            Console.WriteLine(item);
        }
        string temp = value3;
        value3 = "";
        StateHasChanged();
        await AIAnswer(temp);
        mesReply[temp] = reply;
        StateHasChanged();

    }


    private async Task AIAnswer(string prompt)
    {
        //string agenda = "Wake up, make my bed and eat breakfast";
        //string prompt = $"Can you create a to-do list including start time in the form of hh:mm for today according to my plans below, it is not always written in chronological order. List each todo task with a ‘+’ where the time is written first and the task is written next to it, separated by ‘>’ and rewrite some tasks to make them clearer and more precise: \n {textValue}";
        Console.Write($"Input: {prompt}\n");
        Console.WriteLine(prompt);

        var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        var completion = completionsResponse.Value.Choices[0].Text;
        reply = completion;
        Console.Write($"Completion: {completion}\n");
    }
}
