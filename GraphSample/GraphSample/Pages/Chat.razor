@page "/chat"
@using System.Security.Authentication
@using System.Text
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Extensions.Logging
@using GrapeCity.Documents.Pdf
@using Azure
@using Azure.AI.OpenAI
@using static System.Environment
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json;


@inject GraphSample.Graph.GraphClientFactory clientFactory


<link rel="stylesheet" href="https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css">


<AuthorizeView>
    <Authorized>

        <div>
            <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=true @ondialogdismiss=OnDismiss>
                <div class="top-bar"><span class="oi oi-x" aria-hidden="true" @onclick="OnCloseModalRefButtonClick"></span></div>
                <div class="outer">
                    <div class="chatbox">

                        @foreach (var key in messages)
                        {
                            <div class="right-bubble">
                                @key
                            </div>

                            @if (mesReply[key].Length < 1)
                            {
                                <div class="left-bubble typing">
                                    Typing....
                                </div>
                            }
                            else
                            {
                                <div class="left-bubble">
                                    @mesReply[key]
                                </div>

                            }

                        }
                    </div>

                    <div class="button-message-bar">
                        <FluentButton @onclick=TodoPressed style="border-radius:5px; background-color: #6200ff; color:white; margin-right: 10px;"> Create To Do</FluentButton>
                        <FluentButton @onclick=WeatherPressed style="border-radius:5px; background-color: #6200ff; color:white; margin-right: 10px;"> Today's Weather </FluentButton>
                        @* <FluentButton style="border-radius:5px; background-color: #6200ff; color:white; margin-right: 10px;">Schedule Meeting </FluentButton> *@
                    </div>

                    <div class="send-message-bar">
                        <FluentTextField @bind-Value=value3 @oninput="HandleInput" @onkeypress="HandleKeyPress" style="width:80%;"></FluentTextField>
                        <span class="enter" aria-hidden="true" @onclick="AddMessage" style="width:20%; border-radius:5px;"> Enter </span>
                   
                    </div>

                </div>

            </FluentDialog>

            <div class="logo-container" @onclick="OnOpen">
                @* use a chat icon here *@
                <i class="ms-Icon ms-Icon--Chat" aria-hidden="true" style="color:white; font-size: 35px;"></i>
            </div>


        </div>

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    protected string value3 = string.Empty;
    public List<string> messages = new List<string>();
    private FluentDialog? MyFluentDialog;
    public bool Modal = true;
    Dictionary<string, string> mesReply = new Dictionary<string, string>();
    protected string reply = string.Empty;
    private OpenAIService? openAIService;
    public bool creating = false;
    private string[]? todolist;
    private string? todoStart;
    private string todoTasks;

    Dictionary<string,string> TaskDict = new Dictionary<string, string>();

    public bool Todo = false;

    public bool Weather = false;


    private string selectedList = "Tasks";

    private IList<TodoTaskList> toDos = new List<TodoTaskList>();

    private string weatherData;

    public string weatherReply;
    


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }


    private void OnOpen()
    {
        MyFluentDialog!.Show();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }
    private void OnCloseModalRefButtonClick() => MyFluentDialog!.Hide();

    protected override async Task OnInitializedAsync()
    {

        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        var user = (await authenticationStateTask).User;
        graphClient = clientFactory.GetAuthenticatedClient();

        openAIService = new OpenAIService(); // Create an instance of the 'OpenAIService'

        var getLists = await graphClient.Me.Todo.Lists.GetAsync();
        toDos = getLists?.Value ?? new List<TodoTaskList>();

        foreach(var item in toDos)
        {
            if (item == null)
            {
                throw new ArgumentNullException(nameof(item));
            }
            // get the id of the list called "Tasks" for Todo func
            if (item.DisplayName == "Tasks"){
                selectedList = item.Id;
            }
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        value3 = e.Value.ToString();
        // Console.WriteLine("hi enter");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // call the async function from here
            await AddMessage();
            Console.WriteLine("Entered: " + value3);
        }
    }


    public async Task AddMessage()
    {
        messages.Add(value3);
        if (!mesReply.ContainsKey(value3))
        {
            mesReply.Add(value3, "");
        }
        
        string temp = value3;
        value3 = "";
        StateHasChanged();

        // switch between modes for chatbot
        if (Todo){
            Console.Write("Entered: " + temp);
            await ConvertTasks(temp);
            reply = "Your To Do List has been updated";
            Todo = false;
        }
        else{
            await AIAnswer(temp);
        }
        mesReply[temp] = reply;
        StateHasChanged();

    }

    public async Task TodoPressed()
    {
        messages.Add("Create To Do List");
        StateHasChanged();
        mesReply["Create To Do List"] = "Please enter your plans for the day";
        Todo = true;
        StateHasChanged();
    }

    public async Task WeatherPressed()
    {
        messages.Add("What is today's weather?");
        mesReply["What is today's weather?"] = "";
        StateHasChanged();
        await GetWeather();
        mesReply["What is today's weather?"] = weatherReply;
        StateHasChanged();
    }

    private async Task ConvertTasks(string textValue)
    {
        creating = true;    
        Console.WriteLine("Entered: " + textValue);
        textValue = textValue + " |||";
        string prompt = $"Can you create a to-do list including a suitable start time in the form of hh:mm for today according to my plan/plans below, it is not always written in chronological order. List each todo task with a ‘+’ where the time is written first and the task is written next to it, separated by ‘>’ and rewrite some tasks to make them clearer and more precise, the plans list ends with '|||' : \n {textValue}";
        Console.Write($"Input: {prompt}\n");

        var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        var completion = completionsResponse.Value.Choices[0].Text;
        Console.WriteLine(completion);
        todolist = completion.Split("\n");

        // Parse the list of AI generated tasks and times
        foreach (string todo in todolist)
        {
            if (todo.Contains("+") && todo.Contains(">"))
            {
                todoStart = todo.Split(">")[0].Split("+")[1];
                //todoStart = todo.Split(">")[0];
                todoTasks = todo.Split(">")[1];

                TaskDict[todoStart] = todoTasks;
                await SendToDo(todoTasks, todoStart);
            }
        }  
        creating = false;
        
    }

    private string FarenheitToCelsius(string temp)
    {
        double tempF = double.Parse(temp);

        double tempC = (tempF - 32) * 5 / 9; 

        tempC = Math.Round(tempC);
        return tempC.ToString();
    }

    private async Task GetWeather(){
        HttpClient client = new HttpClient();

        //Get IP address of user
        var ip = await client.GetStringAsync("https://api.ipify.org");
        
        string myIP = ip.ToString();
        
        //Get location of user from IP address
        var loc = await client.GetStringAsync("https://api.ipgeolocation.io/ipgeo?apiKey=128faba391e648aba00fcf3acda914e3&ip="+ myIP);
        
        dynamic locationUser = JsonConvert.DeserializeObject(loc);

        //Get weather data from location of user
        var response = await client.GetAsync("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"+ locationUser.city +"?key=SWMLUUAV7UHPW5NZ6ZQQNK2G6");

        response.EnsureSuccessStatusCode(); // Throw an exception if error

        weatherData = await response.Content.ReadAsStringAsync();

        dynamic weather = JsonConvert.DeserializeObject(weatherData);

        // Get most recent weather conditions
        string weather_date = weather.days[0].datetime;
        string weather_desc = weather.days[0].description;
        string weather_tmaxF = weather.days[0].tempmax;
        string weather_tmaxC = FarenheitToCelsius(weather_tmaxF);
        string weather_tminF = weather.days[0].tempmin;
        string weather_tminC = FarenheitToCelsius(weather_tminF);

        // Construct weather reply
        weatherReply = "The date is " + weather_date + " \nGeneral conditions: " +  weather_desc + "\nThe high temperature will be " +  weather_tmaxC + " ºC\nThe low temperature will be: " +  weather_tminC + " ºC" ;
    }


    private async Task SendToDo(string todoTasks, string todoStart){
        // Console.WriteLine(todoStart);
        // Console.WriteLine("Sending");
        DateTime now = DateTime.UtcNow.Date; // Get the current date in UTC

        // Split the time string into hours and minutes
        string[] timeParts = todoStart.Split(':');
        int hours = int.Parse(timeParts[0]);
        int minutes = int.Parse(timeParts[1]);

        // Create a new DateTime object with the current date and the specified time
        DateTime startTime = now.AddHours(hours).AddMinutes(minutes);

        DateTimeTimeZone dateTimeTimeZone = new DateTimeTimeZone
        {
            DateTime = startTime.ToString("yyyy-MM-ddTHH:mm:ss"),
            TimeZone = TimeZoneInfo.Local.Id
        };

        // Create request to send to MS Todo using Graph API
        var requestBody = new TodoTask
        {
            Title = todoTasks,
            ReminderDateTime = dateTimeTimeZone,
        };

        var todoTask = await graphClient.Me.Todo.Lists[selectedList].Tasks
            .PostAsync(requestBody);
        //Console.WriteLine("Sent");
    }



    private async Task AIAnswer(string input)
    {
        //Given this question respond in a chatgpt like manner and don't take up a real human persona:
        //string agenda = "Wake up, make my bed and eat breakfast";
        //string prompt = $"Can you create a to-do list including start time in the form of hh:mm for today according to my plans below, it is not always written in chronological order. List each todo task with a ‘+’ where the time is written first and the task is written next to it, separated by ‘>’ and rewrite some tasks to make them clearer and more precise: \n {textValue}";
        
        // For general chatting
        string prompt = "Given this question respond in a chatgpt like manner and don't take up a real human persona: " + input;
        
        Console.Write($"Input: {prompt}\n");

        var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        var completion = completionsResponse.Value.Choices[0].Text;
        foreach (var item in completionsResponse.Value.Choices){
            Console.WriteLine("HERE:");
            Console.WriteLine(item.Text);
        }
        reply = completion;
        Console.Write($"Completion: {completion}\n");
    }
}
