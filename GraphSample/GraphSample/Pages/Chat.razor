@page "/chat"

@using System.Security.Authentication
@using System.Text
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using Microsoft.Extensions.Logging
@using GrapeCity.Documents.Pdf
@using Azure
@using Azure.AI.OpenAI
@using static System.Environment
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    .chatbox {
        width: 300px;
        height: 400px;
        background-color: #f1f1f1;
        padding: 5px;
        justify-content: flex-end;
        /* display by rows  */
        display: flex;
        flex-direction: column;
        overflow: auto;
        border-radius: 5px;
    }

    .message-bar {
        background-color: #fff;
        padding: 10px;
        height: fit-content;
        width: 100%;
        overflow: auto;

    }

    .right-bubble{
        background-color: #fff;
        padding: 10px;
        height: fit-content;
        width: fit-content;
        max-width: 80%;
        float: right;
        right: 0;
        border-radius: 10px;
        margin-bottom: 10px;
        overflow: auto;

    }

    .left-bubble{
        background-color: #fff;
        padding: 10px;
        height: fit-content;
        width: fit-content;
        max-width: 80%;
        float: left;
        left: 0;
        border-radius: 10px;
        margin-bottom: 10px;
        overflow: auto;

    }

    .send-message-bar{
        background-color: #fff;
        padding: 10px;
        height: auto;
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

<h1>Test</h1>

    <div class=chatbox>
        @* <div class=message>
            <div class=bubble>
                <p>Hi</p>
            </div>
        </div>
        <div class=message>
            <div class=bubble>
                <p>Hi</p>
            </div>
        </div> *@

        @foreach (var key in mesReply.Keys){
            <div class=message>
                <div class=right-bubble>
                    <p>@key</p>
                </div>
            </div>
            @if (mesReply[key].Length < 1){
                <div class=message>
                    <div class=left-bubble>
                        <p style="color:rgb(122, 122, 122);">Typing...</p>
                    </div>
                </div>
            }
            else{
                <div class=message>
                    <div class=left-bubble>
                        <p>@mesReply[key]</p>
                    </div>
                </div>
            }
            
        }
    </div>


<div class="send-message-bar">
    <FluentTextField @bind-Value=value3 style="width:70%;"></FluentTextField>
    <FluentButton @onclick="AddMessage" style="width:30%;">Add</FluentButton>
</div>

@code {
    string? value3;
    public List<string> messages = new List<string>();

    Dictionary<string,string> mesReply = new Dictionary<string, string>();

    string? reply;

    private OpenAIService? openAIService;

    [Inject]
    protected IAccessTokenProvider? AccessTokenProvider { get; set; }
    protected string? AccessToken { get; private set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;

    protected override async Task OnInitializedAsync()
    {   
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var accessToken))
        {
            AccessToken = accessToken.Value;
        }

        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        //user = (await authenticationStateTask).User;
        graphClient = clientFactory.GetAuthenticatedClient();

        openAIService = new OpenAIService(); // Create an instance of the 'OpenAIService'
    }

    public async Task AddMessage()
    {
        Console.WriteLine(value3);
        messages.Add(value3);
        mesReply.Add(value3, "");

        foreach (var item in messages)
        {
            Console.WriteLine(item);
        }
        string temp = value3;
        value3 = "";
        StateHasChanged();
        await AIAnswer(temp);
        mesReply[temp] = reply;
        StateHasChanged();

    }


    private async Task AIAnswer(string prompt)
    {
        //string agenda = "Wake up, make my bed and eat breakfast";
        //string prompt = $"Can you create a to-do list including start time in the form of hh:mm for today according to my plans below, it is not always written in chronological order. List each todo task with a ‘+’ where the time is written first and the task is written next to it, separated by ‘>’ and rewrite some tasks to make them clearer and more precise: \n {textValue}";
        Console.Write($"Input: {prompt}\n");
        Console.WriteLine(prompt);

        var completionsResponse = await openAIService.client.GetCompletionsAsync(openAIService.engine, prompt);
        var completion = completionsResponse.Value.Choices[0].Text;
        reply = completion;
        Console.Write($"Completion: {completion}\n");
    }
}
