@page "/completionexample"

@using Microsoft.Graph
@using Microsoft.Graph.Models
@using Azure
@using Azure.AI.OpenAI
@using System.Text

@inject GraphSample.AI.OpenAIService OpenAIService
<style>
{box-sizing: border-box;}

/* Button used to open the chat form - fixed at the bottom of the page */
.open-button {
  background-color: #555;
  color: white;
  padding: 16px 20px;
  border: none;
  cursor: pointer;
  opacity: 0.8;
  position: fixed;
  bottom: 23px;
  right: 28px;
  width: 280px;
}

/* The popup chat - hidden by default */
.form-popup {
  display: none;
  position: fixed;
  bottom: 0;
  right: 15px;
  border: 3px solid #f1f1f1;
  z-index: 9;
}

/* Add styles to the form container */
.form-container {
  max-width: 300px;
  padding: 10px;
  background-color: white;
}

/* Full-width textarea */
.form-container textarea {
  width: 100%;
  padding: 15px;
  margin: 5px 0 22px 0;
  border: none;
  background: #f1f1f1;
  resize: none;
  min-height: 200px;
}

/* When the textarea gets focus, do something */
.form-container textarea:focus {
  background-color: #ddd;
  outline: none;
}

/* Set a style for the submit/login button */
.form-container .btn {
  background-color: #04AA6D;
  color: white;
  padding: 16px 20px;
  border: none;
  cursor: pointer;
  width: 100%;
  margin-bottom:10px;
  opacity: 0.8;
}

/* Add a red background color to the cancel button */
.form-container .cancel {
  background-color: red;
}

/* Add some hover effects to buttons */
.form-container .btn:hover, .open-button:hover {
  opacity: 1;
}

</style>

<div class="chat-popup" id="myForm">
  <form class="form-container">
    <h1>Chat</h1>

    <label for="msg"><b>Message</b></label>
    @* store message in a variable that will be passed to different functions *@
    <textarea placeholder="Type message.." name="msg" required @bind="TextValue"></textarea>

    <button class="btn" @onclick="CallCompletion">Send</button>

  </form>
  <p1>@TextValue</p1>
</div>




@code {
    string TextValue;
    string Response;
    public async Task<string> CallCompletion()

    {
        if (TextValue != null)
        {
            string prompt = "Complete the text: " + TextValue;
            var completionsResponse = await OpenAIService.client.GetCompletionsAsync(OpenAIService.engine, prompt);

            @* var CompletionResponse = await OpenAIService.client.GetCompletionsAsync(OpenAIService.engine, prompt); *@
        
            Response =  completionsResponse.Value.Choices[0].Text;
            
        }
        return Response;
    }

    
}