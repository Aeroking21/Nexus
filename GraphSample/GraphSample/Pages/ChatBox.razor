@page "/completionexample"

@using Microsoft.Graph
@using Microsoft.Graph.Models
@using Azure
@using Azure.AI.OpenAI
@using System.Text
@* @using Newtonsoft.Json; *@


@inject GraphSample.AI.OpenAIService OpenAIService

<div class="chat-popup" id="myForm">
  <form class="form-container">
    <h1>Chat</h1>

    <label for="msg"><b>Message</b></label>
    @* store message in a variable that will be passed to different functions *@
    <textarea placeholder="Type message.." name="msg" required @bind="TextValue"></textarea>

    <button class="btn" @onclick="CallCompletion">Send</button>

  </form>
  <p1>@TextValue</p1>
</div>


<div class="container">
    <div class="row">
        <div class="col-4">
            <p>@testing</p>
        </div>
        <div class="col-4">
            <div class="messages">
                @for (int i = 0; i < messages.Count; i++)
                {
                    @if (i % 2 == 0)
                    {
                        <div class="question">@messages[i]</div>
                    } else
                    {
                        <div class="response">@messages[i]</div>
                    }
                }
                
            </div>
            <div class="textMessage">
                <input @bind="message" />
                <button @onclick="SendMessage">Send</button>
            </div>
        </div>
        <div class="col-4">
        </div>

    </div>
</div>

@code{
    public string message;
    public string testing;
    public List<string> messages = new List<string>();
    private static HttpClient Http = new HttpClient();
    List<string> options = new List<string>() { "Create a Timetable", "Add In a Todo", "Schedule A Meeting" };


    protected override async Task OnInitializedAsync()
    {
        Http = new HttpClient();
        messages.Add("Hello, I am a chatbot. How can I help you?");
        @* make 3 clickable options presented as a message from the chatbot*@
        for (int i = 0; i < options.Count; i++)
        {
            messages.Add(options[i]);
        }
        @* if the user clicks on 1st message call createTimetable() *@
        @* if the user clicks on 2nd message call addTodo() *@
        @* if the user clicks on 3rd message call scheduleMeeting() *@        

    }

    public async Task SendMessage()
    {
        Http = new HttpClient();
        messages.Add(message);

        StateHasChanged();
    }


    string TextValue;
    string Response;
    public async Task<string> CallCompletion()

    {
        if (TextValue != null)
        {
            string prompt = "Complete the text: " + TextValue;
            var completionsResponse = await OpenAIService.client.GetCompletionsAsync(OpenAIService.engine, prompt);

            @* var CompletionResponse = await OpenAIService.client.GetCompletionsAsync(OpenAIService.engine, prompt); *@
        
            Response =  completionsResponse.Value.Choices[0].Text;
            
        }
        return Response;
    }

    
}