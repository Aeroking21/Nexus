<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/calendar"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter



@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Calendar</h1>
          @if (!string.IsNullOrEmpty(status))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-success")">@status</div>
        }
        <form>
            <div class="mb-3">
                <label for="subject">Subject</label>
                <input @bind="subject" id="subject" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="attendees">Attendees</label>
                <input @bind="attendees" id="attendees" class="form-control" />
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <label for="start">Start</label>
                        <input @bind="start" type="datetime-local" id="date" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <label for="end">End</label>
                        <input @bind="end" type="datetime-local" id="end" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <label for="body">Body</label>
                <textarea @bind="body" id="body" class="form-control"></textarea>
            </div>
        </form>
        <button class="btn btn-primary me-2" @onclick="CreateEvent">Create</button>
        <a href="/calendar" class="btn btn-secondrary">Cancel</a>

        <!-- <a href="/newevent" class="btn btn-light btn-sm mb-3">New event</a> -->
        <table class="table">
            <thead>
                <tr>
                    <th>Organizer</th>
                    <th>Subject</th>
                    <th>Start</th>
                    <th>End</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var calendarEvent in events)
                {
                    <tr>
                        <td>@calendarEvent?.Organizer?.EmailAddress?.Name</td>
                        <td>@calendarEvent?.Subject</td>
                        <td>@FormatIso8601DateTime(calendarEvent?.Start?.DateTime)</td>
                        <td>@FormatIso8601DateTime(calendarEvent?.End?.DateTime)</td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]

    
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IList<Event> events = new List<Event>();
    private string? dateTimeFormat;

    private string status = string.Empty;
    private bool isError;
    private string userTimeZone = string.Empty;
    private string subject = string.Empty;
    private string attendees = string.Empty;
    private DateTime start = new DateTime(DateTime.Today.Ticks);
    private DateTime end = new DateTime(DateTime.Today.Ticks);
    private string body = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user's time zone
        var user = (await authenticationStateTask).User;
        userTimeZone = user.GetUserGraphTimeZone() ?? "UTC";

           if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        var eventPage = await graphClient.Me
            .CalendarView
            .GetAsync(config =>
            {
                // Send user time zone in request so date/time in
                // response will be in preferred time zone
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                // Specifies the start and end of the view on the calendar
                // Translates to: ?startDateTime=""&endDateTime=""
                config.QueryParameters.StartDateTime = startOfWeek.ToString("o");
                config.QueryParameters.EndDateTime = endOfWeek.ToString("o");
                // Get max 50 per request
                config.QueryParameters.Top = 50;
                // Only return fields app will use
                config.QueryParameters.Select = new [] { "subject", "organizer", "start", "end" };
                // Order results chronologically
                config.QueryParameters.Orderby = new [] { "start/dateTime" };
            });

        events = eventPage?.Value ?? new List<Event>();
    }

    private async Task CreateEvent()
    {
        // Initalize an Event object
        // with user input
        var newEvent = new Event
        {
            Subject = subject,
            Start = new DateTimeTimeZone
            {
                DateTime = start.ToString("o"),
                TimeZone = userTimeZone
            },
            End = new DateTimeTimeZone
            {
                DateTime = end.ToString("o"),
                TimeZone = userTimeZone
            },
            Body = new ItemBody
            {
                Content = body,
                ContentType = BodyType.Text
            }
        };

        // If the user provided attendees (semicolon-delimited
        // list of email addresses) add them
        if (!string.IsNullOrEmpty(attendees))
        {
            var attendeeList = new List<Attendee>();

            var attendeeArray = attendees.Split(";");
            foreach (var email in attendeeArray)
            {
                Console.WriteLine($"Adding {email}");
                attendeeList.Add(new Attendee
                {
                    // Set to required attendee
                    Type = AttendeeType.Required,
                    EmailAddress = new EmailAddress
                    {
                        Address = email
                    }
                });
            }

            newEvent.Attendees = attendeeList;
        }

        var graphClient = clientFactory.GetAuthenticatedClient();

        try
        {
            // POST /me/events
            await graphClient.Me
                .Events
                .PostAsync(newEvent);

            isError = false;
            status = "Event created";
        }
        catch (ServiceException exception)
        {
            isError = true;
            status = exception.Message;
        }
    }



    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }
}
