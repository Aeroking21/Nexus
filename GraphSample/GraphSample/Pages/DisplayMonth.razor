@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>

/* .calendar-table{
    width: 100%;
    height: 100%;
    border-collapse: collapse;
    font-size: 1rem;
} */


.calendar-table {
    width: 100%; 
    text-align: center;

}

.calendar-table thead {
    background-color: white; 
}

.calendar-table .day {
    min-width: 125px; 
    margin: 2px; 
    border-radius: 5px;
    background-color: white;
    padding: 30px;
    cursor: pointer;
}

.calendar-table td {
    padding: 30px;
    /* border: 1px solid #ccc; */
    /* text in centre */
    vertical-align: middle;
}

</style>

<AuthorizeView>
    <Authorized>
        <h2>@MonthToText() @year</h2>
        
        <table class="calendar-table">
            <!-- display the month and year  -->
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>
            <tbody>
                
                @for (int r = 0; r < rowsCount; r++)
                {
                    <tr>
                        @foreach (var item in days.Skip(r * 7).Take(7))
                        {
                            //if (DayTemplate(item) == DateTime.Date.Now then the cell is highlighted
                            // events is a list of events for the day, display them in the right cell
                            if (item.Date == DateTime.Now.Date)
                            {
                                
                                <td class="day bg-primary text-white">@DayTemplate(item)</td>
                            }
                            else{

                                <td class="day">@DayTemplate(item)</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-between">
                <button class="btn btn-primary" @onclick="PreviousMonth">Previous</button>
                <button class="btn btn-primary" @onclick="Today">Today</button>
                <button class="btn btn-primary" @onclick="NextMonth">Next</button>
                
        </div>

    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    public class CalendarDay
    {
        public int DayNumber { get; set; }
        public DateTime Date { get; set; }
        public bool IsEmpty { get; set; }
        // events is a list of events for the day public List<Event> events { get; set; }, take care of null values
        public List<Event> events { get; set; } = new List<Event>();
    }

    [Parameter]
    public RenderFragment<CalendarDay> DayTemplate { get; set; } = DefaultDayTemplate;

    private static RenderFragment<CalendarDay> DefaultDayTemplate = (day) => builder =>
    {
        // Render your custom day template here
        if (day.DayNumber != 0)
        {
            builder.AddContent(1, day.DayNumber);
            // display the events for the day

        }
    
    };

    private List<CalendarDay> days = new List<CalendarDay>();
    private int year = DateTime.Now.Year;
    private int month = DateTime.Now.Month;
    private int rowsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCalendar();
    }

    public string MonthToText(){
        switch (month)
        {
            case 1:
                return "January";
            case 2:
                return "February";
            case 3:
                return "March";
            case 4:
                return "April";
            case 5:
                return "May";
            case 6:
                return "June";
            case 7:
                return "July";
            case 8:
                return "August";
            case 9:
                return "September";
            case 10:
                return "October";
            case 11:
                return "November";
            case 12:
                return "December";
            default:
                return "";
        }
    }


    public async  Task LoadCalendar()
    {
        // Calendar loading logic...
        days = new List<CalendarDay>();

        // Calculate the number of empty days 
        var firstDayDate = new DateTime(year, month, 1);
        int weekDayNumber = (int)firstDayDate.DayOfWeek;
        int numberOfEmptyDays = 0;
        if (weekDayNumber == 7) // Sunday 
        {
            numberOfEmptyDays = 0;
        }
        else
        {
            numberOfEmptyDays = weekDayNumber;
        }

        // Add the empty days 
        for (int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = 0,
                IsEmpty = true
            });
        }

        // Add the month days 
        int numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

        for (int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(year, month, i + 1)
            });
        }

        // 2- Calcualte the number of rows 
        int remaning = days.Count % 7;
        if (remaning == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;
    }

        // Set the number of rows based on the days count

    public async Task NextMonth()
    {
        if (month == 12)
        {
            month = 1;
            year++;
        }
        else
        {
            month++;
            MonthToText();
        }
        await LoadCalendar();
    }

    public async Task PreviousMonth()
    {
        if (month == 1)
        {
            month = 12;
            year--;
        }
        else
        {
            month--;
        }
        await LoadCalendar();
    }

    public async Task Today()
    {
        month = DateTime.Now.Month;
        year = DateTime.Now.Year;
        await LoadCalendar();
    }

}
