@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models

@inject GraphSample.Graph.GraphClientFactory clientFactory



<AuthorizeView>
    <Authorized>
        <table class="calendar-table">
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>
            <tbody>
                @for (int r = 0; r < rowsCount; r++)
                {
                    <tr>
                        @foreach (var item in days.Skip(r * 7).Take(7))
                        {
                            <td>@DayTemplate(item)</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    public class CalendarDay
    {
        public int DayNumber { get; set; }
        public DateTime Date { get; set; }
        public bool IsEmpty { get; set; }
    }

    [Parameter]
    public RenderFragment<CalendarDay> DayTemplate { get; set; } = DefaultDayTemplate;

    private static RenderFragment<CalendarDay> DefaultDayTemplate = (day) => builder =>
    {
        // Render your custom day template here
        builder.AddContent(0, day.DayNumber);
    };

    private List<CalendarDay> days = new List<CalendarDay>();
    private int year = DateTime.Now.Year;
    private int month = DateTime.Now.Month;
    private int rowsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCalendar();
    }

    public async Task LoadCalendar()
    {
        // Calendar loading logic...
                days = new List<CalendarDay>();

        // Calculate the number of empty days 
        var firstDayDate = new DateTime(year, month, 1);
        int weekDayNumber = (int)firstDayDate.DayOfWeek;
        int numberOfEmptyDays = 0;
        if (weekDayNumber == 7) // Sunday 
        {
            numberOfEmptyDays = 0;
        }
        else
        {
            numberOfEmptyDays = weekDayNumber;
        }

        // Add the empty days 
        for (int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = 0,
                IsEmpty = true
            });
        }

        // Add the month days 
        int numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

        for (int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new CalendarDay
            {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(year, month, i + 1)
            });
        }

        // 2- Calcualte the number of rows 
        int remaning = days.Count % 7;
        if (remaning == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;
    }

        // Set the number of rows based on the days count

}
