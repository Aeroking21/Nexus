<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/search"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter

@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Teams</h1>
        <table class="table">
            <tbody>
                @foreach (var teamsChat in chats)
                {
                    <tr>
                        <td>@teamsChat?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Summary</td>
                        <td> hello </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private List<Microsoft.Graph.Search.Query.QueryResponse> chats = new List<Microsoft.Graph.Search.Query.QueryResponse> ();
    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();

        var requestBody = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
    {
        new SearchRequest
        {
            EntityTypes = new List<EntityType?>
            {
                EntityType.ChatMessage,
            },
            Query = new SearchQuery
            {
                QueryString = "dollar sign",
            },
        },
    },
        };
        var result = await graphClient.Search.Query.PostAsync(requestBody);

        chats.Add(result);
    }
}
