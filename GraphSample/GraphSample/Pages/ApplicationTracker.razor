@page "/applicationtracker"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using SharedModels.Models
@using GraphSample.ReusableComponents


@inject GraphSample.Services.IBackendApiService backendApiService
@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Application Dashboard</h1>
        @if (timelines == null)
        {
            <FluentProgressRing></FluentProgressRing>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Comapny</th>
                        <th>Role</th>
                        @if (!emailsShowing)
                        {
                            <th></th>
                            <th>
                                Associated emails
                            </th>
                            <th></th>
                            <th>Assessments</th>
                            <th></th>

                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var timeline in timelines)
                    {
                        <tr>
                            @if (emailsShowing && emailsShowingTimeline == timeline.timelineID)
                            {
                                <td><button class="btn btn-primary red-button" @onclick="() => emailsShowing = false">Hide emails</button></td>
                            }
                            else
                            {
                                <td><button class="btn btn-primary red-button" @onclick="() => ShowEmails(timeline.timelineID, timeline.associatedEmailAddresses)">Show emails</button></td>
                            }
                            <td>@timeline.company</td>
                            <td>@timeline.role</td>
                            @if (!emailsShowing)
                            {
                                <td> <span class="add-button" @onclick="() => ShowModal(timeline.timelineID)">+</span></td>
                                <td>
                                    <div class="email-container">
                                        @foreach (var email in timeline.associatedEmailAddresses)
                                        {
                                            <div class="email">@email</div>
                                            <span class="remove-button" @onclick="() => RemoveEmail(email, timeline.timelineID)">x</span>
                                        }
                                    </div>
                                </td>
                                <td> <span class="add-button" @onclick="() => ShowAssessmentModal(timeline.timelineID)">+</span></td>
                                <td>
                                    <div style="display: flex; overflow-x: auto;">
                                        @foreach (var assessment in timeline.assessments)
                                        {
                                            <div style="min-width: 200px;">@((assessment.type != AssessmentType.Custom) ? assessment.type : assessment.customDescription)</div><br />
                                            <div style="min-width: 200px;">@assessment.date</div>
                                            <span class="remove-button" @onclick="() => RemoveAssessment(assessment, timeline.timelineID)">x</span>
                                        }
                                    </div>
                                </td>
                                <td><button class="btn btn-primary red-button" @onclick="() => ShowRemoveTimelineModal(timeline.timelineID)">Delete</button></td>
                            }
                        </tr>
                    }
                    <button class="btn btn-primary" @onclick="() => ShowAddTimelineModal()">Add Timeline</button>
                </tbody>
            </table>
            @if (emailsShowing)
            {
                @if (fetchingEmails)
                    {
                    <FluentProgressRing></FluentProgressRing>
                    }
                else
                    {
                    @foreach (var email in showingEmails)
                        {
                        <div>
                            <h5> @email.Subject</h5>
                            <h5>@email.ReceivedDateTime </h5>
                        </div>
                        }
                     }
               }
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

<style>
    .email-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        height: 2.5em;
        overflow-y: scroll;
    }

    .add-button {
        margin-right: 0.5em;
        cursor: pointer;
        color: green;
    }

    .remove-button {
        cursor: pointer;
        color: red;
        margin-left: 0.5em;
    }

    .red-button {
        background-color: red;
        color: white;
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private string? dateTimeFormat;
    private string userTimeZone = string.Empty;
    private List<ApplicationTimeline> timelines;
    private bool emailsShowing;
    private int emailsShowingTimeline;
    private List<Message>? showingEmails;
    private bool fetchingEmails;

    protected override async Task OnInitializedAsync()

    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user's time zone
        var user = (await authenticationStateTask).User;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();
        emailsShowing = false;

        timelines = await backendApiService.getUserTimelinesAsync("ks2220");//user?.Identity?.Name);
    }
    public async void ShowEmails(int timelineID, List<string> associatedEmails)
    {
        emailsShowing = true;
        emailsShowingTimeline = timelineID;
        await GetAssociatedEmails(associatedEmails);
    }

    public async Task GetAssociatedEmails(List<string> associatedEmails)
    {
        fetchingEmails = true;
        List<Message>? fetchedEmails = new();
        foreach (var email in associatedEmails)
        {
            var result = await graphClient.Me.Messages.GetAsync((requestConfiguration) =>
            {
                requestConfiguration.QueryParameters.Filter = $"from/emailAddress/address eq '{email}'";
            });
            if (result != null)
            {
                fetchedEmails.AddRange(result.Value);
            }
        }
        showingEmails = fetchedEmails.OrderBy(m => m.ReceivedDateTime).ToList();
        fetchingEmails = false;
        StateHasChanged();
    }

    public async void RemoveEmail(string email, int timelineID)
    {
        var response = await backendApiService.removeEmail(email, "ks2220", timelineID);

        if (response)
        {
            var newTimeline = await backendApiService.getUserTimelineAsync("ks2220", timelineID);
            int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
            if (index != -1)
            {
                timelines[index] = newTimeline;
                StateHasChanged();
            }
        }

    }

    public async void RemoveAssessment(Assessment assessment, int timelineID)
    {
        var response = await backendApiService.removeAssessment(assessment, "ks2220", timelineID);

        if (response)
        {
            var newTimeline = await backendApiService.getUserTimelineAsync("ks2220", timelineID);
            int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
            if (index != -1)
            {
                timelines[index] = newTimeline;
                StateHasChanged();
            }
        }

    }

    [CascadingParameter] IModalService ModalInputPopup { get; set; } = default!;

    private async Task ShowModal(int timelineID)
    {
        var inputPopupModal = ModalInputPopup.Show<InputPopup>();
        var result = await inputPopupModal.Result;

        if (result.Confirmed)
        {
            string newEmail = result.Data?.ToString();
            if (newEmail != "")
            {
                var response = await backendApiService.addEmail(newEmail, "ks2220", timelineID);
                if (response)
                {
                    var newTimeline = await backendApiService.getUserTimelineAsync("ks2220", timelineID);
                    int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
                    if (index != -1)
                    {
                        timelines[index] = newTimeline;
                        StateHasChanged();
                    }
                }

            }
        }
    }

    private async Task ShowAddTimelineModal()
    {
        var inputPopupModal = ModalInputPopup.Show<AddTimelinePopup>();
        var result = await inputPopupModal.Result;

        if (result.Confirmed)
        {
            TimelineBson? newTimelineBson = result.Data as TimelineBson;
            if (newTimelineBson != null)
            {
                int newTimelineID = await backendApiService.addTimeline("ks2220", newTimelineBson);
                if (newTimelineID != -1)
                {
                    try
                    {
                        ApplicationTimeline newTimeline = await backendApiService.getUserTimelineAsync("ks2220", newTimelineID);
                        timelines.Add(newTimeline);
                        StateHasChanged();
                    }
                    catch
                    {
                        ;
                    }
                }

            }

        }
    }

    private async Task ShowAssessmentModal(int timelineID)
    {
        var assessmentModal = ModalInputPopup.Show<AssessmentInputPopup>();
        var result = await assessmentModal.Result;

        if (result.Confirmed)
        {
            Assessment? newAssessment = result.Data as Assessment;
            if (newAssessment != null)
            {
                var response = await backendApiService.addAssessment(newAssessment, "ks2220", timelineID);
                if (response)
                {
                    var newTimeline = await backendApiService.getUserTimelineAsync("ks2220", timelineID);
                    int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
                    if (index != -1)
                    {
                        timelines[index] = newTimeline;
                        StateHasChanged();
                    }
                }

            }
        }
    }

    private async Task ShowRemoveTimelineModal(int timelineID)
    {
        var removeTimelinePopup = ModalInputPopup.Show<RemoveTimelinePopup>();
        var result = await removeTimelinePopup.Result;

        if (result.Confirmed)
        {
            var response = await backendApiService.removeTimeline("ks2220", timelineID);
            if (response)
            {
                timelines = await backendApiService.getUserTimelinesAsync("ks2220");
                StateHasChanged();
            }
        }
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }


    }

