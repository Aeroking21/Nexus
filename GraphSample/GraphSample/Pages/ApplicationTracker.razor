@page "/applicationtracker"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using SharedModels.Models


@inject GraphSample.Services.IBackendApiService backendApiService
@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Application Dashboard</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Comapny</th>
                    <th>Role</th>
                    <th>Associated emails</th>
                    <th>Assessments</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var timeline in timelines)
                {
                    <tr>
                        <td>@timeline.company</td>
                        <td>@timeline.role</td>
                        <td>
                            <div class="email-container">
                                @foreach (var email in timeline.associatedEmailAddresses)
                                {
                                    <div>@email</div>
                                    <span class="remove-button" @onclick="() => RemoveEmail(email, timeline.timelineID)">x</span>
                                }
                            </div>
                        </td>
                        <td>
                            <div style="display: flex; overflow-x: auto;">
                                @foreach (var assessment in timeline.assessments)
                                {
                                    <div style="min-width: 200px;">@assessment.type</div>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

<style>
    .email-container {
        height: 2.5em;
        overflow-y: scroll;
    }
    .remove-button {
        cursor: pointer;
        color: red;
        margin-left: 0.5em;
    }
</style>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private string? dateTimeFormat;
    private string userTimeZone = string.Empty;
    private List<ApplicationTimeline> timelines;
    private IList<Message> allMessages = new List<Message>();

    protected override async Task OnInitializedAsync()

    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user's time zone
        var user = (await authenticationStateTask).User;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                config.QueryParameters.Select = new string[] { "subject", "sender" };
                config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });

        allMessages = mailPage?.Value ?? new List<Message>();

        timelines = await backendApiService.getUserTimelinesAsync("ks2220");//user?.Identity?.Name);
    }


    public async void RemoveEmail(string email, int timelineID)
    {
        var response = await backendApiService.removeEmail(email, "ks2220", timelineID);

        if (response)
        {
            var newTimeline = await backendApiService.getUserTimelineAsync("ks2220", timelineID);
            var timeline = timelines.Find(tl => tl.timelineID == timelineID);
            timeline = newTimeline;
        }

    }


    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }


}

