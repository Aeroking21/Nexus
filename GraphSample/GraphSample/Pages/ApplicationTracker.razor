
@page "/applicationtracker"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using SharedModels.Models
@using GraphSample.ReusableComponents


@inject GraphSample.Services.IBackendApiService backendApiService
@inject GraphSample.Graph.GraphClientFactory clientFactory

<div class="container">
<AuthorizeView>
    <Authorized>
        @if (fetchingTimelines || creatingApplicant)
        {
            <h1 class="mb-3">Application Dashboard</h1>
            <FluentProgressRing></FluentProgressRing>
        }
        else if (!isRegistered)
        {
            <h1 class="mb-3">Application Dashboard</h1>
            <button class="btn btn-primary" @onclick="() => CreateApplicant()">Start Your Application Journey Now!</button>
        }
        else
        {
    <div class="header-container">
        <h1 class="mb-3">Application Dashboard</h1>
        <button class="add-timeline-button" @onclick="() => ShowAddTimelineModal()">Add Application</button>
        <span class="sorting-select">
            <span>Sort by:</span>
            <select @bind="sortingCriterion" @oninput="(args) => { sortingCriterion = Enum.Parse<SortingCriteria>(args.Value.ToString()); HandleSortCriterionChange(); }">
                @foreach (SortingCriteria criterion in Enum.GetValues(typeof(SortingCriteria)))
                {
                    <option value="@criterion">@criterion.ToString().Replace("_", " ")</option>
                }
            </select>
        </span>
    </div>
            <div class="inner-container">
                <div class="left-div">
                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var timeline in timelines)
                            {
                                <tr height="2.5em">
                                        <td width="65%">
                                            <div calss="flex-container">
                                                @if (emailsShowing && emailsShowingTimeline == timeline.timelineID)
                                                {
                                                    <button class="fixed-height-row-button" @onclick="() => emailsShowing = false">Hide emails</button>
                                                }
                                                else
                                                {
                                                    <button class="fixed-height-row-button" @onclick="() => ShowEmails(timeline)">Show emails</button>
                                                }
                                                <span class="remove-button" @onclick="() => ShowRemoveTimelineModal(timeline.timelineID)"><FluentIcon Name="@FluentIcons.Delete" Color="@Color.Error"></FluentIcon></span>
                                                @if (timeline.hasUnreadEmails)
                                                {
                                                    <span class="timeline-icon">
                                                        <FluentIcon Name="@FluentIcons.MailUnread" Color="@Color.Error" Variant="@IconVariant.Regular"></FluentIcon>
                                                    </span>
                                                }
                                                @if (timeline.alertLevel == 0)
                                                {
                                                    <span class="timeline-icon" @onclick="() => UpdateAlertLevel(timeline)"><FluentIcon Name="@FluentIcons.Star" Color="@Color.Neutral"></FluentIcon></span>
                                                }
                                                else
                                                {
                                                    <span class="timeline-icon" @onclick="() => UpdateAlertLevel(timeline)"><FluentIcon Name="@FluentIcons.Star" Color="@Color.Custom" Variant="@IconVariant.Filled" CustomColor="#ffff00"></FluentIcon></span>
                                                }
                                            </div>
                                        </td>
                                    <td width="15%">
                                        <div class="company-content">
                                            <p>@timeline.company</p>
                                        </div>
                                    </td>
                                    <td width="20%"><div class="role-content">@timeline.role</div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="right-div">
                    @if (!emailsShowing)
                    {
                        <div class="inner-container">
                            <div class="right-left-div">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>
                                            </th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var timeline in timelines)
                                        {
                                            <tr height="5em">
                                                <td width="65%">
                                                    <div class="associated-emails-content">
                                                        <button class="show-emails-button" @onclick="() => {expandAssociatedEmails = expandedEmailsTimeline == timeline.timelineID ? (!expandAssociatedEmails) : true; expandedEmailsTimeline = timeline.timelineID;}">
                                                            <span style="display: inline-block; vertical-align: middle;">show addresses</span>
                                                            @if (expandAssociatedEmails && (expandedEmailsTimeline == timeline.timelineID))
                                                            {
                                                                <FluentIcon Name="@FluentIcons.ChevronDoubleDown" Color="@Color.Neutral" Variant="@IconVariant.Filled" style="display: inline-block; vertical-align: middle;"></FluentIcon>
                                                            }
                                                            else
                                                            {
                                                                <FluentIcon Name="@FluentIcons.ChevronDoubleRight" Color="@Color.Neutral" Variant="@IconVariant.Filled" style="display: inline-block; vertical-align: middle;"></FluentIcon>
                                                            }
                                                        </button>
                                                        @if (expandAssociatedEmails && (expandedEmailsTimeline == timeline.timelineID))
                                                        {
                                                            <div class="email-list-container">
                                                                <button class="add-email-button" @onclick="() => {expandAssociatedEmails = false; StateHasChanged(); ShowAddEmailModal(timeline.timelineID); expandAssociatedEmails = true; StateHasChanged();}">
                                                                    Add email Address
                                                                </button>

                                                                @foreach (var email in timeline.associatedEmailAddresses)
                                                                {
                                                                    <div class="email-item">
                                                                        <span>@email</span>
                                                                        <span class="remove-button" @onclick="() => RemoveEmail(email, timeline.timelineID)">
                                                                            <FluentIcon Name="@FluentIcons.DismissSquare" Color="@Color.Error" Variant="@IconVariant.Filled"></FluentIcon>
                                                                        </span>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                </td>
                                                <td width="35%"> <span class="add-button" @onclick="() => ShowAddAssessmentModal(timeline.timelineID)"><FluentIcon Name="@FluentIcons.AddSquare" Color="@Color.Success" Variant="@IconVariant.Filled"></FluentIcon></span></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="right-right-div">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var timeline in timelines)
                                        {
                                            <tr height="2.5em">
                                                <td width="100%">
                                                    <div class="assessments-container">
                                                        @foreach (var assessment in timeline.assessments)
                                                        {
                                                            <div class="pane @("status" + assessment.status)">
                                                                <div style="display: flex">
                                                                    <div>
                                                                        @((assessment.type != AssessmentType.Custom) ? assessment.type.ToString().Replace("_", " ") : assessment.customDescription)
                                                                    </div>
                                                                    <span class="remove-button" @onclick="() => RemoveAssessment(assessment, timeline.timelineID)"><FluentIcon Name="@FluentIcons.DismissSquare" Color="@Color.Error" Variant="@IconVariant.Filled"></FluentIcon></span>
                                                                </div>
                                                                <div>
                                                                    <select class="status-select" @bind="assessment.status" @oninput="(e) => HandleStatusChange(timeline, assessment,  Enum.Parse<AssessmentStatus>(e.Value.ToString()))">
                                                                        @*<option value="@assessment.status">@assessment.status</option>*@

                                                                        @foreach (AssessmentStatus option in Enum.GetValues(typeof(AssessmentStatus)))
                                                                            {
                                                                                    <option value="@option">@option</option>

                                                                            }
                                                                    </select>
                                                                </div>
                                                                <div>@assessment.date</div>
                                                            </div>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (fetchingEmails)
                        {
                            <div class="right-div">
                                <FluentProgressRing></FluentProgressRing>
                            </div>
                        }
                        else
                        {
                            <div class="right-div">
                                <table class="my-table">
                                    <thead>
                                        <tr>
                                            <th>Sender</th>
                                            <th>Sent Time</th>
                                            <th>Subject</th>
                                            <th>Body</th>
                                            <th>Unread</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var email in selectedAssociatedEmails)
                                        {
                                            <tr>
                                                <td>@email.Sender.EmailAddress.Address</td>
                                                <td>@email.ReceivedDateTime</td>
                                                <td>@email.Subject</td>
                                                <td>@(new MarkupString(email.Body.Content))</td>
                                                <td>@email.IsRead</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

</div>

<style>

    .container {
        width: 100% !important;
        background-image: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8));
        border-radius: 3px;
        padding: 1px;
    }
    .assessments-container {
        border: 1px solid transparent;
        border-right: none;
        height: 75px;
        width: 100%;
        overflow-x: visible;
        position: relative;
        white-space: nowrap;
        padding-bottom: 14px;
    }

    .pane {
        width: 300px;
        height: 70px;
        border: 2px solid #ccc;
        border-radius: 10px;
        display: -moz-inline-box;
        display: inline-block;
        overflow: auto;
    }

    .pane.statusPending {
        background-color: rgba(255, 255, 0, 0.5); /* Yellow semi-translucent color */
        }


    .pane.statusPassed {
        background-color: rgba(0, 255, 0, 0.5); /* Green semi-translucent color */
        }


    .pane.statusScheduled {
        background-color: rgba(0, 0, 255, 0.5); /* Blue semi-translucent color */
        }


    .pane.statuesFailed {
        background-color: rgba(128, 128, 128, 0.5); /* Gray semi-translucent color */
        }

    .email-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        height: 75px;
        width: 100%;
        overflow-y: scroll;
        overflow-x: scroll;
    }

    .add-button {
        margin-right: 0.5em;
        cursor: pointer;
        color: green;
    }

    .remove-button {
        cursor: pointer;
        color: red;
        margin-left: 0.5em;
    }

    .timeline-icon {
        margin-left: 0.2em;
    }

    .red-button {
        background-color: red;
        color: white;
    }

    .show-emails-button {
        padding: 2px 4px;
        font-size: 12px;
        width: 120px;
    }

    .inner-container {
        display: flex;
        width: 100%;
    }

    .header-container {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .main-div {
        flex: 1; 
    }

    .left-div {
        width: 400px;
    }

    .right-div {
        width: 1050px;
    }

    .right-left-div {
        width: 20%;
    }

    .right-right-div {
        width: 80%;
        overflow-x: scroll;
    }

    .email-list-container {
        position: absolute;
        z-index: 2;
        background-color: #ffffff;
        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
        padding: 8px;
        margin-top: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .highlight-span {
        display: inline-block;
        padding: 4px;
        cursor: pointer;
        width: 100%;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .highlighted {
        background-color: #dddddd;
    }

    .email-item {
        display: flex;
        align-items: center;
        margin-bottom: 4px;
    }

    .associated-emails-content {
        height: 75px;
    }

    .company-content {
        display: flex;
        flex-wrap: wrap;
        height: 75px;
        overflow-y: scroll;
        width: 100%;
        text-align: center;
    }
    .role-content {
        display: flex;
        flex-wrap: wrap;
        height: 75px;
        width: 100%;
        overflow-y: scroll;
        text-align: center;
    }

    .fixed-height-row-button {
        padding: 1px 4px; 
        font-size: 10px;
        height: 35px;
        width: 100%;
    }

    .add-email-button {
        padding: 2px 6px;
        color: white;
        border-radius: 5px;
        border: 1px none;
        background-color: #1b6ec2;
        border-color: #1861ac;
    }

        .add-email-button:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }

    .add-timeline-button {
        padding: 5px 10px;
        height: 40px;
        color: white;
        border-radius: 3px;
        border: 1px solid grey;
        background-color: #1b6ec2;
        border-color: #1861ac;
        margin-left: 20px;
    }

    .sorting-select {
        height: 40px;
        padding: 5px 10px;
        color: white;
        border-radius: 3px;
        border: 1px none;
        margin-left: 20px;
        color: black;
    }

    .my-table {
        border-collapse: collapse;
    }

    .my-table th, .my-table td {
         border: 1px solid black;
         padding: 8px;
        }

    tr {
        border-bottom: 1px solid grey;
    }

    .status-select {
        background-color: transparent;
    }

    .flex-container {
        display: flex;
        align-items: center;
        margin-bottom: 4px;
    }


</style>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private string? dateTimeFormat;
    private string userTimeZone = string.Empty;
    private List<ApplicationTimeline>? timelines;
    private bool emailsShowing;
    private int emailsShowingTimeline;
    //private List<Message>? selectedAssociatedEmails;
    private List<Message> selectedAssociatedEmails;

    private bool fetchingEmails = false;
    private bool fetchingTimelines = false;
    private bool creatingApplicant = false;

    private string Username;
    private bool isRegistered;

    private bool expandAssociatedEmails = false;
    private int expandedEmailsTimeline = -1;

    private IList<Message> allMessages = new List<Message>();
    public HashSet<string> allSenders;

    private SortingCriteria sortingCriterion = SortingCriteria.Date_Added;
    private enum SortingCriteria
    {
        Date_Added,
        Starred,
    }

    bool IsHovered { get; set; }

    protected override async Task OnInitializedAsync()

    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user's time zone
        var user = (await authenticationStateTask).User;
        Username = user.Identity?.Name;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";
        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();
        emailsShowing = false;
        fetchingTimelines = true;
        timelines = await backendApiService.getUserTimelinesAsync(Username);

        if (timelines != null)
        {

            //experimental
            isRegistered = true;
            List<Message> allAssociatedEmails = new();
            List<string> allAssociatedEmailStrings = new();
            //Dictionary<string, int> emailCounts = new Dictionary<string, int>();
            foreach (var currentAssociatedEmails in timelines.Select(t => t.associatedEmailAddresses))
            {
                foreach (var email in currentAssociatedEmails)
                {
                    allAssociatedEmailStrings.Add(email);
                }
            }

            var emailFilters = allAssociatedEmailStrings.Select(email => $"from/emailAddress/address eq '{email}'");
            var filter = string.Join(" or ", emailFilters);

            var result = await graphClient.Me.Messages.GetAsync((requestConfiguration) =>
            {
                requestConfiguration.QueryParameters.Filter = filter;
            });

            var groupedEmails = result.Value.GroupBy(msg => msg.Sender.EmailAddress.Address).
                ToDictionary(group => group.Key, group => group.ToList());

            for (int i = 0; i < timelines.Count(); i++)
            {
                var timeline = timelines[i];
                bool loopFlag = false;
                foreach (var email in timeline.associatedEmailAddresses)
                {
                    if (loopFlag) { break; }
                    if (groupedEmails.ContainsKey(email))
                    {
                        var messages = groupedEmails[email];
                        foreach (var msg in messages)
                        {
                            if (msg.IsRead == false)
                            {
                                timelines[i].hasUnreadEmails = true;
                                loopFlag = true;
                                break;
                            }
                        }
                    }
                }
            }


            var mailPage = await graphClient.Me
            .MailFolders["Inbox"]
            .Messages
            .GetAsync(config =>
            {
                config.Headers.Add("Prefer", $"outlook.timezone=\"{graphTimeZone}\"");
                config.QueryParameters.Select = new string[] { "sender" };
                config.QueryParameters.Orderby = new string[] { "receivedDateTime desc" };
            });

            allMessages = mailPage?.Value ?? new List<Message>();
            allSenders = new HashSet<string>(allMessages.Select(msg => msg.Sender.EmailAddress.Address));

            fetchingTimelines = false;
        }
        else
        {
            isRegistered = false;
        }

        fetchingTimelines = false;

    }
    public async void ShowEmails(ApplicationTimeline timeline)
    {
        emailsShowing = true;
        emailsShowingTimeline = timeline.timelineID;
        await GetAssociatedEmails(timeline);
    }

    public async Task GetAssociatedEmails(ApplicationTimeline timeline)
    {
        fetchingEmails = true;
        //List<Message>? fetchedEmails = new();
        List<string> allAssociatedEmailStrings = new();
        List<Message>? fetchedEmails = new();

        if (timeline.associatedEmailAddresses.Count() == 0)
        {
            selectedAssociatedEmails = new List<Message>();
            fetchingEmails = false;
            StateHasChanged();
            return;
        }

        foreach (var email in timeline.associatedEmailAddresses)
        {
            allAssociatedEmailStrings.Add(email);
        }

        var emailFilters = allAssociatedEmailStrings.Select(email => $"from/emailAddress/address eq '{email}'");
        var filter = string.Join(" or ", emailFilters);

        var result = await graphClient.Me.Messages.GetAsync((requestConfiguration) =>
        {
            requestConfiguration.QueryParameters.Filter = filter;
        });

        fetchedEmails = result?.Value;
        //selectedAssociatedEmails = fetchedEmails.OrderByDescending(m => m.ReceivedDateTime).ToList();
        if (fetchedEmails != null)
        {
            selectedAssociatedEmails = fetchedEmails.OrderByDescending(m => m.ReceivedDateTime).ToList();
        }

        fetchingEmails = false;
        StateHasChanged();
    }

    public async void RemoveEmail(string email, int timelineID)
    {
        var response = await backendApiService.removeEmail(email, Username, timelineID);


        if (response)
        {
            int index = timelines.FindIndex(tl => tl.timelineID == timelineID);

            timelines[index].associatedEmailAddresses.RemoveAll(e => e == email);
            StateHasChanged();

            var newTimeline = await backendApiService.getUserTimelineAsync(Username, timelineID);
            List<string?> allAssociatedEmailStrings = new();
            foreach (var emailString in newTimeline.associatedEmailAddresses)
            {
                allAssociatedEmailStrings.Add(emailString);
            }

            if (allAssociatedEmailStrings.Count() == 0)
            {
                if (index != -1)
                {
                    newTimeline.hasUnreadEmails = false;
                    timelines[index] = newTimeline;

                    StateHasChanged();
                }

            }
            else
            {
                var emailFilters = allAssociatedEmailStrings.Select(email => $"from/emailAddress/address eq '{email}'");
                var filter = string.Join(" or ", emailFilters);

                var result = await graphClient.Me.Messages.GetAsync((requestConfiguration) =>
                {
                    requestConfiguration.QueryParameters.Filter = filter;
                });

                var fetchedEmails = result?.Value;
                Console.WriteLine(fetchedEmails.Count());

                if (index != -1)
                {
                    newTimeline.hasUnreadEmails = fetchedEmails.Exists(msg => msg.IsRead.HasValue ? !msg.IsRead.Value : false);
                    timelines[index] = newTimeline;

                    StateHasChanged();
                }
            }
        }
    }


    public async void RemoveAssessment(Assessment assessment, int timelineID)
    {
        var response = await backendApiService.removeAssessment(assessment, Username, timelineID);

        if (response)
        {
            int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
            timelines[index].assessments.RemoveAll(a => a.date == assessment.date);
            StateHasChanged();
            var newTimeline = await backendApiService.getUserTimelineAsync(Username, timelineID);
            if (index != -1)
            {
                newTimeline.hasUnreadEmails = timelines[index].hasUnreadEmails;
                timelines[index] = newTimeline;
                StateHasChanged();
            }
        }

    }


    public async void CreateApplicant()
    {
        creatingApplicant = true;
        var response = await backendApiService.createApplicant(Username);

        if (response)
        {
            timelines = new List<ApplicationTimeline>();
            isRegistered = true;
            creatingApplicant = false;
            StateHasChanged();
        }

    }

    public async void UpdateAlertLevel(ApplicationTimeline timeline)
    {
        int index = timelines.FindIndex(tl => tl.timelineID == timeline.timelineID);
        int newLevel;
        int oldLevel = timelines[index].alertLevel;

        if (index != -1)
        {

            newLevel = (timelines[index].alertLevel + 1) % 2;
            timelines[index].alertLevel = newLevel;
            StateHasChanged();

            var response = await backendApiService.updateAlertLevel(timeline.timelineID, Username, newLevel);
            var newTimeline = await backendApiService.getUserTimelineAsync(Username, timeline.timelineID);

            if (newTimeline != null)
            {
                newTimeline.hasUnreadEmails = timelines[index].hasUnreadEmails;
                timelines[index] = newTimeline;
                HandleSortCriterionChange();
                StateHasChanged();
            }
            else if (!response)
            {
                timelines[index].alertLevel = oldLevel;
                StateHasChanged();
            }
        }
    }

    private async Task HandleStatusChange(ApplicationTimeline timeline, Assessment assessment, AssessmentStatus newStatus)
    {
        var response = await backendApiService.updateAssessmentStatus(assessment, Username, timeline.timelineID, newStatus);
        if (response)
        {
            int index = timelines.FindIndex(tl => tl.timelineID == timeline.timelineID);
            if (index != -1)
            {
                var assessments = timelines[index].assessments;
                int assessmentsIndex = assessments.FindIndex(a => a.date == assessment.date);
                assessments[assessmentsIndex].status = newStatus;
                StateHasChanged();
            }
        }

    }

    private void HandleSortCriterionChange()
    {
        switch (sortingCriterion)
        {
            case SortingCriteria.Date_Added:
                timelines.Sort((t1, t2) =>
                {
                    return t1.timelineID.CompareTo(t2.timelineID);
                }
                );
                break;

            case SortingCriteria.Starred:
                timelines.Sort((t1, t2) =>
                {
                    int heightComparison = t2.alertLevel.CompareTo(t1.alertLevel);
                    if (heightComparison != 0)
                        return heightComparison;
                    else
                        return t2.timelineID.CompareTo(t2.timelineID);
                });
                break;
        }
    }


    [CascadingParameter] IModalService ModalInputPopup { get; set; } = default!;

    private async Task ShowAddEmailModal(int timelineID)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ApplicationTracker.allSenders), allSenders);

        var inputPopupModal = ModalInputPopup.Show<InputPopup>("Passing Data", parameters);
        var result = await inputPopupModal.Result;

        if (result.Confirmed)
        {
            string newEmail = result.Data?.ToString();
            if (newEmail != "")
            {
                var response = await backendApiService.addEmail(newEmail, Username, timelineID);
                var filter = $"from/emailAddress/address eq '{newEmail}'";

                var emailsResponse = await graphClient.Me.Messages.GetAsync((requestConfiguration) =>
                {
                    requestConfiguration.QueryParameters.Filter = filter;
                });

                var fetchedEmails = emailsResponse?.Value;
                bool newHasUnread = fetchedEmails.Exists(msg => msg.IsRead.HasValue ? !msg.IsRead.Value : false);
                if (response)
                {
                    var newTimeline = await backendApiService.getUserTimelineAsync(Username, timelineID);
                    int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
                    if (index != -1)
                    {

                        newTimeline.hasUnreadEmails = timelines[index].hasUnreadEmails ? true : newHasUnread;
                        timelines[index] = newTimeline;
                        StateHasChanged();
                    }
                }

            }
        }
    }

    private async Task ShowAddTimelineModal()
    {
        var inputPopupModal = ModalInputPopup.Show<AddTimelinePopup>();
        var result = await inputPopupModal.Result;

        if (result.Confirmed)
        {
            TimelineBson? newTimelineBson = result.Data as TimelineBson;
            if (newTimelineBson != null)
            {
                int newTimelineID = await backendApiService.addTimeline(Username, newTimelineBson);
                if (newTimelineID != -1)
                {
                    try
                    {
                        ApplicationTimeline newTimeline = await backendApiService.getUserTimelineAsync(Username, newTimelineID);
                        timelines.Add(newTimeline);
                        StateHasChanged();
                    }
                    catch
                    {
                        ;
                    }
                }

            }

        }
    }

    private async Task ShowAddAssessmentModal(int timelineID)
    {
        var assessmentModal = ModalInputPopup.Show<AssessmentInputPopup>();
        var result = await assessmentModal.Result;

        if (result.Confirmed)
        {
            Assessment? newAssessment = result.Data as Assessment;
            if (newAssessment != null)
            {
                var response = await backendApiService.addAssessment(newAssessment, Username, timelineID);
                if (response)
                {
                    var newTimeline = await backendApiService.getUserTimelineAsync(Username, timelineID);
                    int index = timelines.FindIndex(tl => tl.timelineID == timelineID);
                    if (index != -1)
                    {
                        newTimeline.hasUnreadEmails = timelines[index].hasUnreadEmails;
                        timelines[index] = newTimeline;
                        StateHasChanged();
                    }
                }

            }
        }
    }

    private async Task ShowRemoveTimelineModal(int timelineID)
    {
        var removeTimelinePopup = ModalInputPopup.Show<RemoveTimelinePopup>();
        var result = await removeTimelinePopup.Result;

        if (result.Confirmed)
        {
            var response = await backendApiService.removeTimeline(Username, timelineID);
            if (response)
            {
                timelines = await backendApiService.getUserTimelinesAsync(Username);
                HandleSortCriterionChange();
                StateHasChanged();
            }
        }
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string? iso8601DateTime)
    {
        if (string.IsNullOrEmpty(iso8601DateTime))
        {
            return string.Empty;
        }

        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }


    }
