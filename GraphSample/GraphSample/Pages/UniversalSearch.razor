<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/search"
@using System.Security.Authentication
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using TimeZoneConverter
@using System
@using System.Text.Json;
@using Microsoft.Fast.Components.FluentUI

@inject GraphSample.Graph.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>

        <FluentSearch @bind-Value="searchValue" style="width:60%;" @oninput="HandleInput" @onkeypress="HandleKeyPress">

        </FluentSearch>

        <FluentListbox Size=7 TOption="string" Style="background-color:white; border-color:white" Height="200px" Width="60%">

            @foreach (var data in data_response)
            {
                <FluentOption Style="height:50px" Value="AL">
                    @if (data.App == "Outlook")
                    {
                        <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/outlook_32x1.svg"
                             width="32"
                             height="32"
                             alt="Outlook" />
                    }
                    else if (data.App == "Teams")
                    {
                        <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/teams_32x1.svg"
                             width="32"
                             height="32"
                             alt="Teams" />
                    }
                    else
                    {
                        <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/onedrive_32x1.svg"
                             width="32"
                             height="32"
                             alt="OneDrive" />
                    }

                    @data.Sender
                    @data.Title

                </FluentOption>
            }


        </FluentListbox>

        <br />
        <br />

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected string searchValue = string.Empty;
    protected string userPhoto = string.Empty;

    public class Author
    {
        public string Sender { get; }
        public string Title { get; }
        public string Url { get; }
        public string App { get; }

        public Author(string sender, string title, string webLink, string app)
        {
            Sender = sender;
            Title = title;
            Url = webLink;
            App = app;
        }
    }


    private GraphServiceClient? graphClient;
    private List<Author> data_response = new List<Author>();

    private void HandleInput(ChangeEventArgs e)
    {
        searchValue = e.Value.ToString();
        data_response.Clear();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // call the async function from here
            string searchTerm = searchValue;
            searchTerm += "*";


            await CallApiAsync(searchTerm);
            Console.WriteLine("Search value: " + searchTerm);

        }
    }

    protected async Task CallApiAsync(string searchTerm)
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();


        var requestBodyMail = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
        {
                            new SearchRequest
                            {
                                EntityTypes = new List<EntityType?>
            {
                                    EntityType.Message,
                                },
                                Query = new SearchQuery
                                {
                                    QueryString = "*amazon*" ,
                                },
                            },
                        },
        };

        var requestBodyTeams = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
        {
                            new SearchRequest
                            {
                                EntityTypes = new List<EntityType?>
            {
                                    EntityType.ChatMessage,
                                },
                                Query = new SearchQuery
                                {
                                    QueryString = searchTerm,
                                },
                            },
                        },
        };

        var requestBodyDrive = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
        {
                            new SearchRequest
                            {
                                EntityTypes = new List<EntityType?>
            {
                                    EntityType.DriveItem,
                                },
                                Query = new SearchQuery
                                {
                                    QueryString = searchTerm,
                                },
                            },
                        },
        };





        var batchRequestContent = new BatchRequestContent(graphClient);

        //var result = await graphClient.Search.Query.PostAsync(requestBody);
        var team = graphClient.Search.Query.ToPostRequestInformation(requestBodyTeams);
        var mail = graphClient.Search.Query.ToPostRequestInformation(requestBodyMail);
        var drive = graphClient.Search.Query.ToPostRequestInformation(requestBodyDrive);



        var teamId = await batchRequestContent.AddBatchRequestStepAsync(team);
        var mailId = await batchRequestContent.AddBatchRequestStepAsync(mail);
        var driveId = await batchRequestContent.AddBatchRequestStepAsync(drive);

        var returnedResponse = await graphClient.Batch.PostAsync(batchRequestContent);


        // teams code
        try
        {


            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(teamId);
            // check for hits is 0 or not then it is empty
            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in Teams");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement fromMessage = (JsonElement)searchItems["from"];
                string teamName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();

                data_response.Add(new Author(teamName, user1.Value[0].HitsContainers[0].Hits[0].Summary, searchItems["webLink"].ToString(), "Teams"));
            }


        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Get user failed");
        }

        // mail code
        try
        {
            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(mailId);

            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in Mail");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement fromMessage = (JsonElement)searchItems["from"];
                string messageName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();

                data_response.Add(new Author(messageName, searchItems?["subject"].ToString(), searchItems["webLink"].ToString(), "Outlook"));
            }


        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Get user failed");
        }

        // drive code
        try
        {
            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(driveId);

            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in OneDrive");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement lastModifiedBy = (JsonElement)searchItems["lastModifiedBy"];
                string oneDriveCreator = lastModifiedBy.GetProperty("user").GetProperty("displayName").GetString();

                data_response.Add(new Author(oneDriveCreator, searchItems?["name"].ToString(), searchItems["webUrl"].ToString(), "OneDrive"));
            }

        }

        catch (ServiceException ex)
        {
            Console.WriteLine($"Get user failed");
        }


        // Check if size of list is empty, then add Null Author
        // Then in Razor page check for Null and render "Not find"

        //var returnedResponse = await graphClient.Batch.PostAsync(batchRequestContent);

        //var searchItems = result?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;


        //JsonElement fromMessage = (JsonElement)searchItems["from"];
        //string messageName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();
        //var teamsTitle = result?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Summary;

        //JsonElement lastModifiedBy = (JsonElement)searchItems["lastModifiedBy"];
        //string oneDriveCreator = lastModifiedBy.GetProperty("user").GetProperty("displayName").GetString();


        //data_response.Add(new Author(searchItems?["subject"].ToString(), messageName, searchItems["webLink"].ToString()));
    }
}

