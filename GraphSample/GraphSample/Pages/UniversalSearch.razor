<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT license. -->

@page "/UniversalSearch"

@inject GraphSample.Graph.GraphClientFactory clientFactory

<style>
    .dropdown {
        position: relative;

    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f6f6f6;
        max-height: 300px;
        overflow: scroll;
        border: 1px solid #ddd;
        z-index: 10;
        max-width: 28%;
    }

    .dropdown-content FluentOption {
        background-color: #ddd;
        width:98%;
    }


</style>

<AuthorizeView>
    <Authorized>

        <div class="search-container">

            <FluentSearch @bind-Value="searchValue" class="dropdown" @oninput="HandleInput" @onkeypress="HandleKeyPress">

            </FluentSearch>

            <FluentListbox Size=7 TOption="string" class="dropdown-content" style="@DropDownStyle" Height="200px">


                @foreach (var data in data_response)
                {
                    <FluentOption Style="height:100px" Value="AL">
                        @if (data.App == "Outlook")
                        {
                            <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/outlook_32x1.svg"
                                 width="32"
                                 height="32"
                                 alt="Outlook" />
                        }
                        else if (data.App == "Teams")
                        {
                            <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/teams_32x1.svg"
                                 width="32"
                                 height="32"
                                 alt="Teams" />
                        }
                        else
                        {
                            <img src="https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/brand-icons/product/svg/onedrive_32x1.svg"
                                 width="32"
                                 height="32"
                                 alt="OneDrive" />
                        }

                        @data.Sender
                        @data.Title

                    </FluentOption>
                }


            </FluentListbox>


        </div>

        <br />
        <br />

    </Authorized>

    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected string searchValue = string.Empty;
    protected string userPhoto = string.Empty;
    bool isDropdownVisible = false;
    protected string DropDownStyle = string.Empty;
    protected bool isSearching = false;

    protected void ToggleDropdown()
    {
        isDropdownVisible = !isDropdownVisible;
        if (isDropdownVisible)
        {
            DropDownStyle = "display: block;";
        }

        else
        {
            DropDownStyle = "display: none;";

        }
    }

    public class Author
    {
        public string Sender { get; }
        public string Title { get; }
        public string Url { get; }
        public string App { get; }

        public Author(string sender, string title, string webLink, string app)
        {
            Sender = sender;
            Title = title;
            Url = webLink;
            App = app;
        }
    }


    private GraphServiceClient? graphClient;
    private List<Author> data_response = new List<Author>();

    // Use style no for handle input
    // use style yes for entering
    // only use no when string is empty or null

    private void HandleInput(ChangeEventArgs e)
    {
        searchValue = e.Value.ToString();
        data_response.Clear();
        if (String.IsNullOrEmpty(searchValue))
        {
            ToggleDropdown();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && (isSearching==false))
        {
            // call the async function from here
            string searchTerm = searchValue;
            searchTerm += "*";
            isSearching = true;
            await CallApiAsync(searchTerm);
            ToggleDropdown();
            Console.WriteLine("Search value: " + searchTerm);
            isSearching = false;

        }
    }

    protected async Task CallApiAsync(string searchTerm)
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(
                "Unable to access authentication state");
        }

        // Get the user
        var user = (await authenticationStateTask).User;

        graphClient = clientFactory.GetAuthenticatedClient();


        var requestBodyMail = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
    {
        new SearchRequest
        {
            EntityTypes = new List<EntityType?>
            {
                EntityType.Message,
            },
            Query = new SearchQuery
            {
                QueryString = searchTerm,
            },
        },
    },
        };


        var requestBodyTeams = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
    {
                            new SearchRequest
                            {
                                EntityTypes = new List<EntityType?>
        {
                                    EntityType.ChatMessage,
                                },
                                Query = new SearchQuery
                                {
                                    QueryString = searchTerm,
                                },
                            },
                        },
        };

        var requestBodyDrive = new Microsoft.Graph.Search.Query.QueryPostRequestBody
        {
            Requests = new List<SearchRequest>
    {
                            new SearchRequest
                            {
                                EntityTypes = new List<EntityType?>
        {
                                    EntityType.DriveItem,
                                },
                                Query = new SearchQuery
                                {
                                    QueryString = searchTerm,
                                },
                            },
                        },
        };





        var batchRequestContent = new BatchRequestContent(graphClient);

        //var result = await graphClient.Search.Query.PostAsync(requestBody);
        var team = graphClient.Search.Query.ToPostRequestInformation(requestBodyTeams);
        var mail = graphClient.Search.Query.ToPostRequestInformation(requestBodyMail);
        var drive = graphClient.Search.Query.ToPostRequestInformation(requestBodyDrive);

        var teamId = await batchRequestContent.AddBatchRequestStepAsync(team);
        var mailId = await batchRequestContent.AddBatchRequestStepAsync(mail);
        var driveId = await batchRequestContent.AddBatchRequestStepAsync(drive);

        var returnedResponse = await graphClient.Batch.PostAsync(batchRequestContent);


        // teams code
        try
        {


            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(teamId);
            // check for hits is 0 or not then it is empty
            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in Teams");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement fromMessage = (JsonElement)searchItems["from"];
                string teamName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();

                data_response.Add(new Author(teamName, user1.Value[0].HitsContainers[0].Hits[0].Summary, searchItems["webLink"].ToString(), "Teams"));
            }


        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Get Teams failed");
        }

        // mail code
        try
        {
            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(mailId);

            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in Mail");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement fromMessage = (JsonElement)searchItems["from"];
                string messageName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();

                data_response.Add(new Author(messageName, searchItems?["subject"].ToString(), searchItems["webLink"].ToString(), "Outlook"));
            }


        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Get Mail Failed");
            Console.WriteLine(ex);
        }

        // drive code
        try
        {
            var user1 = await returnedResponse.GetResponseByIdAsync<Microsoft.Graph.Search.Query.QueryResponse>(driveId);

            if (user1?.Value?[0]?.HitsContainers?[0]?.Total == 0)
            {
                Console.WriteLine("Nothing found in OneDrive");
            }

            else
            {
                var searchItems = user1?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;

                JsonElement lastModifiedBy = (JsonElement)searchItems["lastModifiedBy"];
                string oneDriveCreator = lastModifiedBy.GetProperty("user").GetProperty("displayName").GetString();

                data_response.Add(new Author(oneDriveCreator, searchItems?["name"].ToString(), searchItems["webUrl"].ToString(), "OneDrive"));
            }

        }

        catch (ServiceException ex)
        {
            Console.WriteLine($"Get OneDrive");
        }


        // Check if size of list is empty, then add Null Author
        // Then in Razor page check for Null and render "Not find"

        //var returnedResponse = await graphClient.Batch.PostAsync(batchRequestContent);

        //var searchItems = result?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Resource?.AdditionalData;


        //JsonElement fromMessage = (JsonElement)searchItems["from"];
        //string messageName = fromMessage.GetProperty("emailAddress").GetProperty("name").GetString();
        //var teamsTitle = result?.Value?[0]?.HitsContainers?[0]?.Hits?[0]?.Summary;

        //JsonElement lastModifiedBy = (JsonElement)searchItems["lastModifiedBy"];
        //string oneDriveCreator = lastModifiedBy.GetProperty("user").GetProperty("displayName").GetString();


        //data_response.Add(new Author(searchItems?["subject"].ToString(), messageName, searchItems["webLink"].ToString()));
    }
}

