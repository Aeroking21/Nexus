import { Behavior, FASTElement, PartialFASTElementDefinition } from "@microsoft/fast-element";
import type { CSSCustomPropertyDefinition, CSSCustomPropertyTarget } from "../custom-properties/index";
import { CustomPropertyManager, CustomPropertyManagerClient } from "../custom-properties/manager";
import type { DecoratorDesignSystemPropertyConfiguration } from "./design-system-property";
/**
 * Defines a structure that consumes from a DesignSystemProvider
 * @public
 */
export interface DesignSystemConsumer {
    provider: DesignSystemProvider | null;
}
/**
 * Determines if the element is {@link DesignSystemConsumer}
 * @param element - the element to test.
 * @public
 */
export declare function isDesignSystemConsumer(element: HTMLElement | DesignSystemConsumer): element is DesignSystemConsumer;
/**
 * Behavior to connect a {@link DesignSystemConsumer} to the nearest {@link DesignSystemProvider}
 * @public
 */
export declare const designSystemConsumerBehavior: Behavior;
/**
 * A element to provide Design System values to consumers via CSS custom properties
 * and to resolve recipe values.
 *
 * @public
 */
export declare class DesignSystemProvider extends FASTElement implements CSSCustomPropertyTarget, DesignSystemConsumer, CustomPropertyManagerClient {
    /**
     * Stores a list of all element tag-names that associated
     * to design-system-providers
     */
    private static _tagNames;
    /**
     * Read all tag-names that are associated to
     * design-system-providers
     *
     * @public
     */
    static get tagNames(): string[];
    /**
     * Determines if an element is a DesignSystemProvider
     * @param el - The element to test
     *
     * @public
     */
    static isDesignSystemProvider(el: HTMLElement | DesignSystemProvider): el is DesignSystemProvider;
    /**
     * Finds the closest design-system-provider
     * to an element.
     *
     * @param el - The element from which to begin searching.
     * @public
     */
    static findProvider(el: HTMLElement & Partial<DesignSystemConsumer>): DesignSystemProvider | null;
    /**
     * Registers a tag-name to be associated with
     * the design-system-provider class. All tag-names for DesignSystemProvider elements
     * must be registered for proper property resolution.
     *
     * @param tagName - the HTML Element tag name to register as a DesignSystemProvider.
     *
     * @public
     */
    static registerTagName(tagName: string): void;
    /**
     * Allows other components to identify this as a provider.
     * Using instanceof DesignSystemProvider did not seem to work.
     *
     * @public
     */
    readonly isDesignSystemProvider = true;
    /**
     * The design-system object.
     * This is "observable" but will notify on object mutation
     * instead of object assignment
     *
     * @public
     */
    designSystem: {};
    /**
     * Applies the default design-system values to the instance where properties
     * are not explicitly assigned. This is generally used to set the root design
     * system context.
     *
     * @public
     * @remarks
     * HTML Attribute: use-defaults
     */
    useDefaults: boolean;
    private useDefaultsChanged;
    /**
     * The parent provider the the DesignSystemProvider instance.
     * @public
     */
    provider: DesignSystemProvider | null;
    private providerChanged;
    /**
     * A reference to the object that manages the CSS custom properties
     * the DesignSystemProvider depends on.
     */
    customPropertyManager: CustomPropertyManager;
    private customPropertyManagerChanged;
    /**
     * Stores all CSSCustomPropertyDefinitions registered with the provider.
     * @internal
     *
     */
    cssCustomPropertyDefinitions: Map<string, CSSCustomPropertyDefinition>;
    /**
     * Track all design system property names so we can react to changes
     * in those properties. Do not initialize or it will clobber value stored
     * by the decorator.
     *
     * @internal
     */
    designSystemProperties: {
        [propertyName: string]: Required<Pick<DecoratorDesignSystemPropertyConfiguration, "cssCustomProperty" | "default">>;
    };
    /**
     * Allows CSSCustomPropertyDefinitions to register on this element *before* the constructor
     * has run and the registration APIs exist. This can manifest when the DOM
     * is parsed (and custom element tags exist in the DOM) before the script defining the custom elements
     * is parsed, and when the elements using the CSSCustomPropertyBehaviors
     * are defined before this DesignSystemProvider.
     *
     * @public
     * @deprecated - use disconnectedRegistry
     */
    disconnectedCSSCustomPropertyRegistry?: CSSCustomPropertyDefinition[];
    /**
     * Allows arbitrary registration to the provider before the constructor runs.
     * When the constructor runs, all registration functions in the disconnectedRegistry
     * will be invoked with the provider instance.
     *
     * @public
     */
    disconnectedRegistry?: Array<(provider: DesignSystemProvider) => void> | void;
    /**
     * Handle changes to design-system-provider IDL and content attributes
     * that reflect to design-system properties.
     */
    private attributeChangeHandler;
    /**
     * Handle changes to the local design-system property.
     */
    private localDesignSystemChangeHandler;
    /**
     * Handle changes to the upstream design-system provider
     */
    private providerDesignSystemChangeHandler;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Register a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} with the DeignSystemProvider.
     * Registering a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} will create the CSS custom property.
     *
     * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    registerCSSCustomProperty(def: CSSCustomPropertyDefinition): void;
    /**
     * Unregister a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} from the DeignSystemProvider.
     * If all registrations of the definition are unregistered, the CSS custom property will be removed.
     *
     * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    unregisterCSSCustomProperty(def: CSSCustomPropertyDefinition): void;
    /**
     * Evaluates a CSSCustomPropertyDefinition with the current design system.
     *
     * @public
     */
    evaluate(definition: CSSCustomPropertyDefinition): string;
    /**
     * Synchronize the provider's design system with the local
     * overrides. Any value defined on the instance will take priority
     * over the value defined by the provider
     */
    private syncDesignSystemWithProvider;
    private isValidDesignSystemValue;
}
/**
 * Defines a design-system-provider custom element, registering the tag-name so that the element can be property resolved by {@link DesignSystemConsumer | DesignSystemConsumers}.
 *
 * @param nameOrDef - the name or {@link @microsoft/fast-element#PartialFASTElementDefinition | element definition}
 * @public
 */
export declare function defineDesignSystemProvider(nameOrDef: string | PartialFASTElementDefinition): <T extends typeof DesignSystemProvider>(providerCtor: T) => void;
/**
 * @internal
 * @deprecated - use {@link defineDesignSystemProvider}
 */
export declare const designSystemProvider: typeof defineDesignSystemProvider;
