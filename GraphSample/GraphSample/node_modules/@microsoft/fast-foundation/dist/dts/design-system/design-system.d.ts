import { Constructable, PartialFASTElementDefinition } from "@microsoft/fast-element";
import { Container, InterfaceSymbol } from "../di/di";
/**
 * Defines an element within the context of a design system.
 * @alpha
 */
export declare type ContextualElementDefinition = Omit<PartialFASTElementDefinition, "name">;
/**
 * The design system context in which an element can be defined.
 * @alpha
 */
export interface ElementDefinitionContext {
    readonly name: string;
    readonly type: Constructable;
    readonly container: Container;
    readonly willDefine: boolean;
    defineElement(definition?: ContextualElementDefinition): void;
    tagFor(type: Constructable): string;
}
/**
 * The callback type that is invoked when an element can be defined by a design system.
 * @alpha
 */
export declare type ElementDefinitionCallback = (ctx: ElementDefinitionContext) => void;
/**
 * Design system contextual APIs and configuration usable within component
 * registries.
 * @alpha
 */
export interface DesignSystemRegistrationContext {
    readonly elementPrefix: string;
    tryDefineElement(name: string, type: Constructable, callback: ElementDefinitionCallback): any;
}
/**
 * @alpha
 */
export declare const DesignSystemRegistrationContext: InterfaceSymbol<DesignSystemRegistrationContext>;
/**
 * The callback type that is invoked when two elements are trying to define themselves with
 * the same name.
 * @alpha
 */
export declare type ElementDisambiguationCallback = (nameAttempt: string, typeAttempt: Constructable, existingType: Constructable) => string | null;
/**
 * @alpha
 */
export declare class DesignSystem {
    private registrations;
    private prefix;
    private disambiguate;
    withPrefix(prefix: string): this;
    withElementDisambiguation(callback: ElementDisambiguationCallback): this;
    register(...params: any[]): this;
    applyTo(element: HTMLElement): Container;
}
