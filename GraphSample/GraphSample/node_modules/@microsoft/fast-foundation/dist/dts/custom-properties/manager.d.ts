import { ElementStyles, FASTElement } from "@microsoft/fast-element";
import type { CSSCustomPropertyDefinition } from "./behavior";
/**
 * Defines the interface of an HTMLElement that can be used
 * with a {@link CustomPropertyManager}.
 *
 * @public
 */
export interface CustomPropertyManagerClient extends FASTElement, HTMLElement {
    /**
     * All registered CSSCustomPropertyDefinitions.
     */
    cssCustomPropertyDefinitions: Map<string, CSSCustomPropertyDefinition>;
    /**
     * Evaluates a custom property definition
     * @param definition - The definition to evaluate
     */
    evaluate(definition: CSSCustomPropertyDefinition): string;
}
/**
 * Describes the interface for custom property management object used by the {@link CustomPropertyManagerClient}
 * to manage CSS custom properties.
 *
 * The managers role is to attach a stylesheet to the CustomPropertyManagerClient instance
 * and to write CSS custom properties to that stylesheet instance when required by the
 * CustomPropertyManagerTarget.
 *
 * @public
 */
export interface CustomPropertyManager {
    /**
     * The CustomPropertyManagerTarget responsible for evaluating CSSCustomPropertyDefinitions
     */
    readonly owner: CustomPropertyManagerClient | null;
    /**
     * Register and write a CSSCustomPropertyDefinition
     * @param definition - The definition to register
     */
    register(definition: CSSCustomPropertyDefinition): void;
    /**
     * Unregister a CSSCustomPropertyDefinition by name. If there are no other
     * registrations, the CSS custom property will be removed.
     * @param name - The name of the custom property definition to unregister
     */
    unregister(name: string): void;
    /**
     * Write a CSSCustomPropertyDefinition without registering it
     * @param definition - The definition to write
     */
    set(definition: CSSCustomPropertyDefinition): void;
    /**
     * Removes a CSSCustomPropertyDefinition
     * @param name - The name of the property
     */
    remove(name: string): void;
    /**
     * Sets all CSSCustomPropertyDefinitions that have been registered
     */
    setAll(): void;
    /**
     * Subscribe a CustomPropertyManagerTarget instances to the manager.
     * @param provider - The CustomPropertyManagerTarget to subscribe
     */
    subscribe?(provider: CustomPropertyManagerClient): void;
    /**
     * Unsubscribe a CustomPropertyManagerTarget instance from the manager.
     * @param provider - The CustomPropertyManagerTarget to unsubscribe.
     */
    unsubscribe?(provider: CustomPropertyManagerClient): void;
    /**
     * Return whether the CustomPropertyManagerTarget instances is subscribed.
     */
    isSubscribed?(provider: CustomPropertyManagerClient): boolean;
}
declare abstract class CustomPropertyManagerBase implements CustomPropertyManager {
    /**
     * A queue of additions and deletions. Operations will be queued when customPropertyTarget is null
     */
    protected queue: Set<Function>;
    /**
     * The CSSStyleDeclaration to which all CSS custom properties are written
     */
    protected abstract customPropertyTarget: CSSStyleDeclaration | null;
    /**
     * {@inheritdoc CustomPropertyManager.owner}
     */
    get owner(): CustomPropertyManagerClient | null;
    /**
     * The private settable owner
     */
    protected _owner: CustomPropertyManagerClient | null;
    /**
     * Tracks state of rAF to only invoke property writes once per animation frame
     */
    private ticking;
    /**
     * Stores all CSSCustomPropertyDefinitions registered with the provider.
     */
    private cssCustomPropertyDefinitions;
    /**
     * {@inheritdoc CustomPropertyManager.register}
     */
    register(def: CSSCustomPropertyDefinition): void;
    /**
     * {@inheritdoc CustomPropertyManager.unregister}
     */
    unregister(name: string): void;
    /**
     * {@inheritdoc CustomPropertyManager.set}
     */
    set(definition: CSSCustomPropertyDefinition): void;
    /**
     * Removes a CSS custom property from the provider.
     * @param name - the name of the property to remove
     */
    remove(name: string): void;
    /**
     * {@inheritdoc CustomPropertyManager.setAll}
     */
    setAll(): void;
}
/**
 * An implementation of {@link CustomPropertyManager} that uses the constructable CSSStyleSheet object.
 * This implementation supports multiple CustomPropertyManagerTarget subscriptions.
 *
 * @public
 */
export declare class ConstructableStylesCustomPropertyManager extends CustomPropertyManagerBase {
    protected readonly sheet: CSSStyleSheet;
    protected styles: ElementStyles;
    protected customPropertyTarget: CSSStyleDeclaration;
    private subscribers;
    constructor(sheet: CSSStyleSheet);
    /**
     * {@inheritdoc CustomPropertyManager.subscribe}
     */
    subscribe(client: CustomPropertyManagerClient): void;
    /**
     * {@inheritdoc CustomPropertyManager.unsubscribe}
     */
    unsubscribe(client: CustomPropertyManagerClient): void;
    /**
     * {@inheritdoc CustomPropertyManager.isSubscribed}
     */
    isSubscribed(client: CustomPropertyManagerClient): boolean;
}
/**
 * An implementation of {@link CustomPropertyManager} that uses the HTMLStyleElement. This implementation
 * does not support multiple CustomPropertyManagerTarget subscriptions.
 *
 * @public
 */
export declare class StyleElementCustomPropertyManager extends CustomPropertyManagerBase {
    private _sheet;
    get sheet(): CSSStyleSheet | null;
    protected customPropertyTarget: CSSStyleDeclaration;
    private customPropertyTargetChanged;
    readonly styles: HTMLStyleElement;
    constructor(style: HTMLStyleElement, client: CustomPropertyManagerClient);
    private handleConnection;
}
export {};
