import { AttributeConfiguration } from '@microsoft/fast-element';
import { Behavior } from '@microsoft/fast-element';
import { ComposableStyles } from '@microsoft/fast-element';
import { Constructable } from '@microsoft/fast-element';
import { CSSDirective } from '@microsoft/fast-element';
import { DecoratorAttributeConfiguration } from '@microsoft/fast-element';
import { Direction } from '@microsoft/fast-web-utilities';
import { ElementStyles } from '@microsoft/fast-element';
import { ElementViewTemplate } from '@microsoft/fast-element';
import { FASTElement } from '@microsoft/fast-element';
import { Orientation } from '@microsoft/fast-web-utilities';
import { PartialFASTElementDefinition } from '@microsoft/fast-element';
import { ViewTemplate } from '@microsoft/fast-element';

/**
 * An Accordion Custom HTML Element
 * Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.
 * @public
 *
 * @remarks
 * Designed to be used with {@link @microsoft/fast-foundation#AccordionTemplate} and {@link @microsoft/fast-foundation#(AccordionItem:class)}.
 */
export declare class Accordion extends FASTElement {
    /**
     * Controls the expand mode of the Accordion, either allowing
     * single or multiple item expansion.
     * @public
     *
     * @remarks
     * HTML attribute: expand-mode
     */
    expandmode: AccordionExpandMode;
    /**
     * @internal
     */
    accordionItems: HTMLElement[];
    /**
     * @internal
     */
    accordionItemsChanged(oldValue: any, newValue: any): void;
    private activeid;
    private activeItemIndex;
    private accordionIds;
    private change;
    private setItems;
    private resetItems;
    private removeItemListeners;
    private activeItemChange;
    private getItemIds;
    private isSingleExpandMode;
    private handleItemKeyDown;
    private handleItemFocus;
    private adjust;
    private focusItem;
}

/**
 * Expand mode for {@link Accordion}
 * @public
 */
export declare enum AccordionExpandMode {
    /**
     * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.
     */
    single = "single",
    /**
     * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.
     */
    multi = "multi"
}

/**
 * An individual item in an {@link @microsoft/fast-foundation#(Accordion:class) }.
 * @public
 */
export declare class AccordionItem extends FASTElement {
    /**
     * Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the
     * heading element.
     *
     * @defaultValue 2
     * @public
     * @remarks
     * HTML attribute: heading-level
     */
    headinglevel: 1 | 2 | 3 | 4 | 5 | 6;
    /**
     * Expands or collapses the item.
     *
     * @public
     * @remarks
     * HTML attribute: expanded
     */
    expanded: boolean;
    /**
     * The item ID
     *
     * @public
     * @remarks
     * HTML Attribute: id
     */
    id: string;
    /**
     * @internal
     */
    expandbutton: HTMLElement;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
    private change;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface AccordionItem extends StartEnd {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(AccordionItem:class)} component.
 * @public
 */
export declare const AccordionItemTemplate: ViewTemplate<AccordionItem>;

/**
 * The template for the {@link @microsoft/fast-foundation#Accordion} component.
 * @public
 */
export declare const AccordionTemplate: ViewTemplate<Accordion>;

/**
 * @alpha
 */
export declare const all: (key: any, searchAncestors?: boolean | undefined) => ReturnType<typeof DI.inject>;

/**
 * An Anchor Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element }.
 *
 * @public
 */
export declare class Anchor extends FASTElement {
    /**
     * Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: download
     */
    download: string;
    /**
     * The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: href
     */
    href: string;
    /**
     * Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: hreflang
     */
    hreflang: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: ping
     */
    ping: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: referrerpolicy
     */
    referrerpolicy: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: rel
     */
    rel: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: target
     */
    target: "_self" | "_blank" | "_parent" | "_top";
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: string;
    /**
     *
     * Default slotted content
     *
     * @internal
     */
    defaultSlottedContent: HTMLElement[];
    /**
     * References the root element
     */
    control: HTMLAnchorElement;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Anchor extends StartEnd, DelegatesARIALink {
}

/**
 * An anchored region Custom HTML Element.
 *
 * @beta
 */
export declare class AnchoredRegion extends FASTElement {
    /**
     * The HTML ID of the anchor element this region is positioned relative to
     *
     * @beta
     * @remarks
     * HTML Attribute: anchor
     */
    anchor: string;
    private anchorChanged;
    /**
     * The HTML ID of the viewport element this region is positioned relative to
     *
     * @beta
     * @remarks
     * HTML Attribute: anchor
     */
    viewport: string;
    private viewportChanged;
    /**
     * Sets what logic the component uses to determine horizontal placement.
     * 'locktodefault' forces the default position
     * 'dynamic' decides placement based on available space
     * 'uncontrolled' does not control placement on the horizontal axis
     *
     * @beta
     * @remarks
     * HTML Attribute: horizontal-positioning-mode
     */
    horizontalPositioningMode: AxisPositioningMode;
    private horizontalPositioningModeChanged;
    /**
     * The default horizontal position of the region relative to the anchor element
     *
     * @beta
     * @remarks
     * HTML Attribute: horizontal-default-position
     */
    horizontalDefaultPosition: HorizontalPosition;
    private horizontalDefaultPositionChanged;
    /**
     * Whether the region overlaps the anchor on the horizontal axis
     *
     * @beta
     * @remarks
     * HTML Attribute: horizontal-inset
     */
    horizontalInset: boolean;
    private horizontalInsetChanged;
    /**
     * How narrow the space allocated to the default position has to be before the widest area
     * is selected for layout
     *
     * @beta
     * @remarks
     * HTML Attribute: horizontal-threshold
     */
    horizontalThreshold: number;
    private horizontalThresholdChanged;
    /**
     * Defines how the width of the region is calculated
     *
     * @beta
     * @remarks
     * HTML Attribute: horizontal-scaling
     */
    horizontalScaling: AxisScalingMode;
    private horizontalScalingChanged;
    /**
     * Sets what logic the component uses to determine vertical placement.
     * 'locktodefault' forces the default position
     * 'dynamic' decides placement based on available space
     * 'uncontrolled' does not control placement on the vertical axis
     *
     * @beta
     * @remarks
     * HTML Attribute: vertical-positioning-mode
     */
    verticalPositioningMode: AxisPositioningMode;
    private verticalPositioningModeChanged;
    /**
     * The default vertical position of the region relative to the anchor element
     *
     * @beta
     * @remarks
     * HTML Attribute: vertical-default-position
     */
    verticalDefaultPosition: VerticalPosition;
    private verticalDefaultPositionChanged;
    /**
     * Whether the region overlaps the anchor on the vertical axis
     *
     * @beta
     * @remarks
     * HTML Attribute: vertical-inset
     */
    verticalInset: boolean;
    private verticalInsetChanged;
    /**
     * How short the space allocated to the default position has to be before the tallest area
     * is selected for layout
     *
     * @beta
     * @remarks
     * HTML Attribute: vertical-threshold
     */
    verticalThreshold: number;
    private verticalThresholdChanged;
    /**
     * Defines how the height of the region is calculated
     *
     * @beta
     * @remarks
     * HTML Attribute: vertical-scaling
     */
    verticalScaling: AxisScalingMode;
    private verticalScalingChanged;
    /**
     * Whether the region is positioned using css "position: fixed".
     * Otherwise the region uses "position: absolute".
     * Fixed placement allows the region to break out of parent containers,
     *
     * @beta
     * @remarks
     * HTML Attribute: fixed-placement
     */
    fixedPlacement: boolean;
    private fixedPlacementChanged;
    /**
     *
     *
     * @beta
     * @remarks
     * HTML Attribute: auto-update-mode
     */
    autoUpdateMode: AutoUpdateMode;
    private autoUpdateModeChanged;
    /**
     * The HTML element being used as the anchor
     *
     * @beta
     */
    anchorElement: HTMLElement | null;
    private anchorElementChanged;
    /**
     * The HTML element being used as the viewport
     *
     * @beta
     */
    viewportElement: HTMLElement | null;
    private viewportElementChanged;
    /**
     * indicates that an initial positioning pass on layout has completed
     *
     * @internal
     */
    initialLayoutComplete: boolean;
    /**
     * indicates the current horizontal position of the region
     */
    verticalPosition: AnchoredRegionVerticalPositionLabel;
    /**
     * indicates the current vertical position of the region
     */
    horizontalPosition: AnchoredRegionHorizontalPositionLabel;
    /**
     * values to be applied to the component's positioning attributes on render
     */
    private regionTop;
    private regionRight;
    private regionBottom;
    private regionLeft;
    /**
     * the span in pixels of the selected position on each axis
     */
    private regionWidth;
    private regionHeight;
    private containingBlockWidth;
    private containingBlockHeight;
    private xTransformOrigin;
    private yTransformOrigin;
    private resizeDetector;
    private viewportRect;
    private anchorRect;
    private regionRect;
    private regionDimension;
    private anchorTop;
    private anchorRight;
    private anchorBottom;
    private anchorLeft;
    private anchorHeight;
    private anchorWidth;
    /**
     * base offsets between the positioner's base position and the anchor's
     */
    private baseHorizontalOffset;
    private baseVerticalOffset;
    private pendingPositioningUpdate;
    private pendingLayoutUpdate;
    private pendingReset;
    private currentDirection;
    private regionVisible;
    private updateThreshold;
    private static intersectionService;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    adoptedCallback(): void;
    /**
     * update position
     */
    update: () => void;
    /**
     * Public function to enable authors to update the layout based on changes in anchor offset without resorting
     * to a more epensive update call
     */
    updateAnchorOffset: (horizontalOffsetDelta: number, verticalOffsetDelta: number) => void;
    /**
     * destroys the instance's resize observer
     */
    private disconnectResizeDetector;
    /**
     * initializes the instance's resize observer
     */
    private initializeResizeDetector;
    /**
     * react to attribute changes that don't require a reset
     */
    private updateForAttributeChange;
    /**
     * fully initializes the component
     */
    private initialize;
    /**
     * Request a layout update if there are currently no open requests
     */
    private requestLayoutUpdate;
    /**
     * Request a reset if there are currently no open requests
     */
    private requestReset;
    /**
     * sets the starting configuration for component internal values
     */
    private setInitialState;
    /**
     * starts observers
     */
    private startObservers;
    /**
     * get position updates
     */
    private requestPositionUpdates;
    /**
     * stops observers
     */
    private stopObservers;
    /**
     * Gets the viewport element by id, or defaults to document root
     */
    private getViewport;
    /**
     *  Gets the anchor element by id
     */
    private getAnchor;
    /**
     *  Handle intersections
     */
    private handleIntersection;
    /**
     *  iterate through intersection entries and apply data
     */
    private applyIntersectionEntries;
    /**
     *  compare rects to see if there is enough change to justify a DOM update
     */
    private isRectDifferent;
    /**
     *  Update data based on anchor intersections
     */
    private handleAnchorIntersection;
    /**
     *  Update data based on positioner intersections
     */
    private handleRegionIntersection;
    /**
     *  Handle resize events
     */
    private handleResize;
    /**
     * resets the component
     */
    private reset;
    /**
     *  Recalculate layout related state values
     */
    private updateLayout;
    /**
     *  Updates the style string applied to the region element as well as the css classes attached
     *  to the root element
     */
    private updateRegionStyle;
    /**
     * Get horizontal positioning state based on desired position
     */
    private setHorizontalPosition;
    /**
     * Get vertical positioning state based on desired position
     */
    private setVerticalPosition;
    /**
     *  Update the offset values
     */
    private updateRegionOffset;
    /**
     *  Get available Horizontal positions based on positioning mode
     */
    private getHorizontalPositioningOptions;
    /**
     * Get available Vertical positions based on positioning mode
     */
    private getVerticalPositioningOptions;
    /**
     *  Get the width available for a particular horizontal position
     */
    private getAvailableWidth;
    /**
     *  Get the height available for a particular vertical position
     */
    private getAvailableHeight;
    /**
     * Get region dimensions
     */
    private getNextRegionDimension;
    /**
     * starts event listeners that can trigger auto updating
     */
    private startAutoUpdateEventListeners;
    /**
     * stops event listeners that can trigger auto updating
     */
    private stopAutoUpdateEventListeners;
}

/**
 * describes the possible horizontal positions of the region relative
 * to its anchor
 *
 * @internal
 */
declare type AnchoredRegionHorizontalPositionLabel = "left" | "insetLeft" | "insetRight" | "right" | "undefined";

/**
 * The template for the {@link @microsoft/fast-foundation#(AnchoredRegion:class)} component.
 * @beta
 */
export declare const AnchoredRegionTemplate: ViewTemplate<AnchoredRegion>;

/**
 * describes the possible vertical positions of the region relative
 * to its anchor
 *
 * @internal
 */
declare type AnchoredRegionVerticalPositionLabel = "top" | "insetTop" | "insetBottom" | "bottom" | "undefined";

/**
 * The template for the {@link @microsoft/fast-foundation#(Anchor:class)} component.
 * @public
 */
export declare const AnchorTemplate: ViewTemplate<Anchor>;

/**
 * Apply mixins to a constructor.
 * Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.
 * @public
 */
export declare function applyMixins(derivedCtor: any, ...baseCtors: any[]): void;

/**
 * Some states and properties are applicable to all host language elements regardless of whether a role is applied.
 * The following global states and properties are supported by all roles and by all base markup elements.
 * {@link https://www.w3.org/TR/wai-aria-1.1/#global_states}
 *
 * This is intended to be used as a mixin. Be sure you extend FASTElement.
 *
 * @public
 */
export declare class ARIAGlobalStatesAndProperties {
    /**
     * Indicates whether assistive technologies will present all, or only parts of,
     * the changed region based on the change notifications defined by the aria-relevant attribute.
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-atomic}
     *
     * @public
     * @remarks
     * HTML Attribute: aria-atomic
     */
    ariaAtomic: "true" | "false";
    /**
     * Indicates an element is being modified and that assistive technologies MAY want to wait
     * until the modifications are complete before exposing them to the user.
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-busy}
     *
     * @public
     * @remarks
     * HTML Attribute: aria-busy
     */
    ariaBusy: "true" | "false";
    /**
     * Identifies the element (or elements) whose contents or presence are controlled by the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls}
     * @public
     * @remarks
     * HTML Attribute: aria-controls
     */
    ariaControls: string;
    /**
     * Indicates the element that represents the current item within a container or set of related elements.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-current}
     * @public
     * @remarks
     * HTML Attribute: aria-current
     */
    ariaCurrent: "page" | "step" | "location" | "date" | "time" | "true" | "false" | string;
    /**
     * Identifies the element (or elements) that describes the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby}
     * @public
     * @remarks
     * HTML Attribute: aria-describedby
     */
    ariaDescribedby: string;
    /**
     * Identifies the element that provides a detailed, extended description for the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-details}
     * @public
     * @remarks
     * HTML Attribute: aria-details
     */
    ariaDetails: string;
    /**
     * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-disabled}
     * @public
     * @remarks
     * HTML Attribute: aria-disabled
     */
    ariaDisabled: "true" | "false";
    /**
     * Identifies the element that provides an error message for the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage}
     * @public
     * @remarks
     * HTML Attribute: aria-errormessage
     */
    ariaErrormessage: string;
    /**
     * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
     * allows assistive technology to override the general default of reading in document source order.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-flowto}
     * @public
     * @remarks
     * HTML Attribute: aria-flowto
     */
    ariaFlowto: string;
    /**
     * Indicates the availability and type of interactive popup element,
     * such as menu or dialog, that can be triggered by an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup}
     * @public
     * @remarks
     * HTML Attribute: aria-haspopup
     */
    ariaHaspopup: "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";
    /**
     * Indicates whether the element is exposed to an accessibility API
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden}
     * @public
     * @remarks
     * HTML Attribute: aria-hidden
     */
    ariaHidden: "false" | "true" | undefined;
    /**
     * Indicates the entered value does not conform to the format expected by the application.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-invalid}
     * @public
     * @remarks
     * HTML Attribute: aria-invalid
     */
    ariaInvalid: "false" | "true" | "grammar" | "spelling";
    /**
     * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-keyshortcuts}
     * @public
     * @remarks
     * HTML Attribute: aria-keyshortcuts
     */
    ariaKeyshortcuts: string;
    /**
     * Defines a string value that labels the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-label}
     * @public
     * @remarks
     * HTML Attribute: aria-label
     */
    ariaLabel: string;
    /**
     * Identifies the element (or elements) that labels the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby}
     * @public
     * @remarks
     * HTML Attribute: aria-labelledby
     */
    ariaLabelledby: string;
    /**
     * Indicates that an element will be updated, and describes the types of updates the user agents,
     * assistive technologies, and user can expect from the live region.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-live}
     * @public
     * @remarks
     * HTML Attribute: aria-live
     */
    ariaLive: "assertive" | "off" | "polite";
    /**
     * Identifies an element (or elements) in order to define a visual,
     * functional, or contextual parent/child relationship between DOM elements
     * where the DOM hierarchy cannot be used to represent the relationship.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-owns}
     * @public
     * @remarks
     * HTML Attribute: aria-owns
     */
    ariaOwns: string;
    /**
     * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-relevant}
     * @public
     * @remarks
     * HTML Attribute: aria-relevant
     */
    ariaRelevant: "additions" | "additions text" | "all" | "removals" | "text";
    /**
     * Defines a human-readable, author-localized description for the role of an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription}
     * @public
     * @remarks
     * HTML Attribute: aria-roledescription
     */
    ariaRoledescription: string;
}

/**
 * Defines if the component updates its position automatically. Calling update() always provokes an update.
 * anchor - the component only updates its position when the anchor resizes (default)
 * auto - the component updates its position when:
 * - update() is called
 * - the anchor resizes
 * - the window resizes
 * - the viewport resizes
 * - any scroll event in the document
 *
 * @beta
 */
export declare type AutoUpdateMode = "anchor" | "auto";

/**
 * Defines the base behavior of an anchored region on a particular axis
 *
 * @beta
 */
export declare type AxisPositioningMode = "uncontrolled" | "locktodefault" | "dynamic";

/**
 * Defines the scaling behavior of an anchored region on a particular axis
 *
 * @beta
 */
export declare type AxisScalingMode = "anchor" | "fill" | "content";

/**
 * A Badge Custom HTML Element.
 *
 * @public
 */
export declare class Badge extends FASTElement {
    /**
     * Indicates the badge should have a filled style.
     * @public
     * @remarks
     * HTML Attribute: fill
     */
    fill: string;
    /**
     * Indicates the badge should have a filled style.
     *
     * @public
     * @remarks
     * HTML Attribute: color
     * @privateRemarks
     * Revisit this once we have a better story for ensuring proper contrast from author defined `fill`
     */
    color: string;
    /**
     * Indicates the element should be circular
     *
     * @public
     * @remarks
     * HTML Attribute: circular
     */
    circular: boolean;
    generateBadgeStyle: () => string | undefined;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Badge} component.
 * @public
 */
export declare const BadgeTemplate: ViewTemplate<Badge>;

/**
 * An Progress HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.
 *
 * @public
 */
export declare class BaseProgress extends FASTElement {
    /**
     * The value of the progress
     * @public
     * @remarks
     * HTML Attribute: value
     */
    value: number | null;
    /**
     * The minimum value
     * @public
     * @remarks
     * HTML Attribute: min
     */
    min: number;
    /**
     * The maximum value
     * @public
     * @remarks
     * HTML Attribute: max
     */
    max: number;
    /**
     * Indicates the progress is paused
     * @public
     * @remarks
     * HTML Attribute: paused
     */
    paused: any;
}

/**
 * A Breadcrumb Custom HTML Element.
 *
 * @public
 */
export declare class Breadcrumb extends FASTElement {
    /**
     * @internal
     */
    slottedBreadcrumbItems: HTMLElement[];
    slottedBreadcrumbItemsChanged(): void;
    private setItemSeparator;
    /**
     * @internal
     * Finds href on childnodes in the light DOM or shadow DOM.
     * We look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.
     */
    private findChildWithHref;
    /**
     *  If child node with an anchor tag and with href is found then apply aria-current to child node otherwise apply aria-current to the host element, with an href
     */
    private setLastItemAriaCurrent;
}

/**
 * A Breadcrumb Item Custom HTML Element.
 *
 * @public
 */
export declare class BreadcrumbItem extends Anchor {
    /**
     * @internal
     */
    separator: boolean;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface BreadcrumbItem extends StartEnd, DelegatesARIALink {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(BreadcrumbItem:class)} component.
 * @public
 */
export declare const BreadcrumbItemTemplate: ViewTemplate<BreadcrumbItem>;

/**
 * The template for the {@link @microsoft/fast-foundation#Breadcrumb} component.
 * @public
 */
export declare const BreadcrumbTemplate: ViewTemplate<Breadcrumb>;

/**
 * A Button Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.
 *
 * @public
 */
export declare class Button extends FormAssociatedButton {
    /**
     * Determines if the element should receive document focus on page load.
     *
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    /**
     * The id of a form to associate the element to.
     *
     * @public
     * @remarks
     * HTML Attribute: form
     */
    formId: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formaction
     */
    formaction: string;
    private formactionChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formenctype
     */
    formenctype: string;
    private formenctypeChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formmethod
     */
    formmethod: string;
    private formmethodChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formnovalidate
     */
    formnovalidate: boolean;
    private formnovalidateChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formtarget
     */
    formtarget: "_self" | "_blank" | "_parent" | "_top";
    private formtargetChanged;
    /**
     * The button type.
     *
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: "submit" | "reset" | "button";
    private typeChanged;
    /**
     *
     * Default slotted content
     *
     * @public
     * @remarks
     */
    defaultSlottedContent: HTMLElement[];
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Submits the parent form
     */
    private handleSubmission;
    /**
     * Resets the parent form
     */
    private handleFormReset;
    /**
     * @deprecated This API has been deprecated
     */
    get root(): HTMLButtonElement;
    control: HTMLButtonElement;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Button extends StartEnd, DelegatesARIAButton {
}

declare class _Button extends FASTElement {
}

declare interface _Button extends FormAssociated {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Button:class)} component.
 * @public
 */
export declare const ButtonTemplate: ViewTemplate<Button>;

/**
 * An Card Custom HTML Element.
 *
 * @public
 */
export declare class Card extends FASTElement {
}

/**
 * The template for the {@link @microsoft/fast-foundation#Card} component.
 * @public
 */
export declare const CardTemplate: ViewTemplate<Card>;

/**
 * A Checkbox Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.
 *
 * @public
 */
export declare class Checkbox extends FormAssociatedCheckbox {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */
    initialValue: string;
    /**
     * Provides the default checkedness of the input element
     * Passed down to proxy
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean;
    private defaultCheckedChanged;
    /**
     * The checked state of the control.
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    /**
     * The indeterminate state of the control
     */
    indeterminate: boolean;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input checkboxes
     */
    private dirtyChecked;
    /**
     * Set to true when the component has constructed
     */
    private constructed;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    formResetCallback: () => void;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

declare class _Checkbox extends FASTElement {
}

declare interface _Checkbox extends FormAssociated {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.
 * @public
 */
export declare const CheckboxTemplate: ViewTemplate<Checkbox>;

/**
 * Defines a column in the grid
 *
 * @public
 */
export declare interface ColumnDefinition {
    /**
     * Identifies the data item to be displayed in this column
     * (i.e. how the data item is labelled in each row)
     */
    columnDataKey: string;
    /**
     * Sets the css grid-column property on the cell which controls its placement in
     * the parent row. If left unset the cells will set this value to match the index
     * of their column in the parent collection of ColumnDefinitions.
     */
    gridColumn?: string;
    /**
     *  Column title, if not provided columnDataKey is used as title
     */
    title?: string;
    /**
     *  Header cell template
     */
    headerCellTemplate?: ViewTemplate;
    /**
     * Whether the header cell has an internal focus queue
     */
    headerCellInternalFocusQueue?: boolean;
    /**
     * Callback function that returns the element to focus in a custom cell.
     * When headerCellInternalFocusQueue is false this function is called when the cell is first focused
     * to immediately move focus to a cell element, for example a cell that is a checkbox could move
     * focus directly to the checkbox.
     * When headerCellInternalFocusQueue is true this function is called when the user hits Enter or F2
     */
    headerCellFocusTargetCallback?: (cell: DataGridCell) => HTMLElement;
    /**
     * cell template
     */
    cellTemplate?: ViewTemplate;
    /**
     * Whether the cell has an internal focus queue
     */
    cellInternalFocusQueue?: boolean;
    /**
     * Callback function that returns the element to focus in a custom cell.
     * When cellInternalFocusQueue is false this function is called when the cell is first focused
     * to immediately move focus to a cell element, for example a cell that is a checkbox could move
     * focus directly to the checkbox.
     * When cellInternalFocusQueue is true this function is called when the user hits Enter or F2
     */
    cellFocusTargetCallback?: (cell: DataGridCell) => HTMLElement;
}

/**
 * A Combobox Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#combobox | ARIA combobox }.
 *
 * @public
 */
export declare class Combobox extends FormAssociatedCombobox {
    /**
     * The internal value property.
     *
     * @internal
     */
    private _value;
    /**
     * The autocomplete attribute.
     *
     * @public
     * @remarks
     * HTML Attribute: autocomplete
     */
    autocomplete: ComboboxAutocomplete | undefined;
    /**
     * Reference to the internal text input element.
     *
     * @internal
     */
    control: HTMLInputElement;
    /**
     * The collection of currently filtered options.
     *
     * @public
     */
    filteredOptions: ListboxOption[];
    /**
     * The current filter value.
     *
     * @internal
     */
    private filter;
    /**
     * The initial state of the position attribute.
     *
     * @internal
     */
    private forcedPosition;
    /**
     * Reset the element to its first selectable option when its parent form is reset.
     *
     * @internal
     */
    formResetCallback: () => void;
    private get isAutocompleteInline();
    private get isAutocompleteList();
    private get isAutocompleteBoth();
    /**
     * The unique id of the internal listbox.
     *
     * @internal
     */
    listboxId: string;
    /**
     * The max height for the listbox when opened.
     *
     * @internal
     */
    maxHeight: number;
    /**
     * The open attribute.
     *
     * @public
     * @remarks
     * HTML Attribute: open
     */
    open: boolean;
    protected openChanged(): void;
    /**
     * The list of options.
     *
     * @public
     * @remarks
     * Overrides `Listbox.options`.
     */
    get options(): ListboxOption[];
    set options(value: ListboxOption[]);
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute is not a valid substitute for a labeling element.
     */
    placeholder: string;
    /**
     * Updates the placeholder on the proxy element.
     * @internal
     */
    protected placeholderChanged(): void;
    /**
     * The placement for the listbox when the combobox is open.
     *
     * @public
     */
    positionAttribute: SelectPosition;
    /**
     * The current state of the calculated position of the listbox.
     *
     * @public
     */
    position: SelectPosition;
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */
    role: SelectRole;
    /**
     * The value property.
     *
     * @public
     */
    get value(): string;
    set value(next: string);
    /**
     * Handle opening and closing the listbox when the combobox is clicked.
     *
     * @param e - the mouse event
     * @internal
     */
    clickHandler(e: MouseEvent): boolean | void;
    connectedCallback(): void;
    /**
     * Synchronize the `aria-disabled` property when the `disabled` property changes.
     *
     * @param prev - The previous disabled value
     * @param next - The next disabled value
     *
     * @internal
     */
    disabledChanged(prev: boolean, next: boolean): void;
    /**
     * Filter available options by text value.
     *
     * @public
     */
    filterOptions(): void;
    /**
     * Handle focus state when the element or its children lose focus.
     *
     * @param e - The focus event
     * @internal
     */
    focusoutHandler(e: FocusEvent): boolean | void;
    /**
     * Handle content changes on the control input.
     *
     * @param e - the input event
     * @internal
     */
    inputHandler(e: InputEvent): boolean | void;
    /**
     * Handle keydown actions for listbox navigation.
     *
     * @param e - the keyboard event
     * @internal
     */
    keydownHandler(e: Event & KeyboardEvent): boolean | void;
    /**
     * Handle keyup actions for value input and text field manipulations.
     *
     * @param e - the keyboard event
     * @internal
     */
    keyupHandler(e: KeyboardEvent): boolean | void;
    /**
     * Ensure that the selectedIndex is within the current allowable filtered range.
     *
     * @internal
     * @remarks
     * Overrides: `Listbox.selectedIndexChanged`
     */
    selectedIndexChanged(prev: number, next: number): void;
    /**
     * Move focus to the previous selectable option.
     *
     * @internal
     * @remarks
     * Overrides `Listbox.selectPreviousOption`
     */
    selectPreviousOption(): void;
    /**
     * Set the default selected options at initialization or reset.
     *
     * @internal
     * @remarks
     * Overrides `Listbox.setDefaultSelectedOption`
     */
    setDefaultSelectedOption(): void;
    /**
     * Focus and select the content of the control based on the first selected option.
     *
     * @param start - The index for the starting range
     * @internal
     */
    private setInlineSelection;
    /**
     * Calculate and apply listbox positioning based on available viewport space.
     *
     * @param force - direction to force the listbox to display
     * @public
     */
    setPositioning(): void;
    /**
     * Ensure that the entire list of options is used when setting the selected property.
     *
     * @internal
     * @remarks
     * Overrides: `Listbox.selectedOptionsChanged`
     */
    selectedOptionsChanged(prev: any, next: any): void;
    /**
     * Synchronize the form-associated proxy and update the value property of the element.
     *
     * @param prev - the previous collection of slotted option elements
     * @param next - the next collection of slotted option elements
     *
     * @internal
     */
    slottedOptionsChanged(prev: any, next: any): void;
    /**
     * @internal
     */
    private updateValue;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Combobox extends StartEnd, DelegatesARIACombobox {
}

declare class _Combobox extends Listbox {
}

declare interface _Combobox extends FormAssociated {
}

/**
 * Autocomplete values for combobox.
 * @public
 */
export declare enum ComboboxAutocomplete {
    inline = "inline",
    list = "list",
    both = "both",
    none = "none"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Combobox:class)} component.
 * @public
 */
export declare const ComboboxTemplate: ViewTemplate<Combobox>;

/**
 * @alpha
 * Applies presentation details, such as template and styles, to a component instance.
 */
export declare interface ComponentPresentation {
    applyTo(element: FASTElement): void;
}

/**
 * @alpha
 * A gateway for utilities associated with component presentation.
 */
export declare const ComponentPresentation: Readonly<{
    /**
     * @alpha
     * Creates element-specific DI keys for resolving component presentations.
     */
    keyFrom(tagName: string): InterfaceSymbol<ComponentPresentation>;
}>;

/**
 * Retrieves the "composed parent" element of a node, ignoring DOM tree boundaries.
 * When the parent of a node is a shadow-root, it will return the host
 * element of the shadow root. Otherwise it will return the parent node or null if
 * no parent node exists.
 * @param element - The element for which to retrieve the composed parent
 *
 * @public
 */
export declare function composedParent<T extends HTMLElement>(element: T): HTMLElement | null;

/**
 * Combined type to describe a Constructable Form-Associated type.
 *
 * @alpha
 */
export declare type ConstructableFormAssociated = Constructable<HTMLElement & FASTElement>;

/**
 * An implementation of {@link CustomPropertyManager} that uses the constructable CSSStyleSheet object.
 * This implementation supports multiple CustomPropertyManagerTarget subscriptions.
 *
 * @public
 */
export declare class ConstructableStylesCustomPropertyManager extends CustomPropertyManagerBase {
    protected readonly sheet: CSSStyleSheet;
    protected styles: ElementStyles;
    protected customPropertyTarget: CSSStyleDeclaration;
    private subscribers;
    constructor(sheet: CSSStyleSheet);
    /**
     * {@inheritdoc CustomPropertyManager.subscribe}
     */
    subscribe(client: CustomPropertyManagerClient): void;
    /**
     * {@inheritdoc CustomPropertyManager.unsubscribe}
     */
    unsubscribe(client: CustomPropertyManagerClient): void;
    /**
     * {@inheritdoc CustomPropertyManager.isSubscribed}
     */
    isSubscribed(client: CustomPropertyManagerClient): boolean;
}

/**
 * @alpha
 */
export declare interface Container extends ServiceLocator {
    register(...params: any[]): Container;
    registerResolver<K extends Key, T = K>(key: K, resolver: Resolver<T>, isDisposable?: boolean): Resolver<T>;
    registerTransformer<K extends Key, T = K>(key: K, transformer: Transformer_2<T>): boolean;
    getResolver<K extends Key, T = K>(key: K | Key, autoRegister?: boolean): Resolver<T> | null;
    registerFactory<T extends Constructable>(key: T, factory: Factory<T>): void;
    getFactory<T extends Constructable>(key: T): Factory<T>;
    createChild(config?: Partial<Omit<ContainerConfiguration, "parentLocator">>): Container;
}

/**
 * @alpha
 */
export declare const Container: InterfaceSymbol<Container>;

/**
 * @alpha
 */
export declare interface ContainerConfiguration {
    parentLocator: ParentLocator;
    responsibleForOwnerRequests: boolean;
    defaultResolver(key: Key, handler: Container): Resolver;
}

/**
 * @alpha
 */
export declare const ContainerConfiguration: Readonly<{
    default: Readonly<ContainerConfiguration>;
}>;

/**
 * @alpha
 */
export declare class ContainerImpl implements Container {
    protected owner: any;
    protected config: ContainerConfiguration;
    private _parent;
    private registerDepth;
    private resolvers;
    get parent(): ContainerImpl | null;
    get depth(): number;
    get responsibleForOwnerRequests(): boolean;
    constructor(owner: any, config: ContainerConfiguration);
    register(...params: any[]): Container;
    registerResolver<K extends Key, T = K>(key: K, resolver: Resolver<T>): Resolver<T>;
    registerTransformer<K extends Key, T = K>(key: K, transformer: Transformer_2<T>): boolean;
    getResolver<K extends Key, T = K>(key: K | Key, autoRegister?: boolean): Resolver<T> | null;
    has<K extends Key>(key: K, searchAncestors?: boolean): boolean;
    get<K extends Key>(key: K): Resolved<K>;
    getAll<K extends Key>(key: K, searchAncestors?: boolean): readonly Resolved<K>[];
    getFactory<K extends Constructable>(Type: K): Factory<K>;
    registerFactory<K extends Constructable>(key: K, factory: Factory<K>): void;
    createChild(config?: Partial<Omit<ContainerConfiguration, "parentLocator">>): Container;
    private jitRegister;
}

/**
 * Defines an element within the context of a design system.
 * @alpha
 */
export declare type ContextualElementDefinition = Omit<PartialFASTElementDefinition, "name">;

declare function create<T extends Function>(nameOrConfig: string | DesignTokenConfiguration): never;

declare function create<T extends undefined | void>(nameOrConfig: string | DesignTokenConfiguration): never;

declare function create<T>(nameOrConfig: string): CSSDesignToken<T>;

declare function create<T>(nameOrConfig: Omit<DesignTokenConfiguration, "cssCustomPropertyName"> | (DesignTokenConfiguration & Record<"cssCustomPropertyName", string>)): CSSDesignToken<T>;

declare function create<T>(nameOrConfig: DesignTokenConfiguration & Record<"cssCustomPropertyName", null>): DesignToken<T>;

/**
 * Generates a template for the {@link @microsoft/fast-foundation#DataGridCell} component using
 * the provided prefix.
 * @public
 */
export declare function createDataGridCellTemplate(prefix: string): ViewTemplate;

/**
 * Generates a template for the {@link @microsoft/fast-foundation#DataGridRow} component using
 * the provided prefix.
 *
 * @public
 */
export declare function createDataGridRowTemplate(prefix: string): ViewTemplate;

/**
 * Generates a template for the {@link @microsoft/fast-foundation#DataGrid} component using
 * the provided prefix.
 *
 * @public
 */
export declare function createDataGridTemplate(prefix: string): ViewTemplate;

/**
 * Generates a template for the {@link @microsoft/fast-foundation#(MenuItem:class)} component using
 * the provided prefix.
 *
 * @public
 */
export declare function createMenuItemTemplate(prefix: string): ViewTemplate;

/**
 * Creates a template for the {@link @microsoft/fast-foundation#(Tooltip:class)} component using the provided prefix.
 * @public
 */
export declare function createTooltipTemplate(prefix: string): ViewTemplate;

/**
 * A Behavior that will register to a {@link CSSCustomPropertyTarget} when bound.
 *
 * @public
 */
export declare class CSSCustomPropertyBehavior implements Behavior, CSSCustomPropertyDefinition {
    /**
     * The name of the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly name: CSSCustomPropertyDefinition["name"];
    /**
     * The value or function that will resolve the value of
     * the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly value: CSSCustomPropertyDefinition["value"];
    /**
     * The name of the CSSCustomPropertyBehavior formatted
     * as a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly propertyName: string;
    /**
     * Return the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property} formatted
     * as a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties | CSS variable}.
     *
     * @public
     */
    readonly var: string;
    /**
     *
     * @param name - The name of the custom property, without the prepended "--" required by {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom properties}.
     * @param value - The value of the custom property or a function that resolves the value.
     * @param host - A function that resolves the host element that will register the behavior
     */
    constructor(name: string, value: CSSCustomPropertyDefinition["value"], host: (source: HTMLElement) => Partial<CSSCustomPropertyTarget> | null);
    private host;
    /**
     * Binds the behavior to a source element
     * @param source - The source element being bound
     * @internal
     */
    bind(source: HTMLElement): void;
    /**
     * Unbinds the behavior from the source element.
     * @param source - The source element being unbound
     * @internal
     */
    unbind(source: HTMLElement): void;
}

/**
 * Create a CSS Custom Property behavior.
 * @param name - The name of the CSS custom property
 * @param value - The value or value resolver of the custom property
 * @param host - A function to resolve the element to host the CSS custom property
 * @public
 */
export declare function cssCustomPropertyBehaviorFactory(name: string, value: string | ((...arg: any[]) => string), host: (source: typeof FASTElement & HTMLElement) => Partial<CSSCustomPropertyTarget> | null): CSSCustomPropertyBehavior;

/**
 * A structure representing a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
 * @public
 */
export declare interface CSSCustomPropertyDefinition {
    /**
     * The custom property name
     */
    name: string;
    /**
     * The value of the custom property or a function that resolves the value
     */
    value: string | ((...args: any[]) => string);
}

/**
 * A structure that can register and unregister {@link CSSCustomPropertyDefinition | CSSCustomPropertyDefinitions}.
 * @public
 */
export declare interface CSSCustomPropertyTarget {
    registerCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    unregisterCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    disconnectedCSSCustomPropertyRegistry?: CSSCustomPropertyDefinition[] | void;
}

/**
 * A {@link (DesignToken:interface)} that emits a CSS custom property.
 * @alpha
 */
export declare interface CSSDesignToken<T extends string | number | boolean | BigInteger | null | Array<any> | symbol | {
    createCSS?(): string;
}> extends DesignToken<T>, CSSDirective {
    /**
     * The {@link (DesignToken:interface)} formatted as a CSS custom property if the token is
     * configured to write a CSS custom property.
     */
    readonly cssCustomProperty: string;
}

/**
 * Define all possible CSS display values.
 * @public
 */
export declare type CSSDisplayPropertyValue = "block" | "contents" | "flex" | "grid" | "inherit" | "initial" | "inline" | "inline-block" | "inline-flex" | "inline-grid" | "inline-table" | "list-item" | "none" | "run-in" | "table" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group";

/**
 * Describes the interface for custom property management object used by the {@link CustomPropertyManagerClient}
 * to manage CSS custom properties.
 *
 * The managers role is to attach a stylesheet to the CustomPropertyManagerClient instance
 * and to write CSS custom properties to that stylesheet instance when required by the
 * CustomPropertyManagerTarget.
 *
 * @public
 */
export declare interface CustomPropertyManager {
    /**
     * The CustomPropertyManagerTarget responsible for evaluating CSSCustomPropertyDefinitions
     */
    readonly owner: CustomPropertyManagerClient | null;
    /**
     * Register and write a CSSCustomPropertyDefinition
     * @param definition - The definition to register
     */
    register(definition: CSSCustomPropertyDefinition): void;
    /**
     * Unregister a CSSCustomPropertyDefinition by name. If there are no other
     * registrations, the CSS custom property will be removed.
     * @param name - The name of the custom property definition to unregister
     */
    unregister(name: string): void;
    /**
     * Write a CSSCustomPropertyDefinition without registering it
     * @param definition - The definition to write
     */
    set(definition: CSSCustomPropertyDefinition): void;
    /**
     * Removes a CSSCustomPropertyDefinition
     * @param name - The name of the property
     */
    remove(name: string): void;
    /**
     * Sets all CSSCustomPropertyDefinitions that have been registered
     */
    setAll(): void;
    /**
     * Subscribe a CustomPropertyManagerTarget instances to the manager.
     * @param provider - The CustomPropertyManagerTarget to subscribe
     */
    subscribe?(provider: CustomPropertyManagerClient): void;
    /**
     * Unsubscribe a CustomPropertyManagerTarget instance from the manager.
     * @param provider - The CustomPropertyManagerTarget to unsubscribe.
     */
    unsubscribe?(provider: CustomPropertyManagerClient): void;
    /**
     * Return whether the CustomPropertyManagerTarget instances is subscribed.
     */
    isSubscribed?(provider: CustomPropertyManagerClient): boolean;
}

declare abstract class CustomPropertyManagerBase implements CustomPropertyManager {
    /**
     * A queue of additions and deletions. Operations will be queued when customPropertyTarget is null
     */
    protected queue: Set<Function>;
    /**
     * The CSSStyleDeclaration to which all CSS custom properties are written
     */
    protected abstract customPropertyTarget: CSSStyleDeclaration | null;
    /**
     * {@inheritdoc CustomPropertyManager.owner}
     */
    get owner(): CustomPropertyManagerClient | null;
    /**
     * The private settable owner
     */
    protected _owner: CustomPropertyManagerClient | null;
    /**
     * Tracks state of rAF to only invoke property writes once per animation frame
     */
    private ticking;
    /**
     * Stores all CSSCustomPropertyDefinitions registered with the provider.
     */
    private cssCustomPropertyDefinitions;
    /**
     * {@inheritdoc CustomPropertyManager.register}
     */
    register(def: CSSCustomPropertyDefinition): void;
    /**
     * {@inheritdoc CustomPropertyManager.unregister}
     */
    unregister(name: string): void;
    /**
     * {@inheritdoc CustomPropertyManager.set}
     */
    set(definition: CSSCustomPropertyDefinition): void;
    /**
     * Removes a CSS custom property from the provider.
     * @param name - the name of the property to remove
     */
    remove(name: string): void;
    /**
     * {@inheritdoc CustomPropertyManager.setAll}
     */
    setAll(): void;
}

/**
 * Defines the interface of an HTMLElement that can be used
 * with a {@link CustomPropertyManager}.
 *
 * @public
 */
export declare interface CustomPropertyManagerClient extends FASTElement, HTMLElement {
    /**
     * All registered CSSCustomPropertyDefinitions.
     */
    cssCustomPropertyDefinitions: Map<string, CSSCustomPropertyDefinition>;
    /**
     * Evaluates a custom property definition
     * @param definition - The definition to evaluate
     */
    evaluate(definition: CSSCustomPropertyDefinition): string;
}

/**
 * This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.
 * @public
 */
export declare const darkModeStylesheetBehavior: (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * A Data Grid Custom HTML Element.
 *
 * @public
 */
export declare class DataGrid extends FASTElement {
    /**
     *  generates a basic column definition by examining sample row data
     */
    static generateColumns: (row: object) => ColumnDefinition[];
    /**
     *  generates a gridTemplateColumns based on columndata array
     */
    private static generateTemplateColumns;
    /**
     *  Whether the grid should automatically generate a header row and its type
     *
     * @public
     * @remarks
     * HTML Attribute: generate-header
     */
    generateHeader: GenerateHeaderOptions;
    private generateHeaderChanged;
    /**
     * String that gets applied to the the css gridTemplateColumns attribute of child rows
     *
     * @public
     * @remarks
     * HTML Attribute: grid-template-columns
     */
    gridTemplateColumns: string;
    private gridTemplateColumnsChanged;
    /**
     * The data being displayed in the grid
     *
     * @public
     */
    rowsData: object[];
    private rowsDataChanged;
    /**
     * The column definitions of the grid
     *
     * @public
     */
    columnDefinitions: ColumnDefinition[] | null;
    private columnDefinitionsChanged;
    /**
     * The template to use for the programmatic generation of rows
     *
     * @public
     */
    rowItemTemplate: ViewTemplate;
    /**
     * The template used to render cells in generated rows.
     *
     * @public
     */
    cellItemTemplate?: ViewTemplate;
    /**
     * The template used to render header cells in generated rows.
     *
     * @public
     */
    headerCellItemTemplate?: ViewTemplate;
    private headerCellItemTemplateChanged;
    /**
     * The index of the row that will receive focus the next time the
     * grid is focused. This value changes as focus moves to different
     * rows within the grid.  Changing this value when focus is already
     * within the grid moves focus to the specified row.
     *
     * @public
     */
    focusRowIndex: number;
    private focusRowIndexChanged;
    /**
     * The index of the column that will receive focus the next time the
     * grid is focused. This value changes as focus moves to different rows
     * within the grid.  Changing this value when focus is already within
     * the grid moves focus to the specified column.
     *
     * @public
     */
    focusColumnIndex: number;
    private focusColumnIndexChanged;
    /**
     * The default row item template.  Set by the component templates.
     *
     * @internal
     */
    defaultRowItemTemplate: ViewTemplate;
    /**
     * Component prefix (ie. "fast" vs. "fluent" vs. "<mylib>").  Set by the component templates.
     *
     * @internal
     */
    prefix: string;
    /**
     * Children that are rows
     *
     * @internal
     */
    rowElements: HTMLElement[];
    private rowsRepeatBehavior;
    private rowsPlaceholder;
    private generatedHeader;
    private isUpdatingFocus;
    private pendingFocusUpdate;
    private observer;
    private rowindexUpdateQueued;
    private columnDefinitionsStale;
    private generatedGridTemplateColumns;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    handleRowFocus(e: Event): void;
    /**
     * @internal
     */
    handleFocus(e: FocusEvent): void;
    /**
     * @internal
     */
    handleFocusOut(e: FocusEvent): void;
    /**
     * @internal
     */
    handleKeydown(e: KeyboardEvent): void;
    private focusOnCell;
    private queueFocusUpdate;
    private updateFocus;
    private toggleGeneratedHeader;
    private onChildListChange;
    private queueRowIndexUpdate;
    private updateRowIndexes;
}

/**
 * A Data Grid Cell Custom HTML Element.
 *
 * @public
 */
export declare class DataGridCell extends FASTElement {
    /**
     * The type of cell
     *
     * @public
     * @remarks
     * HTML Attribute: cell-type
     */
    cellType: DataGridCellTypes;
    private cellTypeChanged;
    /**
     * The column index of the cell.
     * This will be applied to the css grid-column-index value
     * applied to the cell
     *
     * @public
     * @remarks
     * HTML Attribute: grid-column
     */
    gridColumn: string;
    private gridColumnChanged;
    /**
     * The base data for the parent row
     *
     * @public
     */
    rowData: object | null;
    /**
     * The base data for the column
     *
     * @public
     */
    columnDefinition: ColumnDefinition | null;
    private columnDefinitionChanged;
    private isActiveCell;
    private customCellView;
    private isInternalFocused;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    handleFocusin(e: FocusEvent): void;
    handleFocusout(e: FocusEvent): void;
    handleKeydown(e: KeyboardEvent): void;
    private updateCellView;
    private disconnectCellView;
    private updateCellStyle;
}

/**
 * Enumerates possible cell types.
 *
 * @public
 */
export declare enum DataGridCellTypes {
    default = "default",
    columnHeader = "columnheader"
}

/**
 * A Data Grid Row Custom HTML Element.
 *
 * @public
 */
export declare class DataGridRow extends FASTElement {
    /**
     * String that gets applied to the the css gridTemplateColumns attribute for the row
     *
     * @public
     * @remarks
     * HTML Attribute: grid-template-columns
     */
    gridTemplateColumns: string;
    private gridTemplateColumnsChanged;
    /**
     * The type of row
     *
     * @public
     * @remarks
     * HTML Attribute: row-type
     */
    rowType: DataGridRowTypes;
    private rowTypeChanged;
    /**
     * The base data for this row
     *
     * @public
     */
    rowData: object | null;
    private rowDataChanged;
    /**
     * The column definitions of the row
     *
     * @public
     */
    columnDefinitions: ColumnDefinition[] | null;
    /**
     * The template used to render cells in generated rows.
     *
     * @public
     */
    cellItemTemplate?: ViewTemplate;
    private cellItemTemplateChanged;
    /**
     * The template used to render header cells in generated rows.
     *
     * @public
     */
    headerCellItemTemplate?: ViewTemplate;
    private headerCellItemTemplateChanged;
    /**
     * The index of the row in the parent grid.
     * This is typically set programmatically by the parent grid.
     *
     * @public
     */
    rowIndex: number;
    /**
     * Whether focus is on/in a cell within this row.
     *
     * @internal
     */
    isActiveRow: boolean;
    /**
     * The cell item template currently in use.
     *
     * @internal
     */
    activeCellItemTemplate?: ViewTemplate;
    /**
     * The default cell item template.  Set by the component templates.
     *
     * @internal
     */
    defaultCellItemTemplate?: ViewTemplate;
    /**
     * The default header cell item template.  Set by the component templates.
     *
     * @internal
     */
    defaultHeaderCellItemTemplate?: ViewTemplate;
    /**
     * Children that are cells
     *
     * @internal
     */
    cellElements: HTMLElement[];
    private cellsRepeatBehavior;
    private cellsPlaceholder;
    /**
     * @internal
     */
    slottedCellElements: HTMLElement[];
    /**
     * @internal
     */
    focusColumnIndex: number;
    private refocusOnLoad;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    handleFocusout(e: FocusEvent): void;
    handleCellFocus(e: Event): void;
    handleKeydown(e: KeyboardEvent): void;
    private updateItemTemplate;
    private updateRowStyle;
}

/**
 * Enumerates possible row types
 *
 * @public
 */
export declare enum DataGridRowTypes {
    default = "default",
    header = "header",
    stickyHeader = "sticky-header"
}

/**
 * Configuration object for defining a {@link @microsoft/fast-foundation#DesignSystemProvider} property
 *
 * @public
 */
export declare interface DecoratorDesignSystemPropertyConfiguration extends Omit<DecoratorAttributeConfiguration, "attribute"> {
    /**
     * The HTML attribute name to map the property to - defaults to the property name.
     */
    attribute?: string | false;
    /**
     * An optional property to control the name of the css custom property being created.
     * If omitted, the css custom property will share a name with attribute if specified, otherwise the property name being decorated.
     * If assigned a false value, no css custom property will be created.
     */
    cssCustomProperty?: string | false;
    /**
     * The default value of the property. Will be assigned when the use-defaults attribute is used.
     */
    default: any;
}

/**
 * @alpha
 * The default implementation of ComponentPresentation, used by FoundationElement.
 */
export declare class DefaultComponentPresentation implements ComponentPresentation {
    readonly styles: ElementStyles | null;
    readonly template: ElementViewTemplate | null;
    constructor(template?: ElementViewTemplate, styles?: ComposableStyles | ComposableStyles[]);
    applyTo(element: FASTElement): void;
}

/**
 * @alpha
 */
export declare const DefaultResolver: Readonly<{
    none(key: Key): Resolver;
    singleton(key: Key): Resolver;
    transient(key: Key): Resolver;
}>;

/**
 * Defines a design-system-provider custom element, registering the tag-name so that the element can be property resolved by {@link DesignSystemConsumer | DesignSystemConsumers}.
 *
 * @param nameOrDef - the name or {@link @microsoft/fast-element#PartialFASTElementDefinition | element definition}
 * @public
 */
export declare function defineDesignSystemProvider(nameOrDef: string | PartialFASTElementDefinition): <T extends typeof DesignSystemProvider>(providerCtor: T) => void;

/**
 * Includes ARIA states and properties relating to the ARIA button role
 *
 * @public
 */
export declare class DelegatesARIAButton {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-pressed
     */
    ariaPressed: "true" | "false" | "mixed" | undefined;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIAButton extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA combobox role.
 *
 * @public
 */
export declare class DelegatesARIACombobox {
    /**
     * See {@link https://w3c.github.io/aria/#aria-autocomplete} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-autocomplete
     */
    ariaAutocomplete: "inline" | "list" | "both" | "none" | undefined;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIACombobox extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA link role
 *
 * @public
 */
export declare class DelegatesARIALink {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#link} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIALink extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA listbox role
 *
 * @public
 */
export declare class DelegatesARIAListbox {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#listbox} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-activedescendant
     */
    ariaActiveDescendant: string;
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#listbox} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-disabled
     */
    ariaDisabled: "true" | "false";
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#listbox} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIAListbox extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA select role.
 *
 * @public
 */
export declare class DelegatesARIASelect {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-pressed
     */
    ariaPressed: "true" | "false" | "mixed" | undefined;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIASelect extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA textbox role
 *
 * @public
 */
export declare class DelegatesARIATextbox {
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIATextbox extends ARIAGlobalStatesAndProperties {
}

/**
 * Includes ARIA states and properties relating to the ARIA toolbar role
 *
 * @public
 */
export declare class DelegatesARIAToolbar {
    /**
     * The id of the element labeling the toolbar.
     * @public
     * @remarks
     * HTML Attribute: aria-labelledby
     */
    ariaLabelledby: string;
    /**
     * The label surfaced to assistive technologies.
     *
     * @public
     * @remarks
     * HTML Attribute: aria-label
     */
    ariaLabel: string;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface DelegatesARIAToolbar extends ARIAGlobalStatesAndProperties {
}

/**
 * A {@link (DesignToken:interface)} value that is derived. These values can depend on other {@link (DesignToken:interface)}s
 * or arbitrary observable properties.
 * @alpha
 */
export declare type DerivedDesignTokenValue<T> = T extends Function ? never : (target: HTMLElement) => T;

/**
 * @alpha
 */
export declare class DesignSystem {
    private registrations;
    private prefix;
    private disambiguate;
    withPrefix(prefix: string): this;
    withElementDisambiguation(callback: ElementDisambiguationCallback): this;
    register(...params: any[]): this;
    applyTo(element: HTMLElement): Container;
}

/**
 * Defines a structure that consumes from a DesignSystemProvider
 * @public
 */
export declare interface DesignSystemConsumer {
    provider: DesignSystemProvider | null;
}

/**
 * Behavior to connect a {@link DesignSystemConsumer} to the nearest {@link DesignSystemProvider}
 * @public
 */
export declare const designSystemConsumerBehavior: Behavior;

/**
 * Decorator to declare a property as a design-system property.
 * Intended to be used with the {@link @microsoft/fast-foundation#DesignSystemProvider}
 * @param config - {@link DecoratorDesignSystemPropertyConfiguration}
 *
 * @public
 */
export declare function designSystemProperty<T extends DesignSystemProvider>(config: DecoratorDesignSystemPropertyConfiguration): (source: T, property: string) => void;

/**
 * A element to provide Design System values to consumers via CSS custom properties
 * and to resolve recipe values.
 *
 * @public
 */
export declare class DesignSystemProvider extends FASTElement implements CSSCustomPropertyTarget, DesignSystemConsumer, CustomPropertyManagerClient {
    /**
     * Stores a list of all element tag-names that associated
     * to design-system-providers
     */
    private static _tagNames;
    /**
     * Read all tag-names that are associated to
     * design-system-providers
     *
     * @public
     */
    static get tagNames(): string[];
    /**
     * Determines if an element is a DesignSystemProvider
     * @param el - The element to test
     *
     * @public
     */
    static isDesignSystemProvider(el: HTMLElement | DesignSystemProvider): el is DesignSystemProvider;
    /**
     * Finds the closest design-system-provider
     * to an element.
     *
     * @param el - The element from which to begin searching.
     * @public
     */
    static findProvider(el: HTMLElement & Partial<DesignSystemConsumer>): DesignSystemProvider | null;
    /**
     * Registers a tag-name to be associated with
     * the design-system-provider class. All tag-names for DesignSystemProvider elements
     * must be registered for proper property resolution.
     *
     * @param tagName - the HTML Element tag name to register as a DesignSystemProvider.
     *
     * @public
     */
    static registerTagName(tagName: string): void;
    /**
     * Allows other components to identify this as a provider.
     * Using instanceof DesignSystemProvider did not seem to work.
     *
     * @public
     */
    readonly isDesignSystemProvider = true;
    /**
     * The design-system object.
     * This is "observable" but will notify on object mutation
     * instead of object assignment
     *
     * @public
     */
    designSystem: {};
    /**
     * Applies the default design-system values to the instance where properties
     * are not explicitly assigned. This is generally used to set the root design
     * system context.
     *
     * @public
     * @remarks
     * HTML Attribute: use-defaults
     */
    useDefaults: boolean;
    private useDefaultsChanged;
    /**
     * The parent provider the the DesignSystemProvider instance.
     * @public
     */
    provider: DesignSystemProvider | null;
    private providerChanged;
    /**
     * A reference to the object that manages the CSS custom properties
     * the DesignSystemProvider depends on.
     */
    customPropertyManager: CustomPropertyManager;
    private customPropertyManagerChanged;
    /**
     * Stores all CSSCustomPropertyDefinitions registered with the provider.
     * @internal
     *
     */
    cssCustomPropertyDefinitions: Map<string, CSSCustomPropertyDefinition>;
    /**
     * Track all design system property names so we can react to changes
     * in those properties. Do not initialize or it will clobber value stored
     * by the decorator.
     *
     * @internal
     */
    designSystemProperties: {
        [propertyName: string]: Required<Pick<DecoratorDesignSystemPropertyConfiguration, "cssCustomProperty" | "default">>;
    };
    /**
     * Allows CSSCustomPropertyDefinitions to register on this element *before* the constructor
     * has run and the registration APIs exist. This can manifest when the DOM
     * is parsed (and custom element tags exist in the DOM) before the script defining the custom elements
     * is parsed, and when the elements using the CSSCustomPropertyBehaviors
     * are defined before this DesignSystemProvider.
     *
     * @public
     * @deprecated - use disconnectedRegistry
     */
    disconnectedCSSCustomPropertyRegistry?: CSSCustomPropertyDefinition[];
    /**
     * Allows arbitrary registration to the provider before the constructor runs.
     * When the constructor runs, all registration functions in the disconnectedRegistry
     * will be invoked with the provider instance.
     *
     * @public
     */
    disconnectedRegistry?: Array<(provider: DesignSystemProvider) => void> | void;
    /**
     * Handle changes to design-system-provider IDL and content attributes
     * that reflect to design-system properties.
     */
    private attributeChangeHandler;
    /**
     * Handle changes to the local design-system property.
     */
    private localDesignSystemChangeHandler;
    /**
     * Handle changes to the upstream design-system provider
     */
    private providerDesignSystemChangeHandler;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Register a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} with the DeignSystemProvider.
     * Registering a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} will create the CSS custom property.
     *
     * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    registerCSSCustomProperty(def: CSSCustomPropertyDefinition): void;
    /**
     * Unregister a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} from the DeignSystemProvider.
     * If all registrations of the definition are unregistered, the CSS custom property will be removed.
     *
     * @param def - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    unregisterCSSCustomProperty(def: CSSCustomPropertyDefinition): void;
    /**
     * Evaluates a CSSCustomPropertyDefinition with the current design system.
     *
     * @public
     */
    evaluate(definition: CSSCustomPropertyDefinition): string;
    /**
     * Synchronize the provider's design system with the local
     * overrides. Any value defined on the instance will take priority
     * over the value defined by the provider
     */
    private syncDesignSystemWithProvider;
    private isValidDesignSystemValue;
}

/**
 * @internal
 * @deprecated - use {@link defineDesignSystemProvider}
 */
export declare const designSystemProvider: typeof defineDesignSystemProvider;

/**
 * The template for the {@link @microsoft/fast-foundation#DesignSystemProvider} component.
 * @public
 */
export declare const DesignSystemProviderTemplate: ViewTemplate<DesignSystemProvider>;

/**
 * Design system contextual APIs and configuration usable within component
 * registries.
 * @alpha
 */
export declare interface DesignSystemRegistrationContext {
    readonly elementPrefix: string;
    tryDefineElement(name: string, type: Constructable, callback: ElementDefinitionCallback): any;
}

/**
 * @alpha
 */
export declare const DesignSystemRegistrationContext: InterfaceSymbol<DesignSystemRegistrationContext>;

/**
 * Describes a DesignToken instance.
 * @alpha
 */
export declare interface DesignToken<T extends string | number | boolean | BigInteger | null | Array<any> | symbol | {}> {
    /**
     * The name of the token
     */
    readonly name: string;
    /**
     * A list of elements for which the DesignToken has a value set
     */
    readonly appliedTo: HTMLElement[];
    /**
     * Get the token value for an element.
     * @param element - The element to get the value for
     * @returns - The value set for the element, or the value set for the nearest element ancestor.
     */
    getValueFor(element: HTMLElement): StaticDesignTokenValue<T>;
    /**
     * Sets the token to a value for an element.
     * @param element - The element to set the value for.
     * @param value - The value.
     */
    setValueFor(element: HTMLElement, value: DesignTokenValue<T> | DesignToken<T>): void;
    /**
     * Removes a value set for an element.
     * @param element - The element to remove the value from
     */
    deleteValueFor(element: HTMLElement): this;
    /**
     * Associates a default value to the token
     */
    withDefault(value: DesignTokenValue<T> | DesignToken<T>): this;
    /**
     * Subscribes a subscriber to change records for a token. If an element is provided, only
     * change records for that element will be emitted.
     */
    subscribe(subscriber: DesignTokenSubscriber<this>, target?: HTMLElement): void;
    /**
     * Unsubscribes a subscriber from change records for a token.
     */
    unsubscribe(subscriber: DesignTokenSubscriber<this>, target?: HTMLElement): void;
}

/**
 * Factory object for creating {@link (DesignToken:interface)} instances.
 * @alpha
 */
export declare const DesignToken: Readonly<{
    create: typeof create;
}>;

/**
 * @alpha
 */
export declare interface DesignTokenChangeRecord<T extends DesignToken<any>> {
    /**
     * The element for which the value was changed
     */
    target: HTMLElement;
    /**
     * The token that was changed
     */
    token: T;
}

/**
 * Describes a {@link (DesignToken:interface)} configuration
 * @alpha
 */
export declare interface DesignTokenConfiguration {
    /**
     * The name of the {@link (DesignToken:interface)}.
     */
    name: string;
    /**
     * The name of the CSS custom property to associate to the {@link (DesignToken:interface)}, or null
     * if not CSS custom property should be associated.
     */
    cssCustomPropertyName?: string | null;
}

/**
 * @alpha
 */
export declare interface DesignTokenSubscriber<T extends DesignToken<any>> {
    handleChange(record: DesignTokenChangeRecord<T>): void;
}

/**
 * The type that a {@link (DesignToken:interface)} can be set to.
 * @alpha
 */
export declare type DesignTokenValue<T> = StaticDesignTokenValue<T> | DerivedDesignTokenValue<T>;

/**
 * @alpha
 */
export declare const DI: Readonly<{
    createContainer(config?: Partial<ContainerConfiguration> | undefined): Container;
    findResponsibleContainer(element: HTMLElement): Container;
    findParentContainer(element: HTMLElement): Container;
    getOrCreateDOMContainer(element?: HTMLElement, config?: Partial<Pick<ContainerConfiguration, "responsibleForOwnerRequests" | "defaultResolver">> | undefined): Container;
    getDesignParamtypes: (Type: Constructable | Injectable) => readonly Key[] | undefined;
    getAnnotationParamtypes: (Type: Constructable | Injectable) => readonly Key[] | undefined;
    getOrCreateAnnotationParamTypes(Type: Constructable | Injectable): Key[];
    getDependencies(Type: Constructable | Injectable): Key[];
    defineProperty(target: {}, propertyName: string, key: Key, respectConnection?: boolean): void;
    createInterface<K extends Key>(nameConfigOrCallback?: string | InterfaceConfiguration | ((builder: ResolverBuilder<K>) => Resolver<K>) | undefined, configuror?: ((builder: ResolverBuilder<K>) => Resolver<K>) | undefined): InterfaceSymbol<K>;
    inject(...dependencies: Key[]): (target: any, key?: string | number | undefined, descriptor?: number | PropertyDescriptor | undefined) => void;
    /**
     * Registers the `target` class as a transient dependency; each time the dependency is resolved
     * a new instance will be created.
     *
     * @param target - The class / constructor function to register as transient.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     *
     * @example
     * ```ts
     * // On an existing class
     * class Foo { }
     * DI.transient(Foo);
     *
     * // Inline declaration
     * const Foo = DI.transient(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    transient<T extends Constructable<{}>>(target: T & Partial<RegisterSelf<T>>): T & RegisterSelf<T>;
    /**
     * Registers the `target` class as a singleton dependency; the class will only be created once. Each
     * consecutive time the dependency is resolved, the same instance will be returned.
     *
     * @param target - The class / constructor function to register as a singleton.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     * @example
     * ```ts
     * // On an existing class
     * class Foo { }
     * DI.singleton(Foo);
     *
     * // Inline declaration
     * const Foo = DI.singleton(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     *
     * @alpha
     */
    singleton<T_1 extends Constructable<{}>>(target: T_1 & Partial<RegisterSelf<T_1>>, options?: SingletonOptions): T_1 & RegisterSelf<T_1>;
}>;

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#dialog | ARIA dialog }.
 *
 * @public
 */
export declare class Dialog extends FASTElement {
    /**
     * Indicates the element is modal. When modal, user interaction will be limited to the contents of the element.
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: modal
     */
    modal: boolean;
    /**
     * The hidden state of the element.
     *
     * @public
     * @defaultValue - false
     * @remarks
     * HTML Attribute: hidden
     */
    hidden: boolean;
    /**
     * Indicates that the dialog should trap focus.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: trap-focus
     */
    trapFocus: boolean;
    /**
     * The id of the element describing the dialog.
     * @public
     * @remarks
     * HTML Attribute: aria-describedby
     */
    ariaDescribedby: string;
    /**
     * The id of the element labeling the dialog.
     * @public
     * @remarks
     * HTML Attribute: aria-labelledby
     */
    ariaLabelledby: string;
    /**
     * The label surfaced to assistive technologies.
     *
     * @public
     * @remarks
     * HTML Attribute: aria-label
     */
    ariaLabel: string;
    /**
     * @internal
     */
    dialog: HTMLDivElement;
    private tabbableElements;
    private observer;
    /**
     * @internal
     */
    dismiss(): void;
    /**
     * The method to show the dialog.
     *
     * @public
     */
    show(): void;
    /**
     * The method to hide the dialog.
     *
     * @public
     */
    hide(): void;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    private onChildListChange;
    private trapFocusChanged;
    private handleDocumentKeydown;
    private handleDocumentFocus;
    private handleTabKeyDown;
    /**
     * focus on first element of tab queue
     */
    private focusFirstElement;
    /**
     * we should only focus if focus has not already been brought to the dialog
     */
    private shouldForceFocus;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Dialog} component.
 * @public
 */
export declare const DialogTemplate: ViewTemplate<Dialog>;

/**
 * Behavior to conditionally apply LTR and RTL stylesheets. To determine which to apply,
 * the behavior will use the nearest DesignSystemProvider's 'direction' design system value.
 *
 * @public
 * @example
 * ```ts
 * import { css } from "@microsoft/fast-element";
 * import { DirectionalStyleSheetBehavior } from "@microsoft/fast-foundation";
 *
 * css`
 *  // ...
 * `.withBehaviors(new DirectionalStyleSheetBehavior(
 *   css`:host { content: "ltr"}`),
 *   css`:host { content: "rtl"}`),
 * )
 * ```
 */
export declare class DirectionalStyleSheetBehavior implements Behavior {
    private ltr;
    private rtl;
    private cache;
    constructor(ltr: ElementStyles | null, rtl: ElementStyles | null);
    /**
     * @internal
     */
    bind(source: FASTElement & HTMLElement): void;
    /**
     * @internal
     */
    unbind(source: FASTElement & HTMLElement): void;
    private attach;
}

/**
 * The CSS value for disabled cursors.
 * @public
 */
export declare const disabledCursor = "not-allowed";

/**
 * A Disclosure Custom HTML Element.
 * Based largely on the {@link https://w3c.github.io/aria-practices/#disclosure | disclosure element }.
 *
 * @public
 */
export declare class Disclosure extends FASTElement {
    /**
     * Determines if the element should show the extra content or not.
     *
     * @public
     */
    expanded: boolean;
    /**
     * Invoker title
     *
     * @public
     */
    title: string;
    /**
     * @internal
     */
    details: HTMLDetailsElement;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Show extra content.
     */
    show(): void;
    /**
     * Hide extra content.
     */
    hide(): void;
    /**
     * Toggle the current(expanded/collapsed) state.
     */
    toggle(): void;
    /**
     * Register listener and set default disclosure mode
     */
    protected setup(): void;
    /**
     * Update the aria attr and fire `toggle` event
     */
    protected onToggle(): void;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Disclosure} component.
 * @public
 */
export declare const DisclosureTemplate: ViewTemplate<Disclosure>;

/**
 * Applies a CSS display property.
 * Also adds CSS rules to not display the element when the [hidden] attribute is applied to the element.
 * @param display - The CSS display property value
 * @public
 */
export declare function display(displayValue: CSSDisplayPropertyValue): string;

/**
 * A Divider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.
 *
 * @public
 */
export declare class Divider extends FASTElement {
    /**
     * The role of the element.
     *
     * @public
     * @defaultValue - {@link DividerRole.separator}
     * @remarks
     * HTML Attribute: role
     */
    role: DividerRole;
}

/**
 * Divider roles
 * @public
 */
export declare enum DividerRole {
    /**
     * The divider semantically separates content
     */
    separator = "separator",
    /**
     * The divider has no semantic value and is for visual presentation only.
     */
    presentation = "presentation"
}

/**
 * The template for the {@link @microsoft/fast-foundation#Divider} component.
 * @public
 */
export declare const DividerTemplate: ViewTemplate<Divider>;

/**
 * @alpha
 */
export declare interface DOMParentLocatorEventDetail {
    container: Container | void;
}

declare type EagerOrLazyFoundationOption<T, K extends FoundationElementDefinition> = T | LazyFoundationOption<T, K>;

/**
 * The callback type that is invoked when an element can be defined by a design system.
 * @alpha
 */
export declare type ElementDefinitionCallback = (ctx: ElementDefinitionContext) => void;

/**
 * The design system context in which an element can be defined.
 * @alpha
 */
export declare interface ElementDefinitionContext {
    readonly name: string;
    readonly type: Constructable;
    readonly container: Container;
    readonly willDefine: boolean;
    defineElement(definition?: ContextualElementDefinition): void;
    tagFor(type: Constructable): string;
}

/**
 * The callback type that is invoked when two elements are trying to define themselves with
 * the same name.
 * @alpha
 */
export declare type ElementDisambiguationCallback = (nameAttempt: string, typeAttempt: Constructable, existingType: Constructable) => string | null;

/**
 * Source:
 * https://html.spec.whatwg.org/multipage/custom-elements.html#elementinternals
 */
declare interface ElementInternals {
    /**
     * Returns the form owner of internals target element.
     */
    readonly form: HTMLFormElement | null;
    /**
     * Returns a NodeList of all the label elements that internals target element is associated with.
     */
    readonly labels: NodeList;
    /**
     * Returns the error message that would be shown to the user if internals target element was to be checked for validity.
     */
    readonly validationMessage: string;
    /**
     * Returns the ValidityState object for internals target element.
     */
    readonly validity: ValidityState;
    /**
     * Returns true if internals target element will be validated when the form is submitted; false otherwise.
     */
    readonly willValidate: boolean;
    /**
     * Returns true if internals target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case.
     */
    checkValidity(): boolean;
    /**
     * Returns true if internals target element has no validity problems; otherwise,
     * returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
     */
    reportValidity(): boolean;
    /**
     * Sets both the state and submission value of internals target element to value.
     *
     * While "null" isn't enumerated as a argument type (here)[https://html.spec.whatwg.org/multipage/custom-elements.html#the-elementinternals-interface],
     * In practice it appears to remove the value from the form data on submission. Adding it as a valid type here
     * becuase that capability is required for checkbox and radio types
     */
    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;
    /**
     * Marks internals target element as suffering from the constraints indicated by the flags argument,
     * and sets the element's validation message to message.
     * If anchor is specified, the user agent might use
     * it to indicate problems with the constraints of internals target
     * element when the form owner is validated interactively or reportValidity() is called.
     */
    setValidity(flags: ValidityStateFlags, message?: string, anchor?: HTMLElement): void;
}

declare let ElementInternals: {
    prototype: ElementInternals;
    new (): ElementInternals;
};

/**
 * The template for the end element.
 * For use with {@link StartEnd}
 *
 * @public
 */
export declare const endTemplate: ViewTemplate<StartEnd>;

/**
 * @alpha
 */
export declare interface Factory<T extends Constructable = any> {
    readonly Type: T;
    registerTransformer(transformer: Transformer_2<T>): void;
    construct(container: Container, dynamicDependencies?: Key[]): Resolved<T>;
}

/** @internal */
export declare class FactoryImpl<T extends Constructable = any> implements Factory<T> {
    Type: T;
    private readonly dependencies;
    private transformers;
    constructor(Type: T, dependencies: Key[]);
    construct(container: Container, dynamicDependencies?: Key[]): Resolved<T>;
    registerTransformer(transformer: (instance: any) => any): void;
}

/**
 * A Flipper Custom HTML Element.
 * Flippers are a form of button that implies directional content navigation, such as in a carousel.
 *
 * @public
 */
export declare class Flipper extends FASTElement {
    /**
     * The disabled state of the flipper.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: aria-hidden
     */
    hiddenFromAT: boolean;
    /**
     * The direction that the flipper implies navigating.
     *
     * @public
     * @remarks
     * HTML Attribute: direction
     */
    direction: FlipperDirection;
}

/**
 * The direction options for flipper.
 * @public
 */
export declare enum FlipperDirection {
    next = "next",
    previous = "previous"
}

/**
 * The template for the {@link @microsoft/fast-foundation#Flipper} component.
 * @public
 */
export declare const FlipperTemplate: ViewTemplate<Flipper>;

/**
 * The string representing the focus selector to be used. Value
 * will be "focus-visible" when https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo
 * is supported and "focus" when it is not.
 *
 * @public
 */
export declare const focusVisible: string;

/**
 * This can be used to construct a behavior to apply a forced-colors only stylesheet.
 * @public
 */
export declare const forcedColorsStylesheetBehavior: (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * Base function for providing Custom Element Form Association.
 *
 * @alpha
 */
export declare function FormAssociated<T extends ConstructableFormAssociated>(BaseCtor: T): T;

/**
 * Base class for providing Custom Element Form Association.
 *
 * @alpha
 */
export declare interface FormAssociated extends Omit<ElementInternals, "labels"> {
    dirtyValue: boolean;
    disabled: boolean;
    readonly elementInternals: ElementInternals | null;
    readonly formAssociated: boolean;
    initialValue: string;
    readonly labels: ReadonlyArray<Node[]>;
    name: string;
    required: boolean;
    value: string;
    attachProxy(): void;
    detachProxy(): void;
    disabledChanged?(previous: boolean, next: boolean): void;
    formDisabledCallback?(disabled: boolean): void;
    formResetCallback(): void;
    initialValueChanged?(previous: any, next: any): void;
    nameChanged?(previous: any, next: any): void;
    requiredChanged(prev: boolean, next: boolean): void;
    stopPropagation(e: Event): void;
    validate(): void;
    valueChanged(previous: any, next: any): void;
}

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Button:class)} component.
 *
 * @internal
 */
declare class FormAssociatedButton extends FormAssociatedButton_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedButton_base: typeof _Button;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.
 *
 * @internal
 */
declare class FormAssociatedCheckbox extends FormAssociatedCheckbox_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedCheckbox_base: typeof _Checkbox;

/**
 * A form-associated base class for the {@link (Combobox:class)} component.
 *
 * @internal
 */
declare class FormAssociatedCombobox extends FormAssociatedCombobox_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedCombobox_base: typeof _Combobox;

/**
 * Combined type to describe a Form-associated element.
 *
 * @alpha
 */
export declare type FormAssociatedElement = FormAssociated & FASTElement & HTMLElement & FormAssociatedProxy;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(NumberField:class)} component.
 *
 * @internal
 */
declare class FormAssociatedNumberField extends FormAssociatedNumberField_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedNumberField_base: typeof _NumberField;

/**
 * Identifies a class as having a proxy element and optional submethods related
 * to the proxy element.
 *
 * @alpha
 */
export declare interface FormAssociatedProxy {
    proxy: ProxyElement;
    disabledChanged?(previous: boolean, next: boolean): void;
    formDisabledCallback?(disabled: boolean): void;
    formResetCallback?(): void;
    initialValueChanged?(previous: any, next: any): void;
    valueChanged?(previous: any, next: any): void;
    nameChanged?(previous: any, next: any): void;
}

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Radio:class)} component.
 *
 * @internal
 */
declare class FormAssociatedRadio extends FormAssociatedRadio_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedRadio_base: typeof _Radio;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Select:class)} component.
 *
 * @internal
 */
declare class FormAssociatedSelect extends FormAssociatedSelect_base {
    proxy: HTMLSelectElement;
}

declare const FormAssociatedSelect_base: typeof _Select;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Slider:class)} component.
 *
 * @internal
 */
declare class FormAssociatedSlider extends FormAssociatedSlider_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedSlider_base: typeof _Slider;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Switch:class)} component.
 *
 * @internal
 */
declare class FormAssociatedSwitch extends FormAssociatedSwitch_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedSwitch_base: typeof _Switch;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(TextArea:class)} component.
 *
 * @internal
 */
declare class FormAssociatedTextArea extends FormAssociatedTextArea_base {
    proxy: HTMLTextAreaElement;
}

declare const FormAssociatedTextArea_base: typeof _TextArea;

/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(TextField:class)} component.
 *
 * @internal
 */
declare class FormAssociatedTextField extends FormAssociatedTextField_base {
    proxy: HTMLInputElement;
}

declare const FormAssociatedTextField_base: typeof _TextField;

/**
 * Defines a foundation element class that:
 * 1. Connects the element to its ComponentPresentation
 * 2. Allows resolving the element template from the instance or ComponentPresentation
 * 3. Allows resolving the element styles from the instance or ComponentPresentation
 *
 * @alpha
 */
export declare class FoundationElement extends FASTElement {
    private container;
    private _presentation;
    /**
     * A property which resolves the ComponentPresentation instance
     * for the current component.
     */
    protected get $presentation(): ComponentPresentation;
    /**
     * Sets the template of the element instance. When undefined,
     * the element will attempt to resolve the template from
     * the $fastProvider
     */
    template: ElementViewTemplate | void | null;
    protected templateChanged(): void;
    /**
     * Sets the default styles for the element instance. When undefined,
     * the element will attempt to resolve default styles from
     * the $fastProvider
     */
    styles: ElementStyles | void | null;
    protected stylesChanged(): void;
    /**
     * The connected callback for this FASTElement.
     * @remarks
     * This method is invoked by the platform whenever this FoundationElement
     * becomes connected to the document.
     */
    connectedCallback(): void;
    /**
     * Defines an element registry function with a set of element definition defaults.
     * @param elementDefinition - The definition of the element to create the registry
     * function for.
     */
    static compose<T extends FoundationElementDefinition = FoundationElementDefinition>(elementDefinition: T): (overrideDefinition?: OverrideFoundationElementDefinition<T>) => Registry;
}

/**
 * An element definition used to define a FoundationElement when registered through the design
 * system registry.
 * @alpha
 */
export declare interface FoundationElementDefinition {
    /**
     * The non-prefixed name of the component.
     */
    baseName: string;
    /**
     * The template to render for the custom element.
     */
    readonly template?: EagerOrLazyFoundationOption<ElementViewTemplate, this>;
    /**
     * The styles to associate with the custom element.
     */
    readonly styles?: EagerOrLazyFoundationOption<ComposableStyles | ComposableStyles[], this>;
    /**
     * The custom attributes of the custom element.
     */
    readonly attributes?: EagerOrLazyFoundationOption<(AttributeConfiguration | string)[], this>;
    /**
     * Options controlling the creation of the custom element's shadow DOM.
     */
    readonly shadowOptions?: EagerOrLazyFoundationOption<Partial<ShadowRootInit> | null, this>;
    /**
     * Options controlling how the custom element is defined with the platform.
     */
    readonly elementOptions?: EagerOrLazyFoundationOption<ElementDefinitionOptions, this>;
}

/**
 * Enumerates auto generated header options
 * default option generates a non-sticky header row
 *
 * @public
 */
export declare enum GenerateHeaderOptions {
    none = "none",
    default = "default",
    sticky = "sticky"
}

/**
 * a method to determine the current localization direction of the view
 * @param rootNode - the HTMLElement to begin the query from, usually "this" when used in a component controller
 * @public
 */
export declare const getDirection: (rootNode: HTMLElement) => Direction;

/**
 * A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.
 * @public
 */
export declare const hidden = ":host([hidden]){display:none}";

/**
 * Defines the horizontal positioning options for an anchored region
 *
 * @beta
 */
export declare type HorizontalPosition = "start" | "end" | "left" | "right" | "unset";

/**
 * A HorizontalScroll Custom HTML Element
 * @public
 */
export declare class HorizontalScroll extends FASTElement {
    /**
     * Reference to DOM element that scrolls the content
     * @public
     */
    scrollContainer: HTMLDivElement;
    /**
     * Reference to flipper to scroll to previous content
     * @public
     */
    previousFlipper: HTMLDivElement;
    /**
     * Reference to flipper to scroll to the next content
     * @public
     */
    nextFlipper: HTMLDivElement;
    /**
     * @internal
     */
    private framesPerSecond;
    /**
     * The calculated duration for a frame.
     *
     * @internal
     */
    private get frameTime();
    /**
     * The timeout identifier for the scroll event throttling.
     *
     * @internal
     */
    private resizeTimeout?;
    /**
     * The timeout identifier for the scroll event throttling.
     *
     * @internal
     */
    private scrollTimeout?;
    /**
     * Flag indicating that the items are being updated
     *
     * @internal
     */
    private updatingItems;
    /**
     * Speed of scroll in pixels per second
     * @public
     */
    speed: number;
    /**
     * Attribute used for easing, defaults to ease-in-out
     * @public
     */
    easing: ScrollEasing;
    /**
     * Scrolling state
     * @internal
     */
    private scrolling;
    /**
     * Detects if the component has been resized
     * @internal
     */
    private resizeDetector;
    /**
     * Width of the parent container
     * @internal
     */
    private width;
    /**
     * Scroll stop positions between elements
     * @internal
     */
    private scrollStops;
    /**
     * The default slotted items placed in the scrolling container.
     *
     * @public
     */
    scrollItems: HTMLElement[];
    /**
     * In RTL mode
     * @internal
     */
    private get isRtl();
    /**
     * View: default | mobile
     * @public
     */
    view: HorizontalScrollView;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Updates scroll stops and flippers when scroll items change
     * @param previous - current scroll items
     * @param next - new updated scroll items
     * @public
     */
    scrollItemsChanged(previous: any, next: any): void;
    /**
     * destroys the instance's resize observer
     * @internal
     */
    private disconnectResizeDetector;
    /**
     * initializes the instance's resize observer
     * @internal
     */
    private initializeResizeDetector;
    /**
     * Looks for slots and uses child nodes instead
     * @internal
     */
    private updateScrollStops;
    /**
     * Finds all of the scroll stops between elements
     * @internal
     */
    private setStops;
    /**
     *
     */
    private fixScrollMisalign;
    /**
     * Sets the controls view if enabled
     * @internal
     */
    private setFlippers;
    /**
     * Scrolls items to the left
     * @public
     */
    scrollToPrevious(): void;
    /**
     * Scrolls items to the right
     * @public
     */
    scrollToNext(): void;
    /**
     * Handles scrolling with easing
     * @param position - starting position
     * @param newPosition - position to scroll to
     * @public
     */
    scrollToPosition(newPosition: number, position?: number): void;
    /**
     * Holds the timestamp of the current animation frame.
     * @internal
     */
    private moveStartTime;
    /**
     *
     * @param steps - An array of positions to move
     * @param time - The duration between moves
     * @internal
     */
    private move;
    /**
     * Monitors resize event on the horizontal-scroll element
     * @public
     */
    resized(): void;
    /**
     * Monitors scrolled event on the content container
     * @public
     */
    scrolled(): void;
    /**
     *
     * @param easing - Type of easing
     * @param progress - Progress completed, 0 - 1
     * @internal
     */
    private getEasedFactor;
}

/**
 * @public
 */
export declare const HorizontalScrollTemplate: ViewTemplate<HorizontalScroll>;

/**
 * The views types for a horizontal-scroll {@link @microsoft/fast-foundation#(HorizontalScroll:class)}
 * @public
 */
export declare type HorizontalScrollView = "default" | "mobile";

/**
 * Ignore tells the container not to try to inject a dependency.
 *
 * @alpha
 */
export declare function ignore(target: Injectable, property?: string | number, descriptor?: PropertyDescriptor | number): void;

/**
 * @alpha
 */
export declare const inject: (...dependencies: Key[]) => (target: any, key?: string | number | undefined, descriptor?: number | PropertyDescriptor | undefined) => void;

/**
 * @alpha
 */
export declare type Injectable<T = {}> = Constructable<T> & {
    inject?: Key[];
};

/**
 * @alpha
 */
export declare interface InterfaceConfiguration {
    /**
     * The friendly name for the interface. Useful for debugging.
     */
    friendlyName?: string;
    /**
     * When true, the dependency will be re-resolved when FASTElement connection changes.
     * If the resolved value changes due to connection change, a {@link @microsoft/fast-element#Observable.notify | notification }
     * will be emitted for the property, with the previous and next values provided to any subscriber.
     */
    respectConnection?: boolean;
}

/**
 * @alpha
 */
export declare type InterfaceSymbol<K = any> = (target: any, property: string, index?: number) => void;

/**
 * @alpha
 */
export declare interface Invoker<T extends Constructable = any> {
    invoke(container: Container, fn: T, dependencies: Key[]): Resolved<T>;
    invokeWithDynamicDependencies(container: Container, fn: T, staticDependencies: Key[], dynamicDependencies: Key[]): Resolved<T>;
}

/**
 * Determines if the element is {@link DesignSystemConsumer}
 * @param element - the element to test.
 * @public
 */
export declare function isDesignSystemConsumer(element: HTMLElement | DesignSystemConsumer): element is DesignSystemConsumer;

/**
 * Determines if the element is a {@link (ListboxOption:class)}
 *
 * @param element - the element to test.
 * @public
 */
export declare function isListboxOption(el: Element): el is ListboxOption;

/**
 * check if the item is a tree item
 * @public
 * @remarks
 * determines if element is an HTMLElement and if it has the role treeitem
 */
export declare function isTreeItemElement(el: Element): el is HTMLElement;

/**
 * @alpha
 */
export declare type Key = PropertyKey | object | InterfaceSymbol | Constructable | Resolver;

/**
 * Lazily inject a dependency depending on whether the [[`Key`]] is present at the time of function call.
 *
 * You need to make your argument a function that returns the type, for example
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => number )
 * }
 * const foo = container.get(Foo); // instanceof Foo
 * foo.random(); // throws
 * ```
 * would throw an exception because you haven't registered `'random'` before calling the method. This, would give you a
 * new [['Math.random()']] number each time.
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => random )
 * }
 * container.register(Registration.callback('random', Math.random ));
 * container.get(Foo).random(); // some random number
 * container.get(Foo).random(); // another random number
 * ```
 * `@lazy` does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a
 * `singleton`, `transient` would also behave as you would expect, providing you a new instance each time.
 *
 * @param key - [[`Key`]]
 * see {@link DI.createInterface} on interactions with interfaces
 *
 * @alpha
 */
export declare const lazy: (key: any) => any;

declare type LazyFoundationOption<T, K extends FoundationElementDefinition> = (context: ElementDefinitionContext, definition: OverrideFoundationElementDefinition<K>) => T;

/**
 * This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.
 * @public
 */
export declare const lightModeStylesheetBehavior: (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * A Listbox Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#listbox | ARIA listbox }.
 *
 * @public
 */
export declare class Listbox extends FASTElement {
    /**
     * The index of the selected option
     *
     * @public
     */
    selectedIndex: number;
    selectedIndexChanged(prev: number, next: number): void;
    /**
     * Typeahead timeout in milliseconds.
     *
     * @internal
     */
    protected static readonly TYPE_AHEAD_TIMEOUT_MS = 1000;
    /**
     * @internal
     */
    protected typeaheadBuffer: string;
    typeaheadBufferChanged(prev: string, next: string): void;
    /**
     * @internal
     */
    protected typeaheadTimeout: number;
    /**
     * Flag for the typeahead timeout expiration.
     *
     * @internal
     */
    protected typeAheadExpired: boolean;
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */
    role: string;
    /**
     * The disabled state of the listbox.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * @internal
     */
    slottedOptions: HTMLElement[];
    slottedOptionsChanged(prev: any, next: any): void;
    /**
     * The internal unfiltered list of selectable options.
     *
     * @internal
     */
    protected _options: ListboxOption[];
    /**
     * The list of options.
     *
     * @public
     */
    get options(): ListboxOption[];
    set options(value: ListboxOption[]);
    /**
     * A collection of the selected options.
     *
     * @public
     */
    selectedOptions: ListboxOption[];
    protected selectedOptionsChanged(prev: any, next: any): void;
    /**
     * @internal
     */
    get firstSelectedOption(): ListboxOption;
    /**
     * @internal
     */
    protected focusAndScrollOptionIntoView(): void;
    /**
     * A standard `click` event creates a `focus` event before firing, so a
     * `mousedown` event is used to skip that initial focus.
     *
     * @internal
     */
    private shouldSkipFocus;
    /**
     * @internal
     */
    focusinHandler(e: FocusEvent): void;
    /**
     * Prevents `focusin` events from firing before `click` events when the
     * element is unfocused.
     *
     * @internal
     */
    mousedownHandler(e: MouseEvent): boolean | void;
    /**
     * @internal
     */
    protected setDefaultSelectedOption(): void;
    /**
     * Sets an option as selected and gives it focus.
     *
     * @param index - option index to select
     * @public
     */
    protected setSelectedOptions(): void;
    /**
     * A static filter to include only enabled elements
     *
     * @param n - element to filter
     * @public
     */
    static slottedOptionFilter: (n: HTMLElement) => boolean;
    /**
     * Moves focus to the first selectable option
     *
     * @public
     */
    selectFirstOption(): void;
    /**
     * Moves focus to the last selectable option
     *
     * @internal
     */
    selectLastOption(): void;
    /**
     * Moves focus to the next selectable option
     *
     * @internal
     */
    selectNextOption(): void;
    get length(): number;
    /**
     * Moves focus to the previous selectable option
     *
     * @internal
     */
    selectPreviousOption(): void;
    /**
     * Handles click events for listbox options
     *
     * @internal
     */
    clickHandler(e: MouseEvent): boolean | void;
    /**
     * Handles keydown actions for listbox navigation and typeahead
     *
     * @internal
     */
    keydownHandler(e: KeyboardEvent): boolean | void;
    /**
     * Move focus to an option whose label matches characters typed by the user.
     * Consecutive keystrokes are batched into a buffer of search text used
     * to match against the set of options.  If TYPE_AHEAD_TIMEOUT_MS passes
     * between consecutive keystrokes, the search restarts.
     *
     * @param key - the key to be evaluated
     */
    handleTypeAhead: (key: string) => void;
}

/**
 * @internal
 */
export declare interface Listbox extends DelegatesARIAListbox {
}

/**
 * An Option Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA menuitem }.
 *
 * @public
 */
export declare class ListboxOption extends FASTElement {
    /**
     * @internal
     */
    private _value;
    /**
     * @internal
     */
    proxy: HTMLOptionElement;
    /**
     * The defaultSelected state of the option.
     * @public
     */
    defaultSelected: boolean;
    protected defaultSelectedChanged(): void;
    /**
     * Tracks whether the "selected" property has been changed.
     * @internal
     */
    private dirtySelected;
    /**
     * The disabled state of the option.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    protected disabledChanged(prev: any, next: any): void;
    /**
     * The selected attribute value. This sets the initial selected value.
     *
     * @public
     * @remarks
     * HTML Attribute: selected
     */
    selectedAttribute: boolean;
    protected selectedAttributeChanged(): void;
    /**
     * The checked state of the control.
     *
     * @public
     */
    selected: boolean;
    protected selectedChanged(): void;
    /**
     * Track whether the value has been changed from the initial value
     */
    dirtyValue: boolean;
    /**
     * The initial value of the option. This value sets the `value` property
     * only when the `value` property has not been explicitly set.
     *
     * @remarks
     * HTML Attribute: value
     */
    protected initialValue: string;
    initialValueChanged(previous: string, next: string): void;
    get label(): string;
    get text(): string;
    set value(next: string);
    get value(): string;
    get form(): HTMLFormElement | null;
    constructor(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean);
}

/**
 * @internal
 */
export declare interface ListboxOption extends StartEnd {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(ListboxOption:class)} component.
 * @public
 */
export declare const ListboxOptionTemplate: ViewTemplate<ListboxOption>;

/**
 * Listbox role.
 * @public
 */
export declare enum ListboxRole {
    listbox = "listbox"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Listbox:class)} component.
 * @public
 */
export declare const ListboxTemplate: ViewTemplate<Listbox>;

/**
 * An abstract behavior to react to media queries. Implementations should implement
 * the `constructListener` method to perform some action based on media query changes.
 *
 * @public
 */
export declare abstract class MatchMediaBehavior implements Behavior {
    /**
     * The media query that the behavior operates on.
     */
    readonly query: MediaQueryList;
    /**
     *
     * @param query - The media query to operate from.
     */
    constructor(query: MediaQueryList);
    /**
     * Constructs a function that will be invoked with the MediaQueryList context
     * @param source - the element the behavior is acting on.
     */
    protected abstract constructListener(source: typeof FASTElement): MediaQueryListListener;
    /**
     * Binds the behavior to the element.
     * @param source - The element for which the behavior is bound.
     */
    bind(source: typeof FASTElement & HTMLElement): void;
    /**
     * Unbinds the behavior from the element.
     * @param source - The element for which the behavior is unbinding.
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
    /**
     * The behavior needs to operate on element instances but elements might share a behavior instance.
     * To ensure proper attachment / detachment per instance, we construct a listener for
     * each bind invocation and cache the listeners by element reference.
     */
    private listenerCache;
}

/**
 * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that
 * styles are applied while the a query matches the environment and that styles are not applied if the query does
 * not match the environment.
 *
 * @public
 */
export declare class MatchMediaStyleSheetBehavior extends MatchMediaBehavior {
    /**
     * The media query that the behavior operates on.
     */
    readonly query: MediaQueryList;
    /**
     * The styles object to be managed by the behavior.
     */
    readonly styles: ElementStyles;
    /**
     * Constructs a {@link MatchMediaStyleSheetBehavior} instance.
     * @param query - The media query to operate from.
     * @param styles - The styles to coordinate with the query.
     */
    constructor(query: MediaQueryList, styles: ElementStyles);
    /**
     * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for
     * a provided query.
     * @param query - The media query to operate from.
     *
     * @public
     * @example
     *
     * ```ts
     * import { css } from "@microsoft/fast-element";
     * import { MatchMediaStyleSheetBehavior } from "@microsoft/fast-foundation";
     *
     * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(
     *   window.matchMedia("(orientation: landscape)")
     * );
     * const styles = css`
     *   :host {
     *     width: 200px;
     *     height: 400px;
     *   }
     * `
     * .withBehaviors(landscapeBehavior(css`
     *   :host {
     *     width: 400px;
     *     height: 200px;
     *   }
     * `))
     * ```
     */
    static with(query: MediaQueryList): (styles: ElementStyles) => MatchMediaStyleSheetBehavior;
    /**
     * Constructs a match-media listener for a provided element.
     * @param source - the element for which to attach or detach styles.
     * @internal
     */
    protected constructListener(source: typeof FASTElement): MediaQueryListListener;
    /**
     * Unbinds the behavior from the element.
     * @param source - The element for which the behavior is unbinding.
     * @internal
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
}

/**
 * Construct a behavior factory that will conditionally apply a stylesheet based
 * on a MediaQueryList
 *
 * @param query - The MediaQueryList to subscribe to matches for.
 *
 * @public
 * @deprecated - use {@link MatchMediaStyleSheetBehavior.with}
 */
export declare function matchMediaStylesheetBehaviorFactory(query: MediaQueryList): (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * An event listener fired by a {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList | MediaQueryList }.
 * @public
 */
export declare type MediaQueryListListener = (this: MediaQueryList, ev?: MediaQueryListEvent) => void;

/**
 * A Menu Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#menu | ARIA menu }.
 *
 * @public
 */
export declare class Menu extends FASTElement {
    /**
     * @internal
     */
    items: HTMLSlotElement;
    private itemsChanged;
    private menuItems;
    private expandedItem;
    /**
     * The index of the focusable element in the items array
     * defaults to -1
     */
    private focusIndex;
    private static focusableElementRoles;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    readonly isNestedMenu: () => boolean;
    /**
     * Focuses the first item in the menu.
     *
     * @public
     */
    focus(): void;
    /**
     * Collapses any expanded menu items.
     *
     * @public
     */
    collapseExpandedItem(): void;
    /**
     * @internal
     */
    handleMenuKeyDown(e: KeyboardEvent): void | boolean;
    /**
     * if focus is moving out of the menu, reset to a stable initial state
     * @internal
     */
    handleFocusOut: (e: FocusEvent) => void;
    private handleItemFocus;
    private handleExpandedChanged;
    private setItems;
    private resetItems;
    /**
     * handle change from child element
     */
    private changeHandler;
    /**
     * get an array of valid DOM children
     */
    private domChildren;
    /**
     * check if the item is a menu item
     */
    private isMenuItemElement;
    /**
     * check if the item is focusable
     */
    private isFocusableElement;
    private setFocus;
}

/**
 * A Switch Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.
 *
 * @public
 */
export declare class MenuItem extends FASTElement {
    /**
     * The disabled state of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * The expanded state of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: expanded
     */
    expanded: boolean;
    private expandedChanged;
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */
    role: MenuItemRole;
    /**
     * The checked value of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checked: boolean;
    private checkedChanged;
    /**
     * reference to the anchored region
     *
     * @internal
     */
    submenuRegion: AnchoredRegion;
    /**
     * @internal
     */
    hasSubmenu: boolean;
    /**
     * Track current direction to pass to the anchored region
     *
     * @internal
     */
    currentDirection: Direction;
    /**
     * @internal
     */
    submenu: Element | undefined;
    private focusSubmenuOnLoad;
    private observer;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    handleMenuItemKeyDown: (e: KeyboardEvent) => boolean;
    /**
     * @internal
     */
    handleMenuItemClick: (e: MouseEvent) => boolean;
    /**
     * @internal
     */
    submenuLoaded: () => void;
    /**
     * @internal
     */
    handleMouseOver: (e: MouseEvent) => boolean;
    /**
     * @internal
     */
    handleMouseOut: (e: MouseEvent) => boolean;
    /**
     * @internal
     */
    private expandAndFocus;
    /**
     * @internal
     */
    private invoke;
    /**
     * Gets the submenu element if any
     *
     * @internal
     */
    private updateSubmenu;
    /**
     * get an array of valid DOM children
     */
    private domChildren;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface MenuItem extends StartEnd {
}

/**
 * Menu items roles.
 * @public
 */
export declare enum MenuItemRole {
    /**
     * The menu item has a "menuitem" role
     */
    menuitem = "menuitem",
    /**
     * The menu item has a "menuitemcheckbox" role
     */
    menuitemcheckbox = "menuitemcheckbox",
    /**
     * The menu item has a "menuitemradio" role
     */
    menuitemradio = "menuitemradio"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(MenuItem:class)} component.
 * @deprecated  use {@link @microsoft/fast-foundation#(createMenuItemTemplate:function)|createMenuItemTemplate} instead.
 * @public
 */
export declare const MenuItemTemplate: ViewTemplate<MenuItem>;

/**
 * The template for the {@link @microsoft/fast-foundation#Menu} component.
 * @public
 */
export declare const MenuTemplate: ViewTemplate<Menu>;

/**
 * @alpha
 */
export declare const newInstanceForScope: (key: any) => any;

/**
 * @alpha
 */
export declare const newInstanceOf: (key: any) => any;

/**
 * A Number Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type="number" /> element }.
 *
 * @public
 */
export declare class NumberField extends FormAssociatedNumberField {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    /**
     * Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    /**
     * When true, spin buttons will not be rendered
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    hideStep: boolean;
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute does is not a valid substitute for a labeling element.
     */
    placeholder: string;
    /**
     * Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.
     * @public
     * @remarks
     * HTML Attribute: list
     */
    list: string;
    /**
     * The maximum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: maxlength
     */
    maxlength: number;
    /**
     * The minimum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: minlength
     */
    minlength: number;
    /**
     * Sets the width of the element to a specified number of characters.
     * @public
     * @remarks
     * HTMLAttribute: size
     */
    size: number;
    /**
     * Amount to increment or decrement the value by
     * @public
     * @remarks
     * HTMLAttribute: step
     */
    step: number;
    /**
     * The maximum the value can be
     * @public
     * @remarks
     * HTMLAttribute: max
     */
    max: number;
    maxChanged(previousValue: any, nextValue: any): void;
    /**
     * The minimum the value can be
     * @public
     * @remarks
     * HTMLAttribute: min
     */
    min: number;
    minChanged(previousValue: any, nextValue: any): void;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * A reference to the internal input element
     * @internal
     */
    control: HTMLInputElement;
    /**
     *
     * @param previousValue - previous stored value
     * @param nextValue - value being updated
     */
    valueChanged(previousValue: any, nextValue: any): void;
    /**
     * Ensures that the value is between the min and max values
     *
     * @param value - number to evaluate
     * @returns - a string repesentation
     *
     * @internal
     */
    private getValidValue;
    /**
     * Increments the value using the step value
     *
     * @public
     */
    stepUp(): void;
    /**
     * Decrements the value using the step value
     *
     * @public
     */
    stepDown(): void;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Handles the internal control's `input` event
     * @internal
     */
    handleTextInput(): void;
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface NumberField extends StartEnd, DelegatesARIATextbox {
}

declare class _NumberField extends FASTElement {
}

declare interface _NumberField extends FormAssociated {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(NumberField:class)} component.
 * @public
 */
export declare const NumberFieldTemplate: ViewTemplate<NumberField>;

/**
 * Allows you to optionally inject a dependency depending on whether the [[`Key`]] is present, for example
 * ```ts
 * class Foo {
 *   constructor( @inject('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo); // throws
 * ```
 * would fail
 * ```ts
 * class Foo {
 *   constructor( @optional('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo).str // somestring
 * ```
 * if you use it without a default it will inject `undefined`, so rember to mark your input type as
 * possibly `undefined`!
 *
 * @param key - [[`Key`]]
 *
 * see {@link DI.createInterface} on interactions with interfaces
 *
 * @alpha
 */
export declare const optional: (key: any) => any;

/**
 * A set of properties which the component consumer can override during the element registration process.
 * @alpha
 */
export declare type OverrideFoundationElementDefinition<T extends FoundationElementDefinition> = Partial<Omit<T, "type">> & {
    prefix?: string;
};

/**
 * @alpha
 */
export declare type ParentLocator = (owner: any) => Container | null;

/**
 * The template for the {@link @microsoft/fast-foundation#BaseProgress} component.
 * @public
 */
export declare const ProgressRingTemplate: ViewTemplate<BaseProgress>;

/**
 * The template for the {@link @microsoft/fast-foundation#BaseProgress} component.
 * @public
 */
export declare const ProgressTemplate: ViewTemplate<BaseProgress>;

/**
 * A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that
 * styles are applied while the property matches and that styles are not applied if the property does
 * not match.
 *
 * @public
 */
export declare class PropertyStyleSheetBehavior implements Behavior {
    private propertyName;
    private value;
    private styles;
    /**
     * Constructs a {@link PropertyStyleSheetBehavior} instance.
     * @param propertyName - The property name to operate from.
     * @param value - The property value to operate from.
     * @param styles - The styles to coordinate with the property.
     */
    constructor(propertyName: string, value: any, styles: ElementStyles);
    /**
     * Binds the behavior to the element.
     * @param elementInstance - The element for which the property is applied.
     */
    bind(elementInstance: FASTElement): void;
    /**
     * Unbinds the behavior from the element.
     * @param source - The element for which the behavior is unbinding.
     * @internal
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
    /**
     * Change event for the provided element.
     * @param source - the element for which to attach or detach styles.
     * @internal
     */
    handleChange(source: FASTElement, key: any): void;
}

/**
 * Avaiable types for the `proxy` property.
 * @alpha
 */
export declare type ProxyElement = HTMLSelectElement | HTMLTextAreaElement | HTMLInputElement;

/**
 * A Radio Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.
 *
 * @public
 */
export declare class Radio extends FormAssociatedRadio implements RadioControl {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The name of the radio. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname | name attribute} for more info.
     */
    name: string;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="radio"]
     *
     * @internal
     */
    initialValue: string;
    /**
     * Provides the default checkedness of the input element
     * Passed down to proxy
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean | undefined;
    private defaultCheckedChanged;
    /**
     * The checked state of the control
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input radios
     */
    private dirtyChecked;
    /**
     * @internal
     */
    connectedCallback(): void;
    constructor();
    /**
     * @internal
     */
    formResetCallback: () => void;
    private isInsideRadioGroup;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => boolean | void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

declare class _Radio extends FASTElement {
}

declare interface _Radio extends FormAssociated {
}

/**
 * A structure representing a {@link @microsoft/fast-foundation#(Radio:class)} element
 * @public
 */
export declare type RadioControl = Pick<HTMLInputElement, "checked" | "disabled" | "readOnly" | "focus" | "setAttribute" | "getAttribute">;

/**
 * An Radio Group Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.
 *
 * @public
 */
export declare class RadioGroup extends FASTElement {
    /**
     * When true, the child radios will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * Disables the radio group and child radios.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    private disabledChanged;
    /**
     * The name of the radio group. Setting this value will set the name value
     * for all child radio elements.
     *
     * @public
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    protected nameChanged(): void;
    /**
     * The value of the checked radio
     *
     * @public
     * @remarks
     * HTML Attribute: value
     */
    value: string;
    protected valueChanged(): void;
    /**
     * The orientation of the group
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */
    orientation: Orientation;
    childItems: HTMLElement[];
    /**
     * @internal
     */
    slottedRadioButtons: HTMLElement[];
    private slottedRadioButtonsChanged;
    private selectedRadio;
    private focusedRadio;
    private direction;
    private get parentToolbar();
    private get isInsideToolbar();
    private get isInsideFoundationToolbar();
    /**
     * @internal
     */
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setupRadioButtons;
    private radioChangeHandler;
    private moveToRadioByIndex;
    private moveRightOffGroup;
    private moveLeftOffGroup;
    /**
     * @internal
     */
    focusOutHandler: (e: FocusEvent) => boolean | void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
    private shouldMoveOffGroupToTheRight;
    private shouldMoveOffGroupToTheLeft;
    private checkFocusedRadio;
    private moveRight;
    private moveLeft;
    /**
     * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar
     * navigation is different when there is an ancestor with role='toolbar'
     *
     * @internal
     */
    keydownHandler: (e: KeyboardEvent) => boolean | void;
}

/**
 * The template for the {@link @microsoft/fast-foundation#RadioGroup} component.
 * @public
 */
export declare const RadioGroupTemplate: ViewTemplate<RadioGroup>;

/**
 * The template for the {@link @microsoft/fast-foundation#(Radio:class)} component.
 * @public
 */
export declare const RadioTemplate: ViewTemplate<Radio>;

/**
 * @alpha
 */
export declare type RegisterSelf<T extends Constructable> = {
    register(container: Container): Resolver<InstanceType<T>>;
    registerInRequestor: boolean;
};

/**
 * @alpha
 */
export declare interface Registration<K = any> {
    register(container: Container, key?: Key): Resolver<K>;
}

/**
 * You can use the resulting Registration of any of the factory methods
 * to register with the container, e.g.
 * ```
 * class Foo {}
 * const container = DI.createContainer();
 * container.register(Registration.instance(Foo, new Foo()));
 * container.get(Foo);
 * ```
 *
 * @alpha
 */
export declare const Registration: Readonly<{
    /**
     * allows you to pass an instance.
     * Every time you request this {@link Key} you will get this instance back.
     * ```
     * Registration.instance(Foo, new Foo()));
     * ```
     *
     * @param key -
     * @param value -
     */
    instance<T>(key: Key, value: T): Registration<T>;
    /**
     * Creates an instance from the class.
     * Every time you request this {@link Key} you will get the same one back.
     * ```
     * Registration.singleton(Foo, Foo);
     * ```
     *
     * @param key -
     * @param value -
     */
    singleton<T_1 extends Constructable<{}>>(key: Key, value: T_1): Registration<InstanceType<T_1>>;
    /**
     * Creates an instance from a class.
     * Every time you request this {@link Key} you will get a new instance.
     * ```
     * Registration.instance(Foo, Foo);
     * ```
     *
     * @param key -
     * @param value -
     */
    transient<T_2 extends Constructable<{}>>(key: Key, value: T_2): Registration<InstanceType<T_2>>;
    /**
     * Creates an instance from the method passed.
     * Every time you request this {@link Key} you will get a new instance.
     * ```
     * Registration.callback(Foo, () => new Foo());
     * Registration.callback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key -
     * @param callback -
     */
    callback<T_3>(key: Key, callback: ResolveCallback<T_3>): Registration<Resolved<T_3>>;
    /**
     * Creates an instance from the method passed.
     * On the first request for the {@link Key} your callback is called and returns an instance.
     * subsequent requests for the {@link Key}, the initial instance returned will be returned.
     * If you pass the same Registration to another container the same cached value will be used.
     * Should all references to the resolver returned be removed, the cache will expire.
     * ```
     * Registration.cachedCallback(Foo, () => new Foo());
     * Registration.cachedCallback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key -
     * @param callback -
     */
    cachedCallback<T_4>(key: Key, callback: ResolveCallback<T_4>): Registration<Resolved<T_4>>;
    /**
     * creates an alternate {@link Key} to retrieve an instance by.
     * Returns the same scope as the original {@link Key}.
     * ```
     * Register.singleton(Foo, Foo)
     * Register.aliasTo(Foo, MyFoos);
     *
     * container.getAll(MyFoos) // contains an instance of Foo
     * ```
     *
     * @param originalKey -
     * @param aliasKey -
     */
    aliasTo<T_5>(originalKey: T_5, aliasKey: Key): Registration<Resolved<T_5>>;
}>;

/**
 * @alpha
 */
export declare interface Registry {
    register(container: Container, ...params: unknown[]): void | Resolver | Container;
}

/**
 * @alpha
 */
export declare type ResolveCallback<T = any> = (handler: Container, requestor: Container, resolver: Resolver<T>) => T;

/**
 * @alpha
 */
export declare type Resolved<K> = K extends InterfaceSymbol<infer T> ? T : K extends Constructable ? InstanceType<K> : K extends ResolverLike<any, infer T1> ? T1 extends Constructable ? InstanceType<T1> : T1 : K;

/**
 * @alpha
 */
export declare interface Resolver<K = any> extends ResolverLike<Container, K> {
}

/**
 * @alpha
 */
export declare class ResolverBuilder<K> {
    private container;
    private key;
    constructor(container: Container, key: Key);
    instance(value: K): Resolver<K>;
    singleton(value: Constructable): Resolver<K>;
    transient(value: Constructable): Resolver<K>;
    callback(value: ResolveCallback<K>): Resolver<K>;
    cachedCallback(value: ResolveCallback<K>): Resolver<K>;
    aliasTo(destinationKey: Key): Resolver<K>;
    private registerResolver;
}

/** @internal */
export declare class ResolverImpl implements Resolver, Registration {
    key: Key;
    strategy: ResolverStrategy;
    state: any;
    constructor(key: Key, strategy: ResolverStrategy, state: any);
    get $isResolver(): true;
    private resolving;
    register(container: Container, key?: Key): Resolver;
    resolve(handler: Container, requestor: Container): any;
    getFactory(container: Container): Factory | null;
}

declare interface ResolverLike<C, K = any> {
    readonly $isResolver: true;
    resolve(handler: C, requestor: C): Resolved<K>;
    getFactory?(container: C): (K extends Constructable ? Factory<K> : never) | null;
}

/** @internal */
export declare const enum ResolverStrategy {
    instance = 0,
    singleton = 1,
    transient = 2,
    callback = 3,
    array = 4,
    alias = 5
}

/**
 * The easing types available for the horizontal-scroll {@link @microsoft/fast-foundation#(HorizontalScroll:class)}
 * @public
 */
export declare type ScrollEasing = "linear" | "ease-in" | "ease-out" | "ease-in-out";

/**
 * A Select Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.
 *
 * @public
 */
export declare class Select extends FormAssociatedSelect {
    /**
     * The open attribute.
     *
     * @internal
     */
    open: boolean;
    protected openChanged(): void;
    private indexWhenOpened;
    /**
     * The internal value property.
     *
     * @internal
     */
    private _value;
    /**
     * The value property.
     *
     * @public
     */
    get value(): string;
    set value(next: string);
    private updateValue;
    /**
     * Updates the proxy value when the selected index changes.
     *
     * @param prev - the previous selected index
     * @param next - the next selected index
     *
     * @internal
     */
    selectedIndexChanged(prev: any, next: any): void;
    /**
     * Reflects the placement for the listbox when the select is open.
     *
     * @public
     */
    positionAttribute: SelectPosition;
    /**
     * Indicates the initial state of the position attribute.
     *
     * @internal
     */
    private forcedPosition;
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */
    role: SelectRole;
    /**
     * Holds the current state for the calculated position of the listbox.
     *
     * @public
     */
    position: SelectPosition;
    /**
     * Calculate and apply listbox positioning based on available viewport space.
     *
     * @param force - direction to force the listbox to display
     * @public
     */
    setPositioning(): void;
    /**
     * The max height for the listbox when opened.
     *
     * @internal
     */
    maxHeight: number;
    /**
     * The value displayed on the button.
     *
     * @public
     */
    displayValue: string;
    /**
     * Synchronize the `aria-disabled` property when the `disabled` property changes.
     *
     * @param prev - The previous disabled value
     * @param next - The next disabled value
     *
     * @internal
     */
    disabledChanged(prev: boolean, next: boolean): void;
    /**
     * Reset the element to its first selectable option when its parent form is reset.
     *
     * @internal
     */
    formResetCallback: () => void;
    /**
     * Handle opening and closing the listbox when the select is clicked.
     *
     * @param e - the mouse event
     * @internal
     */
    clickHandler(e: MouseEvent): boolean | void;
    /**
     * Handle focus state when the element or its children lose focus.
     *
     * @param e - The focus event
     * @internal
     */
    focusoutHandler(e: FocusEvent): boolean | void;
    /**
     * Synchronize the form-associated proxy and update the value property of the element.
     *
     * @param prev - the previous collection of slotted option elements
     * @param next - the next collection of slotted option elements
     *
     * @internal
     */
    slottedOptionsChanged(prev: any, next: any): void;
    /**
     * Reset and fill the proxy to match the component's options.
     *
     * @internal
     */
    private setProxyOptions;
    /**
     * Handle keyboard interaction for the select.
     *
     * @param e - the keyboard event
     * @internal
     */
    keydownHandler(e: KeyboardEvent): boolean | void;
    connectedCallback(): void;
}

/**
 * @internal
 */
export declare interface Select extends StartEnd, DelegatesARIASelect {
}

declare class _Select extends Listbox {
}

declare interface _Select extends FormAssociated {
}

/**
 * Positioning directions for the listbox when a select is open.
 * @public
 */
export declare enum SelectPosition {
    above = "above",
    below = "below"
}

/**
 * Select role.
 * @public
 */
export declare enum SelectRole {
    combobox = "combobox"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Select:class)} component.
 * @public
 */
export declare const SelectTemplate: ViewTemplate<Select>;

/**
 * @alpha
 */
export declare interface ServiceLocator {
    has<K extends Key>(key: K | Key, searchAncestors: boolean): boolean;
    get<K extends Key>(key: K): Resolved<K>;
    get<K extends Key>(key: Key): Resolved<K>;
    get<K extends Key>(key: K | Key): Resolved<K>;
    getAll<K extends Key>(key: K, searchAncestors?: boolean): readonly Resolved<K>[];
    getAll<K extends Key>(key: Key, searchAncestors?: boolean): readonly Resolved<K>[];
    getAll<K extends Key>(key: K | Key, searchAncestors?: boolean): readonly Resolved<K>[];
}

/**
 * @alpha
 */
export declare const ServiceLocator: InterfaceSymbol<ServiceLocator>;

/**
 * Registers the decorated class as a singleton dependency; the class will only be created once. Each
 * consecutive time the dependency is resolved, the same instance will be returned.
 *
 * @example
 * ```ts
 * &#64;singleton()
 * class Foo { }
 * ```
 *
 * @alpha
 */
export declare function singleton<T extends Constructable>(): typeof singletonDecorator;

/**
 * @alpha
 */
export declare function singleton<T extends Constructable>(options?: SingletonOptions): typeof singletonDecorator;

/**
 * Registers the `target` class as a singleton dependency; the class will only be created once. Each
 * consecutive time the dependency is resolved, the same instance will be returned.
 *
 * @param target - The class / constructor function to register as a singleton.
 *
 * @example
 * ```ts
 * &#64;singleton()
 * class Foo { }
 * ```
 *
 * @alpha
 */
export declare function singleton<T extends Constructable>(target: T & Partial<RegisterSelf<T>>): T & RegisterSelf<T>;

declare function singletonDecorator<T extends Constructable>(target: T & Partial<RegisterSelf<T>>): T & RegisterSelf<T>;

declare type SingletonOptions = {
    scoped: boolean;
};

/**
 * A Skeleton Custom HTML Element.
 *
 * @public
 */
export declare class Skeleton extends FASTElement {
    /**
     * Indicates the Skeleton should have a filled style.
     *
     * @public
     * @remarks
     * HTML Attribute: fill
     */
    fill: string;
    /**
     * Indicates what the shape of the Skeleton should be.
     *
     * @public
     * @remarks
     * HTML Attribute: shape
     */
    shape: SkeletonShape;
    /**
     * Indicates that the component can accept a pattern URL.
     *
     * @public
     * @remarks
     * HTML Attribute: shape
     */
    pattern: string;
    /**
     * Indicates that the component has an activated shimmer effect
     *
     * @public
     * @remarks
     * HTML Attribute: shimmer
     */
    shimmer: boolean;
}

/**
 * A structure representing skeleton shapes
 * @public
 */
export declare type SkeletonShape = "rect" | "circle";

/**
 * The template for the fast-skeleton component
 * @public
 */
export declare const SkeletonTemplate: ViewTemplate<Skeleton>;

/**
 * A Slider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.
 *
 * @public
 */
export declare class Slider extends FormAssociatedSlider implements SliderConfiguration {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     *
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * @internal
     */
    track: HTMLDivElement;
    /**
     * @internal
     */
    thumb: HTMLDivElement;
    /**
     * @internal
     */
    stepMultiplier: number;
    /**
     * @internal
     */
    direction: Direction;
    /**
     * @internal
     */
    isDragging: boolean;
    /**
     * @internal
     */
    position: string;
    /**
     * @internal
     */
    trackWidth: number;
    /**
     * @internal
     */
    trackMinWidth: number;
    /**
     * @internal
     */
    trackHeight: number;
    /**
     * @internal
     */
    trackLeft: number;
    /**
     * @internal
     */
    trackMinHeight: number;
    /**
     * Custom function that generates a string for the component's "aria-valuetext" attribute based on the current value.
     *
     * @public
     */
    valueTextFormatter: (value: string) => string | null;
    /**
     * @internal
     */
    valueChanged(previous: any, next: any): void;
    /**
     * The minimum allowed value.
     *
     * @defaultValue - 0
     * @public
     * @remarks
     * HTML Attribute: min
     */
    min: number;
    private minChanged;
    /**
     * The maximum allowed value.
     *
     * @defaultValue - 10
     * @public
     * @remarks
     * HTML Attribute: max
     */
    max: number;
    private maxChanged;
    /**
     * Value to increment or decrement via arrow keys, mouse click or drag.
     *
     * @public
     * @remarks
     * HTML Attribute: step
     */
    step: number;
    private stepChanged;
    /**
     * The orientation of the slider.
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */
    orientation: Orientation;
    private orientationChanged;
    /**
     * The selection mode.
     *
     * @public
     * @remarks
     * HTML Attribute: mode
     */
    mode: SliderMode;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Increment the value by the step
     *
     * @public
     */
    increment(): void;
    /**
     * Decrement the value by the step
     *
     * @public
     */
    decrement(): void;
    protected keypressHandler: (e: KeyboardEvent) => void;
    /**
     * Places the thumb based on the current value
     *
     * @public
     * @param direction - writing mode
     */
    private setThumbPositionForOrientation;
    /**
     * Update the step multiplier used to ensure rounding errors from steps that
     * are not whole numbers
     */
    private updateStepMultiplier;
    private setupTrackConstraints;
    private setupListeners;
    /**
     * @internal
     */
    initialValue: string;
    private get midpoint();
    private setupDefaultValue;
    /**
     *  Handle mouse moves during a thumb drag operation
     */
    private handleThumbMouseDown;
    /**
     *  Handle mouse moves during a thumb drag operation
     */
    private handleMouseMove;
    private calculateNewValue;
    /**
     * Handle a window mouse up during a drag operation
     */
    private handleWindowMouseUp;
    private stopDragging;
    private handleMouseDown;
    private convertToConstrainedValue;
}

declare class _Slider extends FASTElement {
}

declare interface _Slider extends FormAssociated {
}

/**
 * The configuration structure of {@link @microsoft/fast-foundation#(Slider:class)}.
 * @public
 */
export declare interface SliderConfiguration {
    max: number;
    min: number;
    orientation?: Orientation;
    direction?: Direction;
    disabled?: boolean;
}

/**
 * A label element intended to be used with the {@link @microsoft/fast-foundation#(Slider:class)} component.
 *
 * @public
 */
export declare class SliderLabel extends FASTElement {
    /**
     * @internal
     */
    positionStyle: string;
    /**
     * @internal
     */
    root: HTMLDivElement;
    /**
     * The position of the label relative to the min and max value of the parent {@link @microsoft/fast-foundation#(Slider:class)}.
     *
     * @public
     * @remarks
     * HTML Attribute: position
     */
    position: string;
    private positionChanged;
    /**
     * Hides the tick mark.
     *
     * @public
     * @remarks
     * HTML Attribute: hide-mark
     */
    hideMark: boolean;
    /**
     * The disabled state of the label. This is generally controlled by the parent {@link @microsoft/fast-foundation#(Slider:class)}.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * @internal
     */
    sliderOrientation: Orientation;
    /**
     * @internal
     */
    protected sliderOrientationChanged(): void;
    /**
     * @internal
     */
    sliderMinPosition: number;
    /**
     * @internal
     */
    sliderMaxPosition: number;
    /**
     * @internal
     */
    sliderDirection: Direction;
    private notifier;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    handleChange(source: any, propertyName: string): void;
    private isSliderConfig;
    private getSliderConfiguration;
    private positionAsStyle;
}

/**
 * The template for the {@link @microsoft/fast-foundation#(SliderLabel:class)} component.
 * @public
 */
export declare const SliderLabelTemplate: ViewTemplate<SliderLabel>;

/**
 * The selection modes of a {@link @microsoft/fast-foundation#(Slider:class)}.
 * @public
 */
export declare enum SliderMode {
    singleValue = "single-value"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Slider:class)} component.
 * @public
 */
export declare const SliderTemplate: ViewTemplate<Slider>;

/**
 * A mixin class implementing start and end elements.
 * These are generally used to decorate text elements with icons or other visual indicators.
 * @public
 */
export declare class StartEnd {
    start: HTMLSlotElement;
    startContainer: HTMLSpanElement;
    handleStartContentChange(): void;
    end: HTMLSlotElement;
    endContainer: HTMLSpanElement;
    handleEndContentChange(): void;
}

/**
 * The template for the start element.
 * For use with {@link StartEnd}
 *
 * @public
 */
export declare const startTemplate: ViewTemplate<StartEnd>;

/**
 * A design token value with no observable dependencies
 * @alpha
 */
export declare type StaticDesignTokenValue<T> = T extends Function ? never : T;

/**
 * An implementation of {@link CustomPropertyManager} that uses the HTMLStyleElement. This implementation
 * does not support multiple CustomPropertyManagerTarget subscriptions.
 *
 * @public
 */
export declare class StyleElementCustomPropertyManager extends CustomPropertyManagerBase {
    private _sheet;
    get sheet(): CSSStyleSheet | null;
    protected customPropertyTarget: CSSStyleDeclaration;
    private customPropertyTargetChanged;
    readonly styles: HTMLStyleElement;
    constructor(style: HTMLStyleElement, client: CustomPropertyManagerClient);
    private handleConnection;
}

/**
 * @alpha
 */
export declare const supportsElementInternals: boolean;

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.
 *
 * @public
 */
export declare class Switch extends FormAssociatedSwitch {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */
    initialValue: string;
    /**
     * The checked attribute value. This sets the initial checked value.
     *
     * @public
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean;
    private defaultCheckedChanged;
    /**
     * The checked state of the control.
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input checkboxes
     */
    private dirtyChecked;
    /**
     * @internal
     */
    connectedCallback(): void;
    constructor();
    /**
     * @internal
     */
    formResetCallback: () => void;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

declare class _Switch extends FASTElement {
}

declare interface _Switch extends FormAssociated {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Switch:class)} component.
 * @public
 */
export declare const SwitchTemplate: ViewTemplate<Switch>;

/**
 * A Tab Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}
 * @public
 */
export declare class Tab extends FASTElement {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
}

/**
 * A TabPanel Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}
 * @public
 */
export declare class TabPanel extends FASTElement {
}

/**
 * The template for the {@link @microsoft/fast-foundation#TabPanel} component.
 * @public
 */
export declare const TabPanelTemplate: ViewTemplate<TabPanel>;

/**
 * A Tabs Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#tablist | ARIA tablist }.
 *
 * @public
 */
export declare class Tabs extends FASTElement {
    /**
     * The orientation
     * @public
     * @remarks
     * HTML Attribute: orientation
     */
    orientation: TabsOrientation;
    /**
     * The id of the active tab
     *
     * @public
     * @remarks
     * HTML Attribute: activeid
     */
    activeid: string;
    /**
     * @internal
     */
    activeidChanged(): void;
    /**
     * @internal
     */
    tabs: HTMLElement[];
    /**
     * @internal
     */
    tabsChanged(): void;
    /**
     * @internal
     */
    tabpanels: HTMLElement[];
    /**
     * @internal
     */
    tabpanelsChanged(): void;
    /**
     * Whether or not to show the active indicator
     * @public
     * @remarks
     * HTML Attribute: activeindicator
     */
    activeindicator: boolean;
    /**
     * @internal
     */
    activeIndicatorRef: HTMLElement;
    /**
     * @internal
     */
    showActiveIndicator: boolean;
    /**
     * A reference to the active tab
     * @public
     */
    activetab: HTMLElement;
    private prevActiveTabIndex;
    private activeTabIndex;
    private ticking;
    private tabIds;
    private tabpanelIds;
    private change;
    private isDisabledElement;
    private isFocusableElement;
    private getActiveIndex;
    private setTabs;
    private setTabPanels;
    private getTabIds;
    private getTabPanelIds;
    private setComponent;
    private handleTabClick;
    private isHorizontal;
    private handleTabKeyDown;
    private handleActiveIndicatorPosition;
    private animateActiveIndicator;
    /**
     * The adjust method for FASTTabs
     * @public
     * @remarks
     * This method allows the active index to be adjusted by numerical increments
     */
    adjust(adjustment: number): void;
    private adjustForward;
    private adjustBackward;
    private moveToTabByIndex;
    private focusTab;
    /**
     * @internal
     */
    connectedCallback(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Tabs extends StartEnd {
}

/**
 * The orientation of the {@link @microsoft/fast-foundation#(Tabs:class)} component
 * @public
 */
export declare enum TabsOrientation {
    vertical = "vertical",
    horizontal = "horizontal"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Tabs:class)} component.
 * @public
 */
export declare const TabsTemplate: ViewTemplate<Tabs>;

/**
 * The template for the {@link @microsoft/fast-foundation#Tab} component.
 * @public
 */
export declare const TabTemplate: ViewTemplate<Tab>;

/**
 * A Text Area Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.
 *
 * @public
 */
export declare class TextArea extends FormAssociatedTextArea {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The resize mode of the element.
     * @public
     * @remarks
     * HTML Attribute: resize
     */
    resize: TextAreaResize;
    /**
     * A reference to the internal textarea element
     * @internal
     */
    control: HTMLTextAreaElement;
    /**
     * Indicates that this element should get focus after the page finishes loading.
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    private autofocusChanged;
    /**
     * The {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id} of the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form} the element is associated to
     * @public
     */
    formId: string;
    /**
     * Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.
     * @public
     * @remarks
     * HTML Attribute: list
     */
    list: string;
    private listChanged;
    /**
     * The maximum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: maxlength
     */
    maxlength: number;
    private maxlengthChanged;
    /**
     * The minimum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: minlength
     */
    minlength: number;
    private minlengthChanged;
    /**
     * The name of the element.
     * @public
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute does is not a valid substitute for a labeling element.
     */
    placeholder: string;
    /**
     * Sizes the element horizontally by a number of character columns.
     *
     * @public
     * @remarks
     * HTML Attribute: cols
     */
    cols: number;
    /**
     * Sizes the element vertically by a number of character rows.
     *
     * @public
     * @remarks
     * HTML Attribute: rows
     */
    rows: number;
    /**
     * Sets if the element is eligible for spell checking
     * but the UA.
     * @public
     * @remarks
     * HTML Attribute: spellcheck
     */
    spellcheck: boolean;
    private spellcheckChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * @internal
     */
    handleTextInput: () => void;
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface TextArea extends DelegatesARIATextbox {
}

declare class _TextArea extends FASTElement {
}

declare interface _TextArea extends FormAssociated {
}

/**
 * Resize mode for a TextArea
 * @public
 */
export declare enum TextAreaResize {
    /**
     * No resize.
     */
    none = "none",
    /**
     * Resize vertically and horizontally.
     */
    both = "both",
    /**
     * Resize horizontally.
     */
    horizontal = "horizontal",
    /**
     * Resize vertically.
     */
    vertical = "vertical"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TextArea:class)} component.
 * @public
 */
export declare const TextAreaTemplate: ViewTemplate<TextArea>;

/**
 * A Text Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type="text" /> element }.
 *
 * @public
 */
export declare class TextField extends FormAssociatedTextField {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    private autofocusChanged;
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute does is not a valid substitute for a labeling element.
     */
    placeholder: string;
    private placeholderChanged;
    /**
     * Allows setting a type or mode of text.
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: TextFieldType;
    private typeChanged;
    /**
     * Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.
     * @public
     * @remarks
     * HTML Attribute: list
     */
    list: string;
    private listChanged;
    /**
     * The maximum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: maxlength
     */
    maxlength: number;
    private maxlengthChanged;
    /**
     * The minimum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: minlength
     */
    minlength: number;
    private minlengthChanged;
    /**
     * A regular expression that the value must match to pass validation.
     * @public
     * @remarks
     * HTMLAttribute: pattern
     */
    pattern: string;
    private patternChanged;
    /**
     * Sets the width of the element to a specified number of characters.
     * @public
     * @remarks
     * HTMLAttribute: size
     */
    size: number;
    private sizeChanged;
    /**
     * Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.
     * @public
     * @remarks
     * HTMLAttribute: size
     */
    spellcheck: boolean;
    private spellcheckChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * A reference to the internal input element
     * @internal
     */
    control: HTMLInputElement;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Handles the internal control's `input` event
     * @internal
     */
    handleTextInput(): void;
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface TextField extends StartEnd, DelegatesARIATextbox {
}

declare class _TextField extends FASTElement {
}

declare interface _TextField extends FormAssociated {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TextField:class)} component.
 * @public
 */
export declare const TextFieldTemplate: ViewTemplate<TextField>;

/**
 * Text field sub-types
 * @public
 */
export declare enum TextFieldType {
    /**
     * An email TextField
     */
    email = "email",
    /**
     * A password TextField
     */
    password = "password",
    /**
     * A telephone TextField
     */
    tel = "tel",
    /**
     * A text TextField
     */
    text = "text",
    /**
     * A URL TextField
     */
    url = "url"
}

/**
 * A Toolbar Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar}.
 *
 * @public
 */
export declare class Toolbar extends FASTElement {
    /**
     * The internal index of the currently focused element.
     *
     * @internal
     */
    private _activeIndex;
    /**
     * The index of the currently focused element, clamped between 0 and the last element.
     *
     * @internal
     */
    get activeIndex(): number;
    set activeIndex(value: number);
    /**
     * The text direction of the toolbar.
     *
     * @internal
     */
    direction: Direction;
    /**
     * The collection of focusable toolbar controls.
     *
     * @internal
     */
    private focusableElements;
    /**
     * The orientation of the toolbar.
     *
     * @public
     * @remarks
     * HTML Attribute: `orientation`
     */
    orientation: Orientation;
    /**
     * The elements in the default slot.
     *
     * @internal
     */
    slottedItems: HTMLElement[];
    /**
     * Prepare the slotted elements which can be focusable.
     *
     * @param prev - The previous list of slotted elements.
     * @param next - The new list of slotted elements.
     * @internal
     */
    protected slottedItemsChanged(prev: unknown, next: HTMLElement[]): void;
    /**
     * The elements in the label slot.
     *
     * @internal
     */
    slottedLabel: HTMLElement[];
    /**
     * Set the activeIndex when a focusable element in the toolbar is clicked.
     *
     * @internal
     */
    clickHandler(e: MouseEvent): boolean | void;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * When the toolbar receives focus, set the currently active element as focused.
     *
     * @internal
     */
    focusinHandler(e: FocusEvent): boolean | void;
    /**
     * Determines a value that can be used to iterate a list with the arrow keys.
     *
     * @param this - An element with an orientation and direction
     * @param key - The event key value
     * @internal
     */
    private getDirectionalIncrementer;
    /**
     * Handle keyboard events for the toolbar.
     *
     * @internal
     */
    keydownHandler(e: KeyboardEvent): boolean | void;
    /**
     * Set the activeIndex and focus the corresponding control.
     *
     * @param activeIndex - The new index to set
     * @internal
     */
    private setFocusedElement;
    /**
     * Reduce a collection to only its focusable elements.
     *
     * @param elements - Collection of elements to reduce
     * @param element - The current element
     *
     * @internal
     */
    private static reduceFocusableItems;
    /**
     * @internal
     */
    private setFocusableElements;
}

/**
 * @internal
 */
export declare interface Toolbar extends StartEnd, DelegatesARIAToolbar {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Toolbar:class)} component.
 *
 * @public
 */
export declare const ToolbarTemplate: ViewTemplate<Toolbar>;

/**
 * An Tooltip Custom HTML Element.
 *
 * @public
 */
export declare class Tooltip extends FASTElement {
    private static DirectionAttributeName;
    /**
     * Whether the tooltip is visible or not.
     * If undefined tooltip is shown when anchor element is hovered
     *
     * @defaultValue - undefined
     * @public
     * HTML Attribute: visible
     */
    visible: boolean;
    private visibleChanged;
    /**
     * The id of the element the tooltip is anchored to
     *
     * @defaultValue - undefined
     * @public
     * HTML Attribute: anchor
     */
    anchor: string;
    private anchorChanged;
    /**
     * The delay in milliseconds before a tooltip is shown after a hover event
     *
     * @defaultValue - 300
     * @public
     * HTML Attribute: delay
     */
    delay: number;
    /**
     * Controls the placement of the tooltip relative to the anchor.
     * When the position is undefined the tooltip is placed above or below the anchor based on available space.
     *
     * @defaultValue - undefined
     * @public
     * HTML Attribute: position
     */
    position: TooltipPosition;
    private positionChanged;
    /**
     * the html element currently being used as anchor.
     * Setting this directly overrides the anchor attribute.
     *
     * @public
     */
    anchorElement: HTMLElement | null;
    private anchorElementChanged;
    /**
     * The current viewport element instance
     *
     * @internal
     */
    viewportElement: HTMLElement | null;
    private viewportElementChanged;
    /**
     * @internal
     */
    verticalPositioningMode: AxisPositioningMode;
    /**
     * @internal
     */
    horizontalPositioningMode: AxisPositioningMode;
    /**
     * @internal
     */
    horizontalInset: string;
    /**
     * @internal
     */
    verticalInset: string;
    /**
     * @internal
     */
    horizontalScaling: AxisScalingMode;
    /**
     * @internal
     */
    verticalScaling: AxisScalingMode;
    /**
     * @internal
     */
    verticalDefaultPosition: string | undefined;
    /**
     * @internal
     */
    horizontalDefaultPosition: string | undefined;
    /**
     * @internal
     */
    tooltipVisible: boolean;
    /**
     * Track current direction to pass to the anchored region
     * updated when tooltip is shown
     *
     * @internal
     */
    currentDirection: Direction;
    /**
     * reference to the anchored region
     *
     * @internal
     */
    region: AnchoredRegion;
    /**
     * The timer that tracks delay time before the tooltip is shown on hover
     */
    private delayTimer;
    /**
     * Indicates whether the anchor is currently being hovered
     */
    private isAnchorHovered;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * invoked when the anchored region's position relative to the anchor changes
     *
     * @internal
     */
    handlePositionChange: (ev: Event) => void;
    /**
     * mouse enters anchor
     */
    private handleAnchorMouseOver;
    /**
     * mouse leaves anchor
     */
    private handleAnchorMouseOut;
    /**
     * starts the hover timer if not currently running
     */
    private startHoverTimer;
    /**
     * starts the hover delay timer
     */
    private startHover;
    /**
     * clears the hover delay
     */
    private clearDelayTimer;
    /**
     * updated the properties being passed to the anchored region
     */
    private updateLayout;
    /**
     *  Gets the anchor element by id
     */
    private getAnchor;
    /**
     * handles key down events to check for dismiss
     */
    private handleDocumentKeydown;
    /**
     * determines whether to show or hide the tooltip based on current state
     */
    private updateTooltipVisibility;
    /**
     * shows the tooltip
     */
    private showTooltip;
    /**
     * hides the tooltip
     */
    private hideTooltip;
    /**
     * updates the tooltip anchored region props after it has been
     * added to the DOM
     */
    private setRegionProps;
}

/**
 * Enumerates possible tooltip positions
 *
 * @public
 */
export declare enum TooltipPosition {
    /**
     * The tooltip is positioned above the element
     */
    top = "top",
    /**
     * The tooltip is positioned to the right of the element
     */
    right = "right",
    /**
     * The tooltip is positioned below the element
     */
    bottom = "bottom",
    /**
     * The tooltip is positioned to the left of the element
     */
    left = "left",
    /**
     * The tooltip is positioned before the element
     */
    start = "start",
    /**
     * The tooltip is positioned after the element
     */
    end = "end"
}

/**
 * @alpha
 */
declare type Transformer_2<K> = (instance: Resolved<K>) => Resolved<K>;
export { Transformer_2 as Transformer }

/**
 * Registers the decorated class as a transient dependency; each time the dependency is resolved
 * a new instance will be created.
 *
 * @example
 * ```ts
 * &#64;transient()
 * class Foo { }
 * ```
 *
 * @alpha
 */
export declare function transient<T extends Constructable>(): typeof transientDecorator;

/**
 * Registers the `target` class as a transient dependency; each time the dependency is resolved
 * a new instance will be created.
 *
 * @param target - The class / constructor function to register as transient.
 *
 * @example
 * ```ts
 * &#64;transient()
 * class Foo { }
 * ```
 *
 * @alpha
 */
export declare function transient<T extends Constructable>(target: T & Partial<RegisterSelf<T>>): T & RegisterSelf<T>;

declare function transientDecorator<T extends Constructable>(target: T & Partial<RegisterSelf<T>>): T & RegisterSelf<T>;

/**
 * A Tree item Custom HTML Element.
 *
 * @public
 */
export declare class TreeItem extends FASTElement {
    /**
     * When true, the control will be appear expanded by user interaction.
     * @public
     * @remarks
     * HTML Attribute: expanded
     */
    expanded: boolean;
    /**
     * When true, the control will appear selected by user interaction.
     * @public
     * @remarks
     * HTML Attribute: selected
     */
    selected: boolean;
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    expandCollapseButton: HTMLDivElement;
    focusable: boolean;
    childItems: HTMLElement[];
    items: HTMLElement[];
    private itemsChanged;
    /**
     * @internal
     */
    nested: boolean;
    renderCollapsedChildren: boolean;
    private notifier;
    private enabledChildTreeItems;
    private getParentTreeNode;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Places document focus on a tree item and adds the item to the sequential tab order.
     * @param el - the element to focus
     */
    static focusItem(el: HTMLElement): void;
    handleChange(source: any, propertyName: string): void;
    /**
     * @deprecated - no longer needed.
     * @param e - Event object
     */
    handleFocus: (e: Event) => void;
    /**
     * @deprecated - no longer needed.
     * @param e - Event object
     */
    handleBlur: (e: FocusEvent) => void;
    /**
     * The keyboarding on treeview should conform to the following spec
     * https://w3c.github.io/aria-practices/#keyboard-interaction-23
     * @param e - Event object for keyDown event
     */
    handleKeyDown: (e: KeyboardEvent) => void | boolean;
    handleExpandCollapseButtonClick: (e: MouseEvent) => void;
    handleClick: (e: MouseEvent) => void;
    childItemLength(): number;
    readonly isNestedItem: () => boolean;
    private collapseOrFocusParent;
    private expandOrFocusFirstChild;
    private focusNextNode;
    private getVisibleNodes;
    private getTreeRoot;
    private handleSelected;
    private setExpanded;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast-dna/issues/3317
 * @internal
 */
export declare interface TreeItem extends StartEnd {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TreeItem:class)} component.
 * @public
 */
export declare const TreeItemTemplate: ViewTemplate<TreeItem>;

/**
 * A Tree view Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#TreeView | ARIA TreeView }.
 *
 * @public
 */
export declare class TreeView extends FASTElement {
    treeView: HTMLElement;
    renderCollapsedNodes: boolean;
    /**
     * @deprecated - the tree itself is no longer a focusable area.
     */
    focusable: boolean;
    currentSelected: HTMLElement | TreeItem | null;
    /**
     * @deprecated - this property is no longer needed.
     */
    private lastFocused;
    private nested;
    slottedTreeItems: HTMLElement[];
    private slottedTreeItemsChanged;
    private checkForNestedItems;
    private treeItems;
    handleBlur: (e: FocusEvent) => void;
    /**
     * @deprecated - no longer needed
     */
    handleFocus: (e: FocusEvent) => void;
    connectedCallback(): void;
    handleKeyDown: (e: KeyboardEvent) => void | boolean;
    private setItems;
    private resetItems;
    private handleItemSelected;
    /**
     * check if the item is focusable
     */
    private isFocusableElement;
    /**
     * check if the item is disabled
     */
    private isDisabledElement;
    private getVisibleNodes;
}

/**
 * The template for the {@link @microsoft/fast-foundation#TreeView} component.
 * @public
 */
export declare const TreeViewTemplate: ViewTemplate<TreeView>;

/** @internal */
export declare function validateKey(key: any): void;

/**
 * This file enables typing support for ElementInternals APIs.
 * It is largely taken from https://github.com/microsoft/TSJS-lib-generator/pull/818/files.
 *
 * When TypeScript adds support for these APIs we can delete this file.
 */
declare interface ValidityStateFlags {
    badInput?: boolean;
    customError?: boolean;
    patternMismatch?: boolean;
    rangeOverflow?: boolean;
    rangeUnderflow?: boolean;
    stepMismatch?: boolean;
    tooLong?: boolean;
    tooShort?: boolean;
    typeMismatch?: boolean;
    valueMissing?: boolean;
}

/**
 * Defines the vertical positioning options for an anchored region
 *
 * @beta
 */
export declare type VerticalPosition = "top" | "bottom" | "unset";

/**
 * a method to filter out any whitespace _only_ nodes, to be used inside a template
 * @param value - The Node that is being inspected
 * @param index - The index of the node within the array
 * @param array - The Node array that is being filtered
 *
 * @public
 */
export declare function whitespaceFilter(value: Node, index: number, array: Node[]): boolean;

export { }
