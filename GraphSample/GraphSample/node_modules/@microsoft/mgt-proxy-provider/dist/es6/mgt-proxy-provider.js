/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { customElement, property } from 'lit-element';
import { Providers, MgtBaseProvider } from '@microsoft/mgt-element';
import { ProxyProvider } from './ProxyProvider';
/**
 * Authentication component for ProxyProvider
 *
 * @export
 * @class MgtProxyProvider
 * @extends {LitElement}
 */
let MgtProxyProvider = class MgtProxyProvider extends MgtBaseProvider {
    /**
     * Gets whether this provider can be used in this environment
     *
     * @readonly
     * @memberof MgtMsalProvider
     */
    get isAvailable() {
        return true;
    }
    /**
     * method called to initialize the provider. Each derived class should provide their own implementation.
     *
     * @protected
     * @memberof MgtProxyProvider
     */
    initializeProvider() {
        if (this.graphProxyUrl !== undefined) {
            this.provider = new ProxyProvider(this.graphProxyUrl);
            Providers.globalProvider = this.provider;
        }
    }
};
__decorate([
    property({ attribute: 'graph-proxy-url' }),
    __metadata("design:type", String)
], MgtProxyProvider.prototype, "graphProxyUrl", void 0);
MgtProxyProvider = __decorate([
    customElement('mgt-proxy-provider')
], MgtProxyProvider);
export { MgtProxyProvider };
//# sourceMappingURL=mgt-proxy-provider.js.map