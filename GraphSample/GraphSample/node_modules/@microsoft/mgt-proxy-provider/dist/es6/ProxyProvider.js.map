{"version":3,"file":"ProxyProvider.js","sourceRoot":"src/","sources":["ProxyProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,SAAS,EAAE,aAAa,EAAS,MAAM,wBAAwB,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C;;;;;;GAMG;AACH,MAAM,OAAO,aAAc,SAAQ,SAAS;IAQ1C;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,YAAY,aAAqB,EAAE,mBAA0C,IAAI;QAC/E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;QAE7D,IAAI,CAAC,KAAK;aACP,GAAG,CAAC,IAAI,CAAC;aACT,GAAG,EAAE;aACL,IAAI,CACH,IAAI,CAAC,EAAE;YACL,IAAI,IAAI,IAAI,IAAI,EAAE;gBAChB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aACvC;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aACxC;QACH,CAAC,EACD,GAAG,CAAC,EAAE;YACJ,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC,CACF,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IProvider, ProviderState, Graph } from '@microsoft/mgt-element';\nimport { ProxyGraph } from './ProxyGraph';\n\n/**\n * Proxy Provider access token for Microsoft Graph APIs\n *\n * @export\n * @class ProxyProvider\n * @extends {IProvider}\n */\nexport class ProxyProvider extends IProvider {\n  /**\n   * new instance of proxy graph provider\n   *\n   * @memberof ProxyProvider\n   */\n  public graph: Graph;\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtProxyProvider';\n  }\n\n  constructor(graphProxyUrl: string, getCustomHeaders: () => Promise<object> = null) {\n    super();\n    this.graph = new ProxyGraph(graphProxyUrl, getCustomHeaders);\n\n    this.graph\n      .api('me')\n      .get()\n      .then(\n        user => {\n          if (user != null) {\n            this.setState(ProviderState.SignedIn);\n          } else {\n            this.setState(ProviderState.SignedOut);\n          }\n        },\n        err => {\n          this.setState(ProviderState.SignedOut);\n        }\n      );\n  }\n\n  /**\n   * Promise returning token\n   *\n   * @returns {Promise<string>}\n   * @memberof ProxyProvider\n   */\n  public getAccessToken(): Promise<string> {\n    return null;\n  }\n}\n"]}