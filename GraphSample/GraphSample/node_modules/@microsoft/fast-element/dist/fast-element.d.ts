/**
 * A reference to globalThis, with support
 * for browsers that don't yet support the spec.
 * @public
 */
export declare const $global: Global;

/**
 * Represents a getter/setter property accessor on an object.
 * @public
 */
export declare interface Accessor {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Gets the value of the property on the source object.
     * @param source - The source object to access.
     */
    getValue(source: any): any;
    /**
     * Sets the value of the property on the source object.
     * @param source - The source object to access.
     * @param value - The value to set the property to.
     */
    setValue(source: any, value: any): void;
}

/**
 * A directive that attaches special behavior to an element via a custom attribute.
 * @public
 */
export declare class AttachedBehaviorHTMLDirective<T = any> extends HTMLDirective {
    private name;
    private behavior;
    private options;
    /**
     *
     * @param name - The name of the behavior; used as a custom attribute on the element.
     * @param behavior - The behavior to instantiate and attach to the element.
     * @param options - Options to pass to the behavior during creation.
     */
    constructor(name: string, behavior: AttachedBehaviorType<T>, options: T);
    /**
     * Creates a placeholder string based on the directive's index within the template.
     * @param index - The index of the directive within the template.
     * @remarks
     * Creates a custom attribute placeholder.
     */
    createPlaceholder(index: number): string;
    /**
     * Creates a behavior for the provided target node.
     * @param target - The node instance to create the behavior for.
     * @remarks
     * Creates an instance of the `behavior` type this directive was constructed with
     * and passes the target and options to that `behavior`'s constructor.
     */
    createBehavior(target: Node): Behavior;
}

/**
 * Describes the shape of a behavior constructor that can be created by
 * an {@link AttachedBehaviorHTMLDirective}.
 * @public
 */
export declare type AttachedBehaviorType<T = any> = new (target: any, options: T) => Behavior;

/**
 * Decorator: Specifies an HTML attribute.
 * @param config - The configuration for the attribute.
 * @public
 */
export declare function attr(config?: DecoratorAttributeConfiguration): (target: {}, property: string) => void;

/**
 * Decorator:  Specifies an HTML attribute.
 * @param target - The class to define the attribute on.
 * @param prop - The property name to be associated with the attribute.
 * @public
 */
export declare function attr(target: {}, prop: string): void;

/**
 * Metadata used to configure a custom attribute's behavior.
 * @public
 */
export declare type AttributeConfiguration = {
    property: string;
    attribute?: string;
    mode?: AttributeMode;
    converter?: ValueConverter;
};

/**
 * Metadata used to configure a custom attribute's behavior.
 * @public
 */
export declare const AttributeConfiguration: Readonly<{
    /**
     * Locates all attribute configurations associated with a type.
     */
    locate: (target: {}) => AttributeConfiguration[];
}>;

/**
 * An implementation of {@link Accessor} that supports reactivity,
 * change callbacks, attribute reflection, and type conversion for
 * custom elements.
 * @public
 */
export declare class AttributeDefinition implements Accessor {
    private readonly fieldName;
    private readonly callbackName;
    private readonly hasCallback;
    private readonly guards;
    /**
     * The class constructor that owns this attribute.
     */
    readonly Owner: Function;
    /**
     * The name of the property associated with the attribute.
     */
    readonly name: string;
    /**
     * The name of the attribute in HTML.
     */
    readonly attribute: string;
    /**
     * The {@link AttributeMode} that describes the behavior of this attribute.
     */
    readonly mode: AttributeMode;
    /**
     * A {@link ValueConverter} that integrates with the property getter/setter
     * to convert values to and from a DOM string.
     */
    readonly converter?: ValueConverter;
    /**
     * Creates an instance of AttributeDefinition.
     * @param Owner - The class constructor that owns this attribute.
     * @param name - The name of the property associated with the attribute.
     * @param attribute - The name of the attribute in HTML.
     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.
     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter
     * to convert values to and from a DOM string.
     */
    constructor(Owner: Function, name: string, attribute?: string, mode?: AttributeMode, converter?: ValueConverter);
    /**
     * Sets the value of the attribute/property on the source element.
     * @param source - The source element to access.
     * @param value - The value to set the attribute/property to.
     */
    setValue(source: HTMLElement, newValue: any): void;
    /**
     * Gets the value of the attribute/property on the source element.
     * @param source - The source element to access.
     */
    getValue(source: HTMLElement): any;
    /** @internal */
    onAttributeChangedCallback(element: HTMLElement, value: any): void;
    private tryReflectToAttribute;
    /**
     * Collects all attribute definitions associated with the owner.
     * @param Owner - The class constructor to collect attribute for.
     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.
     * @internal
     */
    static collect(Owner: Function, ...attributeLists: (ReadonlyArray<string | AttributeConfiguration> | undefined)[]): ReadonlyArray<AttributeDefinition>;
}

/**
 * The mode that specifies the runtime behavior of the attribute.
 * @remarks
 * By default, attributes run in `reflect` mode, propagating their property
 * values to the DOM and DOM values to the property. The `boolean` mode also
 * reflects values, but uses the HTML standard boolean attribute behavior,
 * interpreting the presence of the attribute as `true` and the absence as
 * `false`. The `fromView` behavior only updates the  property value based on
 * changes in the DOM, but does not reflect property changes back.
 * @public
 */
export declare type AttributeMode = "reflect" | "boolean" | "fromView";

/**
 * Represents and object that can contribute behavior to a view or
 * element's bind/unbind operations.
 * @public
 */
export declare interface Behavior {
    /**
     * Bind this behavior to the source.
     * @param source - The source to bind to.
     * @param context - The execution context that the binding is operating within.
     */
    bind(source: unknown, context: ExecutionContext): void;
    /**
     * Unbinds this behavior from the source.
     * @param source - The source to unbind from.
     */
    unbind(source: unknown): void;
}

/**
 * The signature of an arrow function capable of being evaluated
 * as part of a template binding update.
 * @public
 */
export declare type Binding<TSource = any, TReturn = any, TParent = any> = (source: TSource, context: ExecutionContext<TParent>) => TReturn;

/**
 * A behavior that updates content and attributes based on a configured
 * BindingDirective.
 * @public
 */
export declare class BindingBehavior implements Behavior {
    /** @internal */
    source: unknown;
    /** @internal */
    context: ExecutionContext | null;
    /** @internal */
    bindingObserver: BindingObserver | null;
    /** @internal */
    classVersions: Record<string, number>;
    /** @internal */
    version: number;
    /** @internal */
    target: any;
    /** @internal */
    binding: Binding;
    /** @internal */
    isBindingVolatile: boolean;
    /** @internal */
    updateTarget: typeof updatePropertyTarget;
    /** @internal */
    targetName?: string;
    /**
     * Bind this behavior to the source.
     * @param source - The source to bind to.
     * @param context - The execution context that the binding is operating within.
     */
    bind: typeof normalBind;
    /**
     * Unbinds this behavior from the source.
     * @param source - The source to unbind from.
     */
    unbind: typeof normalUnbind;
    /**
     * Creates an instance of BindingBehavior.
     * @param target - The target of the data updates.
     * @param binding - The binding that returns the latest value for an update.
     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.
     * @param bind - The operation to perform during binding.
     * @param unbind - The operation to perform during unbinding.
     * @param updateTarget - The operation to perform when updating.
     * @param targetName - The name of the target attribute or property to update.
     */
    constructor(target: any, binding: Binding, isBindingVolatile: boolean, bind: typeof normalBind, unbind: typeof normalUnbind, updateTarget: typeof updatePropertyTarget, targetName?: string);
    /** @internal */
    handleChange(): void;
    /** @internal */
    handleEvent(event: Event): void;
}

/**
 * Enables evaluation of and subscription to a binding.
 * @public
 */
export declare interface BindingObserver<TSource = any, TReturn = any, TParent = any> extends Notifier {
    /**
     * Begins observing the binding for the source and returns the current value.
     * @param source - The source that the binding is based on.
     * @param context - The execution context to execute the binding within.
     * @returns The value of the binding.
     */
    observe(source: TSource, context: ExecutionContext<TParent>): TReturn;
    /**
     * Unsubscribe from all dependent observables of the binding.
     */
    disconnect(): void;
    /**
     * Gets {@link ObservationRecord|ObservationRecords} that the {@link BindingObserver}
     * is observing.
     */
    records(): IterableIterator<ObservationRecord>;
}

/**
 * A {@link ValueConverter} that converts to and from `boolean` values.
 * @remarks
 * Used automatically when the `boolean` {@link AttributeMode} is selected.
 * @public
 */
export declare const booleanConverter: ValueConverter;

/**
 * Represents a callable type such as a function or an object with a "call" method.
 * @public
 */
export declare type Callable = typeof Function.prototype.call | {
    call(): void;
};

/**
 * A marker interface used to capture types when interpolating Directive helpers
 * into templates.
 * @public
 */
export declare interface CaptureType<TSource> {
}

/**
 * The options used to configure child list observation.
 * @public
 */
export declare interface ChildListBehaviorOptions<T = any> extends NodeBehaviorOptions<T>, Omit<MutationObserverInit, "subtree" | "childList"> {
}

/**
 * A directive that observes the `childNodes` of an element and updates a property
 * whenever they change.
 * @param propertyOrOptions - The options used to configure child node observation.
 * @public
 */
export declare function children<T = any>(propertyOrOptions: (keyof T & string) | ChildrenBehaviorOptions<keyof T & string>): CaptureType<T>;

/**
 * The runtime behavior for child node observation.
 * @public
 */
export declare class ChildrenBehavior extends NodeObservationBehavior<ChildrenBehaviorOptions> {
    private observer;
    /**
     * Creates an instance of ChildrenBehavior.
     * @param target - The element target to observe children on.
     * @param options - The options to use when observing the element children.
     */
    constructor(target: HTMLElement, options: ChildrenBehaviorOptions);
    /**
     * Begins observation of the nodes.
     */
    observe(): void;
    /**
     * Disconnects observation of the nodes.
     */
    disconnect(): void;
    /**
     * Retrieves the nodes that should be assigned to the target.
     */
    protected getNodes(): ChildNode[];
}

/**
 * The options used to configure child/subtree node observation.
 * @public
 */
export declare type ChildrenBehaviorOptions<T = any> = ChildListBehaviorOptions<T> | SubtreeBehaviorOptions<T>;

/**
 * The result of compiling a template and its directives.
 * @beta
 */
export declare interface CompilationResult {
    /**
     * A cloneable DocumentFragment representing the compiled HTML.
     */
    fragment: DocumentFragment;
    /**
     * The behaviors that should be applied to the template's HTML.
     */
    viewBehaviorFactories: NodeBehaviorFactory[];
    /**
     * The behaviors that should be applied to the host element that
     * the template is rendered into.
     */
    hostBehaviorFactories: NodeBehaviorFactory[];
    /**
     * An index offset to apply to BehaviorFactory target indexes when
     * matching factories to targets.
     */
    targetOffset: number;
}

/**
 * Compiles a template and associated directives into a raw compilation
 * result which include a cloneable DocumentFragment and factories capable
 * of attaching runtime behavior to nodes within the fragment.
 * @param template - The template to compile.
 * @param directives - The directives referenced by the template.
 * @remarks
 * The template that is provided for compilation is altered in-place
 * and cannot be compiled again. If the original template must be preserved,
 * it is recommended that you clone the original and pass the clone to this API.
 * @public
 */
export declare function compileTemplate(template: HTMLTemplateElement, directives: ReadonlyArray<HTMLDirective>): CompilationResult;

/**
 * Represents styles that can be composed into the ShadowDOM of a custom element.
 * @public
 */
export declare type ComposableStyles = string | ElementStyles | CSSStyleSheet;

/**
 * Allows for the creation of Constructable mixin classes.
 *
 * @public
 */
export declare type Constructable<T = {}> = {
    new (...args: any[]): T;
};

/**
 * Controls the lifecycle and rendering of a `FASTElement`.
 * @public
 */
export declare class Controller extends PropertyChangeNotifier {
    private boundObservables;
    private behaviors;
    private needsInitialization;
    private _template;
    private _styles;
    private _isConnected;
    /**
     * This allows Observable.getNotifier(...) to return the Controller
     * when the notifier for the Controller itself is being requested. The
     * result is that the Observable system does not need to create a separate
     * instance of Notifier for observables on the Controller. The component and
     * the controller will now share the same notifier, removing one-object construct
     * per web component instance.
     */
    private readonly $fastController;
    /**
     * The element being controlled by this controller.
     */
    readonly element: HTMLElement;
    /**
     * The element definition that instructs this controller
     * in how to handle rendering and other platform integrations.
     */
    readonly definition: FASTElementDefinition;
    /**
     * The view associated with the custom element.
     * @remarks
     * If `null` then the element is managing its own rendering.
     */
    readonly view: ElementView | null;
    /**
     * Indicates whether or not the custom element has been
     * connected to the document.
     */
    get isConnected(): boolean;
    private setIsConnected;
    /**
     * Gets/sets the template used to render the component.
     * @remarks
     * This value can only be accurately read after connect but can be set at any time.
     */
    get template(): ElementViewTemplate | null;
    set template(value: ElementViewTemplate | null);
    /**
     * Gets/sets the primary styles used for the component.
     * @remarks
     * This value can only be accurately read after connect but can be set at any time.
     */
    get styles(): ElementStyles | null;
    set styles(value: ElementStyles | null);
    /**
     * Creates a Controller to control the specified element.
     * @param element - The element to be controlled by this controller.
     * @param definition - The element definition metadata that instructs this
     * controller in how to handle rendering and other platform integrations.
     * @internal
     */
    constructor(element: HTMLElement, definition: FASTElementDefinition);
    /**
     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.
     * @param styles - The styles to add.
     */
    addStyles(styles: ElementStyles | HTMLStyleElement): void;
    /**
     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.
     * @param styles - the styles to remove.
     */
    removeStyles(styles: ElementStyles | HTMLStyleElement): void;
    /**
     * Adds behaviors to this element.
     * @param behaviors - The behaviors to add.
     */
    addBehaviors(behaviors: ReadonlyArray<Behavior>): void;
    /**
     * Removes behaviors from this element.
     * @param behaviors - The behaviors to remove.
     * @param force - Forces unbinding of behaviors.
     */
    removeBehaviors(behaviors: ReadonlyArray<Behavior>, force?: boolean): void;
    /**
     * Runs connected lifecycle behavior on the associated element.
     */
    onConnectedCallback(): void;
    /**
     * Runs disconnected lifecycle behavior on the associated element.
     */
    onDisconnectedCallback(): void;
    /**
     * Runs the attribute changed callback for the associated element.
     * @param name - The name of the attribute that changed.
     * @param oldValue - The previous value of the attribute.
     * @param newValue - The new value of the attribute.
     */
    onAttributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * Emits a custom HTML event.
     * @param type - The type name of the event.
     * @param detail - The event detail object to send with the event.
     * @param options - The event options. By default bubbles and composed.
     * @remarks
     * Only emits events if connected.
     */
    emit(type: string, detail?: any, options?: Omit<CustomEventInit, "detail">): void | boolean;
    private finishInitialization;
    private renderTemplate;
    /**
     * Locates or creates a controller for the specified element.
     * @param element - The element to return the controller for.
     * @remarks
     * The specified element must have a {@link FASTElementDefinition}
     * registered either through the use of the {@link customElement}
     * decorator or a call to `FASTElement.define`.
     */
    static forCustomElement(element: HTMLElement): Controller;
}

/**
 * Creates a function capable of locating metadata associated with a type.
 * @returns A metadata locator function.
 * @internal
 */
export declare function createMetadataLocator<TMetadata>(): (target: {}) => TMetadata[];

/**
 * Transforms a template literal string into styles.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @remarks
 * The css helper supports interpolation of strings and ElementStyle instances.
 * @public
 */
export declare function css(strings: TemplateStringsArray, ...values: (ComposableStyles | CSSDirective)[]): ElementStyles;

/**
 * Directive for use in {@link css}.
 *
 * @public
 */
export declare class CSSDirective {
    /**
     * Creates a CSS fragment to interpolate into the CSS document.
     * @returns - the string to interpolate into CSS
     */
    createCSS(): ComposableStyles;
    /**
     * Creates a behavior to bind to the host element.
     * @returns - the behavior to bind to the host element, or undefined.
     */
    createBehavior(): Behavior | undefined;
}

/**
 * Transforms a template literal string into partial CSS.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @public
 */
export declare function cssPartial(strings: TemplateStringsArray, ...values: (ComposableStyles | CSSDirective)[]): CSSDirective;

/**
 * Decorator: Defines a platform custom element based on `FASTElement`.
 * @param nameOrDef - The name of the element to define or a definition object
 * that describes the element to define.
 * @public
 */
export declare function customElement(nameOrDef: string | PartialFASTElementDefinition): (type: Function) => void;

/**
 * Metadata used to configure a custom attribute's behavior through a decorator.
 * @public
 */
export declare type DecoratorAttributeConfiguration = Omit<AttributeConfiguration, "property">;

/**
 * The default execution context used in binding expressions.
 * @public
 */
export declare const defaultExecutionContext: ExecutionContext<any, any>;

/**
 * Common DOM APIs.
 * @public
 */
export declare const DOM: Readonly<{
    /**
     * Indicates whether the DOM supports the adoptedStyleSheets feature.
     */
    supportsAdoptedStyleSheets: boolean;
    /**
     * Sets the HTML trusted types policy used by the templating engine.
     * @param policy - The policy to set for HTML.
     * @remarks
     * This API can only be called once, for security reasons. It should be
     * called by the application developer at the start of their program.
     */
    setHTMLPolicy(policy: TrustedTypesPolicy): void;
    /**
     * Turns a string into trusted HTML using the configured trusted types policy.
     * @param html - The string to turn into trusted HTML.
     * @remarks
     * Used internally by the template engine when creating templates
     * and setting innerHTML.
     */
    createHTML(html: string): string;
    /**
     * Determines if the provided node is a template marker used by the runtime.
     * @param node - The node to test.
     */
    isMarker(node: Node): node is Comment;
    /**
     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.
     * @param node - The marker node to extract the index from.
     */
    extractDirectiveIndexFromMarker(node: Comment): number;
    /**
     * Creates a placeholder string suitable for marking out a location *within*
     * an attribute value or HTML content.
     * @param index - The directive index to create the placeholder for.
     * @remarks
     * Used internally by binding directives.
     */
    createInterpolationPlaceholder(index: number): string;
    /**
     * Creates a placeholder that manifests itself as an attribute on an
     * element.
     * @param attributeName - The name of the custom attribute.
     * @param index - The directive index to create the placeholder for.
     * @remarks
     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.
     */
    createCustomAttributePlaceholder(attributeName: string, index: number): string;
    /**
     * Creates a placeholder that manifests itself as a marker within the DOM structure.
     * @param index - The directive index to create the placeholder for.
     * @remarks
     * Used internally by structural directives such as `repeat`.
     */
    createBlockPlaceholder(index: number): string;
    /**
     * Schedules DOM update work in the next async batch.
     * @param callable - The callable function or object to queue.
     */
    queueUpdate: (callable: Callable) => void;
    /**
     * Immediately processes all work previously scheduled
     * through queueUpdate.
     * @remarks
     * This also forces nextUpdate promises
     * to resolve.
     */
    processUpdates: () => void;
    /**
     * Resolves with the next DOM update.
     */
    nextUpdate(): Promise<void>;
    /**
     * Sets an attribute value on an element.
     * @param element - The element to set the attribute value on.
     * @param attributeName - The attribute name to set.
     * @param value - The value of the attribute to set.
     * @remarks
     * If the value is `null` or `undefined`, the attribute is removed, otherwise
     * it is set to the provided value using the standard `setAttribute` API.
     */
    setAttribute(element: HTMLElement, attributeName: string, value: any): void;
    /**
     * Sets a boolean attribute value.
     * @param element - The element to set the boolean attribute value on.
     * @param attributeName - The attribute name to set.
     * @param value - The value of the attribute to set.
     * @remarks
     * If the value is true, the attribute is added; otherwise it is removed.
     */
    setBooleanAttribute(element: HTMLElement, attributeName: string, value: boolean): void;
    /**
     * Removes all the child nodes of the provided parent node.
     * @param parent - The node to remove the children from.
     */
    removeChildNodes(parent: Node): void;
    /**
     * Creates a TreeWalker configured to walk a template fragment.
     * @param fragment - The fragment to walk.
     */
    createTemplateWalker(fragment: DocumentFragment): TreeWalker;
}>;

/**
 * Creates a function that can be used to filter a Node array, selecting only elements.
 * @param selector - An optional selector to restrict the filter to.
 * @public
 */
export declare function elements(selector?: string): ElementsFilter;

/**
 * Elements filter function type.
 *
 * @public
 */
export declare type ElementsFilter = (value: Node, index: number, array: Node[]) => boolean;

/**
 * Creates an ElementStyles instance for an array of ComposableStyles.
 * @public
 */
export declare type ElementStyleFactory = (styles: ReadonlyArray<ComposableStyles>) => ElementStyles;

/**
 * Represents styles that can be applied to a custom element.
 * @public
 */
export declare abstract class ElementStyles {
    private targets;
    /** @internal */
    abstract readonly styles: ReadonlyArray<ComposableStyles>;
    /** @internal */
    abstract readonly behaviors: ReadonlyArray<Behavior> | null;
    /** @internal */
    addStylesTo(target: StyleTarget): void;
    /** @internal */
    removeStylesFrom(target: StyleTarget): void;
    /** @internal */
    isAttachedTo(target: StyleTarget): boolean;
    /**
     * Associates behaviors with this set of styles.
     * @param behaviors - The behaviors to associate.
     */
    withBehaviors(...behaviors: Behavior[]): this;
    /**
     * Create ElementStyles from ComposableStyles.
     */
    static readonly create: ElementStyleFactory;
}

/**
 * A View representing DOM nodes specifically for rendering the view of a custom element.
 * @public
 */
export declare interface ElementView extends View {
    /**
     * Appends the view's DOM nodes to the referenced node.
     * @param node - The parent node to append the view's DOM nodes to.
     */
    appendTo(node: Node): void;
}

/**
 * A template capable of creating views specifically for rendering custom elements.
 * @public
 */
export declare interface ElementViewTemplate {
    /**
     * Creates an ElementView instance based on this template definition.
     * @param hostBindingTarget - The element that host behaviors will be bound to.
     */
    create(hostBindingTarget: Element): ElementView;
    /**
     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.
     * @param source - The data source to bind the template to.
     * @param host - The Element where the template will be rendered.
     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the
     * host that the template is being attached to.
     */
    render(source: any, host: Node, hostBindingTarget?: Element): HTMLView;
}

/**
 * A readonly, empty array.
 * @remarks
 * Typically returned by APIs that return arrays when there are
 * no actual items to return.
 * @internal
 */
export declare const emptyArray: readonly never[];

/**
 * Enables the array observation mechanism.
 * @remarks
 * Array observation is enabled automatically when using the
 * {@link RepeatDirective}, so calling this API manually is
 * not typically necessary.
 * @public
 */
export declare function enableArrayObservation(): void;

/**
 * Provides additional contextual information available to behaviors and expressions.
 * @public
 */
export declare class ExecutionContext<TParent = any, TGrandparent = any> {
    /**
     * The index of the current item within a repeat context.
     */
    index: number;
    /**
     * The length of the current collection within a repeat context.
     */
    length: number;
    /**
     * The parent data object within a repeat context.
     */
    parent: TParent;
    /**
     * The parent execution context when in nested context scenarios.
     */
    parentContext: ExecutionContext<TGrandparent>;
    /**
     * The current event within an event handler.
     */
    get event(): Event;
    /**
     * Indicates whether the current item within a repeat context
     * has an even index.
     */
    get isEven(): boolean;
    /**
     * Indicates whether the current item within a repeat context
     * has an odd index.
     */
    get isOdd(): boolean;
    /**
     * Indicates whether the current item within a repeat context
     * is the first item in the collection.
     */
    get isFirst(): boolean;
    /**
     * Indicates whether the current item within a repeat context
     * is somewhere in the middle of the collection.
     */
    get isInMiddle(): boolean;
    /**
     * Indicates whether the current item within a repeat context
     * is the last item in the collection.
     */
    get isLast(): boolean;
    /**
     * Sets the event for the current execution context.
     * @param event - The event to set.
     * @internal
     */
    static setEvent(event: Event | null): void;
}

/**
 * The FAST global.
 * @internal
 */
export declare const FAST: FASTGlobal;

/**
 * Represents a custom element based on the FASTElement infrastructure.
 * @public
 */
export declare interface FASTElement {
    /**
     * The underlying controller that handles the lifecycle and rendering of
     * this FASTElement.
     */
    readonly $fastController: Controller;
    /**
     * Emits a custom HTML event.
     * @param type - The type name of the event.
     * @param detail - The event detail object to send with the event.
     * @param options - The event options. By default bubbles and composed.
     * @remarks
     * Only emits events if the element is connected.
     */
    $emit(type: string, detail?: any, options?: Omit<CustomEventInit, "detail">): boolean | void;
    /**
     * The connected callback for this FASTElement.
     * @remarks
     * This method is invoked by the platform whenever this FASTElement
     * becomes connected to the document.
     */
    connectedCallback(): void;
    /**
     * The disconnected callback for this FASTElement.
     * @remarks
     * This method is invoked by the platform whenever this FASTElement
     * becomes disconnected from the document.
     */
    disconnectedCallback(): void;
    /**
     * The attribute changed callback for this FASTElement.
     * @param name - The name of the attribute that changed.
     * @param oldValue - The previous value of the attribute.
     * @param newValue - The new value of the attribute.
     * @remarks
     * This method is invoked by the platform whenever an observed
     * attribute of FASTElement has a value change.
     */
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
}

/**
 * A minimal base class for FASTElements that also provides
 * static helpers for working with FASTElements.
 * @public
 */
export declare const FASTElement: (new () => HTMLElement & FASTElement) & {
    /**
     * Creates a new FASTElement base class inherited from the
     * provided base type.
     * @param BaseType - The base element type to inherit from.
     */
    from<TBase extends {
        new (): HTMLElement;
        prototype: HTMLElement;
    }>(BaseType: TBase): new () => InstanceType<TBase> & FASTElement;
    /**
     * Defines a platform custom element based on the provided type and definition.
     * @param type - The custom element type to define.
     * @param nameOrDef - The name of the element to define or a definition object
     * that describes the element to define.
     */
    define<TType extends Function>(type: TType, nameOrDef?: string | PartialFASTElementDefinition | undefined): TType;
};

/**
 * Defines metadata for a FASTElement.
 * @public
 */
export declare class FASTElementDefinition<TType extends Function = Function> {
    private observedAttributes;
    /**
     * The type this element definition describes.
     */
    readonly type: TType;
    /**
     * Indicates if this element has been defined in at least one registry.
     */
    get isDefined(): boolean;
    /**
     * The name of the custom element.
     */
    readonly name: string;
    /**
     * The custom attributes of the custom element.
     */
    readonly attributes: ReadonlyArray<AttributeDefinition>;
    /**
     * A map enabling lookup of attribute by associated property name.
     */
    readonly propertyLookup: Record<string, AttributeDefinition>;
    /**
     * A map enabling lookup of property by associated attribute name.
     */
    readonly attributeLookup: Record<string, AttributeDefinition>;
    /**
     * The template to render for the custom element.
     */
    readonly template?: ElementViewTemplate;
    /**
     * The styles to associate with the custom element.
     */
    readonly styles?: ElementStyles;
    /**
     * Options controlling the creation of the custom element's shadow DOM.
     */
    readonly shadowOptions?: ShadowRootInit;
    /**
     * Options controlling how the custom element is defined with the platform.
     */
    readonly elementOptions?: ElementDefinitionOptions;
    /**
     * Creates an instance of FASTElementDefinition.
     * @param type - The type this definition is being created for.
     * @param nameOrConfig - The name of the element to define or a config object
     * that describes the element to define.
     */
    constructor(type: TType, nameOrConfig?: PartialFASTElementDefinition | string);
    /**
     * Defines a custom element based on this definition.
     * @param registry - The element registry to define the element in.
     */
    define(registry?: CustomElementRegistry): this;
    /**
     * Gets the element definition associated with the specified type.
     * @param type - The custom element type to retrieve the definition for.
     */
    static readonly forType: <TType_1 extends Function>(key: TType_1) => FASTElementDefinition<Function> | undefined;
}

/**
 * The FAST global.
 * @internal
 */
export declare interface FASTGlobal {
    /**
     * The list of loaded versions.
     */
    readonly versions: string[];
    /**
     * Gets a kernel value.
     * @param id - The id to get the value for.
     * @param initialize - Creates the initial value for the id if not already existing.
     */
    getById<T>(id: string | number): T | null;
    getById<T>(id: string | number, initialize: () => T): T;
}

/**
 * The platform global type.
 * @public
 */
export declare type Global = typeof globalThis & {
    /**
     * Enables working with trusted types.
     */
    trustedTypes: TrustedTypes;
    /**
     * The FAST global.
     * @internal
     */
    readonly FAST: FASTGlobal;
};

/**
 * Transforms a template literal string into a renderable ViewTemplate.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @remarks
 * The html helper supports interpolation of strings, numbers, binding expressions,
 * other template instances, and Directive instances.
 * @public
 */
export declare function html<TSource = any, TParent = any>(strings: TemplateStringsArray, ...values: TemplateValue<TSource, TParent>[]): ViewTemplate<TSource, TParent>;

/**
 * A directive that configures data binding to element content and attributes.
 * @public
 */
export declare class HTMLBindingDirective extends TargetedHTMLDirective {
    binding: Binding;
    private cleanedTargetName?;
    private originalTargetName?;
    private bind;
    private unbind;
    private updateTarget;
    private isBindingVolatile;
    /**
     * Creates an instance of BindingDirective.
     * @param binding - A binding that returns the data used to update the DOM.
     */
    constructor(binding: Binding);
    /**
     * Gets/sets the name of the attribute or property that this
     * binding is targeting.
     */
    get targetName(): string | undefined;
    set targetName(value: string | undefined);
    /**
     * Makes this binding target the content of an element rather than
     * a particular attribute or property.
     */
    targetAtContent(): void;
    /**
     * Creates the runtime BindingBehavior instance based on the configuration
     * information stored in the BindingDirective.
     * @param target - The target node that the binding behavior should attach to.
     */
    createBehavior(target: Node): BindingBehavior;
}

/**
 * Instructs the template engine to apply behavior to a node.
 * @public
 */
export declare abstract class HTMLDirective implements NodeBehaviorFactory {
    /**
     * The index of the DOM node to which the created behavior will apply.
     */
    targetIndex: number;
    /**
     * Creates a placeholder string based on the directive's index within the template.
     * @param index - The index of the directive within the template.
     */
    abstract createPlaceholder(index: number): string;
    /**
     * Creates a behavior for the provided target node.
     * @param target - The node instance to create the behavior for.
     */
    abstract createBehavior(target: Node): Behavior;
}

/**
 * The standard View implementation, which also implements ElementView and SyntheticView.
 * @public
 */
export declare class HTMLView implements ElementView, SyntheticView {
    private fragment;
    private behaviors;
    /**
     * The data that the view is bound to.
     */
    source: any | null;
    /**
     * The execution context the view is running within.
     */
    context: ExecutionContext | null;
    /**
     * The first DOM node in the range of nodes that make up the view.
     */
    firstChild: Node;
    /**
     * The last DOM node in the range of nodes that make up the view.
     */
    lastChild: Node;
    /**
     * Constructs an instance of HTMLView.
     * @param fragment - The html fragment that contains the nodes for this view.
     * @param behaviors - The behaviors to be applied to this view.
     */
    constructor(fragment: DocumentFragment, behaviors: Behavior[]);
    /**
     * Appends the view's DOM nodes to the referenced node.
     * @param node - The parent node to append the view's DOM nodes to.
     */
    appendTo(node: Node): void;
    /**
     * Inserts the view's DOM nodes before the referenced node.
     * @param node - The node to insert the view's DOM before.
     */
    insertBefore(node: Node): void;
    /**
     * Removes the view's DOM nodes.
     * The nodes are not disposed and the view can later be re-inserted.
     */
    remove(): void;
    /**
     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
     * Once a view has been disposed, it cannot be inserted or bound again.
     */
    dispose(): void;
    /**
     * Binds a view's behaviors to its binding source.
     * @param source - The binding source for the view's binding behaviors.
     * @param context - The execution context to run the behaviors within.
     */
    bind(source: unknown, context: ExecutionContext): void;
    /**
     * Unbinds a view's behaviors from its binding source.
     */
    unbind(): void;
    /**
     * Efficiently disposes of a contiguous range of synthetic view instances.
     * @param views - A contiguous range of views to be disposed.
     */
    static disposeContiguousBatch(views: SyntheticView[]): void;
}

/**
 * Core services shared across FAST instances.
 * @internal
 */
export declare const enum KernelServiceId {
    updateQueue = 1,
    observable = 2,
    contextEvent = 3,
    elementRegistry = 4
}

/**
 * Reverses all readonly members, making them mutable.
 * @internal
 */
export declare type Mutable<T> = {
    -readonly [P in keyof T]: T[P];
};

/**
 * A factory that can create a {@link Behavior} associated with a particular
 * location within a DOM fragment.
 * @public
 */
export declare interface NodeBehaviorFactory {
    /**
     * The index of the DOM node to which the created behavior will apply.
     */
    targetIndex: number;
    /**
     * Creates a behavior for the provided target node.
     * @param target - The node instance to create the behavior for.
     */
    createBehavior(target: Node): Behavior;
}

/**
 * Options for configuring node observation behavior.
 * @public
 */
export declare interface NodeBehaviorOptions<T = any> {
    /**
     * The property to assign the observed nodes to.
     */
    property: T;
    /**
     * Filters nodes that are synced with the property.
     * Called one time for each element in the array.
     * @param value - The Node that is being inspected.
     * @param index - The index of the node within the array.
     * @param array - The Node array that is being filtered.
     */
    filter?: ElementsFilter;
}

/**
 * A base class for node observation.
 * @internal
 */
declare abstract class NodeObservationBehavior<T extends NodeBehaviorOptions> implements Behavior {
    protected target: HTMLElement;
    protected options: T;
    private source;
    private shouldUpdate;
    /**
     * Creates an instance of NodeObservationBehavior.
     * @param target - The target to assign the nodes property on.
     * @param options - The options to use in configuring node observation.
     */
    constructor(target: HTMLElement, options: T);
    /**
     * Begins observation of the nodes.
     */
    abstract observe(): void;
    /**
     * Disconnects observation of the nodes.
     */
    abstract disconnect(): void;
    /**
     * Retrieves the nodes that should be assigned to the target.
     */
    protected abstract getNodes(): Node[];
    /**
     * Bind this behavior to the source.
     * @param source - The source to bind to.
     * @param context - The execution context that the binding is operating within.
     */
    bind(source: any): void;
    /**
     * Unbinds this behavior from the source.
     * @param source - The source to unbind from.
     */
    unbind(): void;
    /** @internal */
    handleEvent(): void;
    private computeNodes;
    private updateTarget;
}

declare function normalBind(this: BindingBehavior, source: unknown, context: ExecutionContext): void;

declare function normalUnbind(this: BindingBehavior): void;

/**
 * Provides change notification for a source object.
 * @public
 */
export declare interface Notifier {
    /**
     * The source object that this notifier provides change notification for.
     */
    readonly source: any;
    /**
     * Notifies all subscribers, based on the args.
     * @param args - Data passed along to subscribers during notification.
     * @remarks
     * In some implementations, the args may be used to target specific subscribers.
     * This is usually in the case where a propertyName was passed during subscription.
     */
    notify(args: any): void;
    /**
     * Subscribes to notification of changes in an object's state.
     * @param subscriber - The object that is subscribing for change notification.
     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.
     * @remarks
     * Some implementation may or may not require the propertyToWatch.
     */
    subscribe(subscriber: Subscriber, propertyToWatch?: any): void;
    /**
     * Unsubscribes from notification of changes in an object's state.
     * @param subscriber - The object that is unsubscribing from change notification.
     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.
     * @remarks
     * Some implementation may or may not require the propertyToUnwatch.
     */
    unsubscribe(subscriber: Subscriber, propertyToUnwatch?: any): void;
}

/**
 * A {@link ValueConverter} that converts to and from `number` values.
 * @remarks
 * This converter allows for nullable numbers, returning `null` if the
 * input was `null`, `undefined`, or `NaN`.
 * @public
 */
export declare const nullableNumberConverter: ValueConverter;

/**
 * Common Observable APIs.
 * @public
 */
export declare const Observable: Readonly<{
    /**
     * @internal
     * @param factory - The factory used to create array observers.
     */
    setArrayObserverFactory(factory: (collection: any[]) => Notifier): void;
    /**
     * Gets a notifier for an object or Array.
     * @param source - The object or Array to get the notifier for.
     */
    getNotifier: (source: any) => Notifier;
    /**
     * Records a property change for a source object.
     * @param source - The object to record the change against.
     * @param propertyName - The property to track as changed.
     */
    track(source: unknown, propertyName: string): void;
    /**
     * Notifies watchers that the currently executing property getter or function is volatile
     * with respect to its observable dependencies.
     */
    trackVolatile(): void;
    /**
     * Notifies subscribers of a source object of changes.
     * @param source - the object to notify of changes.
     * @param args - The change args to pass to subscribers.
     */
    notify(source: unknown, args: any): void;
    /**
     * Defines an observable property on an object or prototype.
     * @param target - The target object to define the observable on.
     * @param nameOrAccessor - The name of the property to define as observable;
     * or a custom accessor that specifies the property name and accessor implementation.
     */
    defineProperty(target: {}, nameOrAccessor: string | Accessor): void;
    /**
     * Finds all the observable accessors defined on the target,
     * including its prototype chain.
     * @param target - The target object to search for accessor on.
     */
    getAccessors: (target: {}) => Accessor[];
    /**
     * Creates a {@link BindingObserver} that can watch the
     * provided {@link Binding} for changes.
     * @param binding - The binding to observe.
     * @param initialSubscriber - An initial subscriber to changes in the binding value.
     * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.
     */
    binding<TSource = any, TReturn = any, TParent = any>(binding: Binding<TSource, TReturn, TParent>, initialSubscriber?: Subscriber | undefined, isVolatileBinding?: boolean): BindingObserver<TSource, TReturn, TParent>;
    /**
     * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated
     * on every evaluation of the value.
     * @param binding - The binding to inspect.
     */
    isVolatileBinding<TSource_1 = any, TReturn_1 = any, TParent_1 = any>(binding: Binding<TSource_1, TReturn_1, TParent_1>): boolean;
}>;

/**
 * Decorator: Defines an observable property on the target.
 * @param target - The target to define the observable on.
 * @param nameOrAccessor - The property name or accessor to define the observable as.
 * @public
 */
export declare function observable(target: {}, nameOrAccessor: string | Accessor): void;

/**
 * A record of observable property access.
 * @public
 */
export declare interface ObservationRecord {
    /**
     * The source object with an observable property that was accessed.
     */
    propertySource: any;
    /**
     * The name of the observable property on {@link ObservationRecord.propertySource} that was accessed.
     */
    propertyName: string;
}

/**
 * Represents metadata configuration for a custom element.
 * @public
 */
export declare interface PartialFASTElementDefinition {
    /**
     * The name of the custom element.
     */
    readonly name: string;
    /**
     * The template to render for the custom element.
     */
    readonly template?: ElementViewTemplate;
    /**
     * The styles to associate with the custom element.
     */
    readonly styles?: ComposableStyles | ComposableStyles[];
    /**
     * The custom attributes of the custom element.
     */
    readonly attributes?: (AttributeConfiguration | string)[];
    /**
     * Options controlling the creation of the custom element's shadow DOM.
     */
    readonly shadowOptions?: Partial<ShadowRootInit> | null;
    /**
     * Options controlling how the custom element is defined with the platform.
     */
    readonly elementOptions?: ElementDefinitionOptions;
}

/**
 * An implementation of Notifier that allows subscribers to be notified
 * of individual property changes on an object.
 * @public
 */
export declare class PropertyChangeNotifier implements Notifier {
    private subscribers;
    private sourceSubscribers;
    /**
     * The source that property changes are being notified for.
     */
    readonly source: any;
    /**
     * Creates an instance of PropertyChangeNotifier for the specified source.
     * @param source - The object source that subscribers will receive notifications from.
     */
    constructor(source: any);
    /**
     * Notifies all subscribers, based on the specified property.
     * @param propertyName - The property name, passed along to subscribers during notification.
     */
    notify(propertyName: string): void;
    /**
     * Subscribes to notification of changes in an object's state.
     * @param subscriber - The object that is subscribing for change notification.
     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.
     */
    subscribe(subscriber: Subscriber, propertyToWatch?: string): void;
    /**
     * Unsubscribes from notification of changes in an object's state.
     * @param subscriber - The object that is unsubscribing from change notification.
     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.
     */
    unsubscribe(subscriber: Subscriber, propertyToUnwatch?: string): void;
}

/**
 * A directive that observes the updates a property with a reference to the element.
 * @param propertyName - The name of the property to assign the reference to.
 * @public
 */
export declare function ref<T = any>(propertyName: keyof T & string): CaptureType<T>;

/**
 * The runtime behavior for template references.
 * @public
 */
export declare class RefBehavior implements Behavior {
    private target;
    private propertyName;
    /**
     * Creates an instance of RefBehavior.
     * @param target - The element to reference.
     * @param propertyName - The name of the property to assign the reference to.
     */
    constructor(target: HTMLElement, propertyName: string);
    /**
     * Bind this behavior to the source.
     * @param source - The source to bind to.
     * @param context - The execution context that the binding is operating within.
     */
    bind(source: any): void;
    /**
     * Unbinds this behavior from the source.
     * @param source - The source to unbind from.
     */
    unbind(): void;
}

/**
 * A directive that enables list rendering.
 * @param itemsBinding - The array to render.
 * @param templateOrTemplateBinding - The template or a template binding used obtain a template
 * to render for each item in the array.
 * @param options - Options used to turn on special repeat features.
 * @public
 */
export declare function repeat<TSource = any, TItem = any>(itemsBinding: Binding<TSource, readonly TItem[]>, templateOrTemplateBinding: SyntheticViewTemplate | Binding<TSource, SyntheticViewTemplate>, options?: RepeatOptions): CaptureType<TSource>;

/**
 * A behavior that renders a template for each item in an array.
 * @public
 */
export declare class RepeatBehavior<TSource = any> implements Behavior, Subscriber {
    private location;
    private itemsBinding;
    private templateBinding;
    private options;
    private source;
    private views;
    private template;
    private templateBindingObserver;
    private items;
    private itemsObserver;
    private itemsBindingObserver;
    private originalContext;
    private childContext;
    private bindView;
    /**
     * Creates an instance of RepeatBehavior.
     * @param location - The location in the DOM to render the repeat.
     * @param itemsBinding - The array to render.
     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.
     * @param templateBinding - The template to render for each item.
     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.
     * @param options - Options used to turn on special repeat features.
     */
    constructor(location: Node, itemsBinding: Binding<TSource, any[]>, isItemsBindingVolatile: boolean, templateBinding: Binding<TSource, SyntheticViewTemplate>, isTemplateBindingVolatile: boolean, options: RepeatOptions);
    /**
     * Bind this behavior to the source.
     * @param source - The source to bind to.
     * @param context - The execution context that the binding is operating within.
     */
    bind(source: TSource, context: ExecutionContext): void;
    /**
     * Unbinds this behavior from the source.
     * @param source - The source to unbind from.
     */
    unbind(): void;
    /** @internal */
    handleChange(source: any, args: Splice[]): void;
    private observeItems;
    private updateViews;
    private refreshAllViews;
    private unbindAllViews;
}

/**
 * A directive that configures list rendering.
 * @public
 */
export declare class RepeatDirective<TSource = any> extends HTMLDirective {
    readonly itemsBinding: Binding;
    readonly templateBinding: Binding<TSource, SyntheticViewTemplate>;
    readonly options: RepeatOptions;
    private isItemsBindingVolatile;
    private isTemplateBindingVolatile;
    /**
     * Creates a placeholder string based on the directive's index within the template.
     * @param index - The index of the directive within the template.
     */
    createPlaceholder: (index: number) => string;
    /**
     * Creates an instance of RepeatDirective.
     * @param itemsBinding - The binding that provides the array to render.
     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.
     * @param options - Options used to turn on special repeat features.
     */
    constructor(itemsBinding: Binding, templateBinding: Binding<TSource, SyntheticViewTemplate>, options: RepeatOptions);
    /**
     * Creates a behavior for the provided target node.
     * @param target - The node instance to create the behavior for.
     */
    createBehavior(target: Node): RepeatBehavior<TSource>;
}

/**
 * Options for configuring repeat behavior.
 * @public
 */
export declare interface RepeatOptions {
    /**
     * Enables index, length, and dependent positioning updates in item templates.
     */
    positioning?: boolean;
    /**
     * Enables view recycling
     */
    recycle?: boolean;
}

/**
 * A directive that observes the `assignedNodes()` of a slot and updates a property
 * whenever they change.
 * @param propertyOrOptions - The options used to configure slotted node observation.
 * @public
 */
export declare function slotted<T = any>(propertyOrOptions: (keyof T & string) | SlottedBehaviorOptions<keyof T & string>): CaptureType<T>;

/**
 * The runtime behavior for slotted node observation.
 * @public
 */
export declare class SlottedBehavior extends NodeObservationBehavior<SlottedBehaviorOptions> {
    /**
     * Creates an instance of SlottedBehavior.
     * @param target - The slot element target to observe.
     * @param options - The options to use when observing the slot.
     */
    constructor(target: HTMLSlotElement, options: SlottedBehaviorOptions);
    /**
     * Begins observation of the nodes.
     */
    observe(): void;
    /**
     * Disconnects observation of the nodes.
     */
    disconnect(): void;
    /**
     * Retrieves the nodes that should be assigned to the target.
     */
    protected getNodes(): Node[];
}

/**
 * The options used to configure slotted node observation.
 * @public
 */
export declare interface SlottedBehaviorOptions<T = any> extends NodeBehaviorOptions<T>, AssignedNodesOptions {
}

/**
 * Represents a set of splice-based changes against an Array.
 * @public
 */
export declare interface Splice {
    /**
     * The index that the splice occurs at.
     */
    index: number;
    /**
     * The items that were removed.
     */
    removed: any[];
    /**
     * The  number of items that were added.
     */
    addedCount: number;
}

/**
 * A node that can be targeted by styles.
 * @public
 */
export declare interface StyleTarget {
    /**
     * Stylesheets to be adopted by the node.
     */
    adoptedStyleSheets?: CSSStyleSheet[];
    /**
     * Adds styles to the target by appending the styles.
     * @param styles - The styles element to add.
     */
    append(styles: HTMLStyleElement): void;
    /**
     * Adds styles to the target by prepending the styles.
     * @param styles - The styles element to add.
     * @deprecated - use append()
     */
    prepend(styles: HTMLStyleElement): void;
    /**
     * Removes styles from the target.
     * @param styles - The styles element to remove.
     */
    removeChild(styles: HTMLStyleElement): void;
    /**
     * Returns all element descendants of node that match selectors.
     * @param selectors - The CSS selector to use for the query.
     */
    querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
}

/**
 * Implemented by objects that are interested in change notifications.
 * @public
 */
export declare interface Subscriber {
    /**
     * Called when a source this instance has subscribed to changes.
     * @param source - The source of the change.
     * @param args - The event args detailing the change that occurred.
     */
    handleChange(source: any, args: any): void;
}

/**
 * An implementation of {@link Notifier} that efficiently keeps track of
 * subscribers interested in a specific change notification on an
 * observable source.
 *
 * @remarks
 * This set is optimized for the most common scenario of 1 or 2 subscribers.
 * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.
 * If the set ever exceeds two subscribers, it upgrades to an array automatically.
 * @public
 */
export declare class SubscriberSet implements Notifier {
    private sub1;
    private sub2;
    private spillover;
    /**
     * The source that this subscriber set is reporting changes for.
     */
    readonly source: any;
    /**
     * Creates an instance of SubscriberSet for the specified source.
     * @param source - The object source that subscribers will receive notifications from.
     * @param initialSubscriber - An initial subscriber to changes.
     */
    constructor(source: any, initialSubscriber?: Subscriber);
    /**
     * Checks whether the provided subscriber has been added to this set.
     * @param subscriber - The subscriber to test for inclusion in this set.
     */
    has(subscriber: Subscriber): boolean;
    /**
     * Subscribes to notification of changes in an object's state.
     * @param subscriber - The object that is subscribing for change notification.
     */
    subscribe(subscriber: Subscriber): void;
    /**
     * Unsubscribes from notification of changes in an object's state.
     * @param subscriber - The object that is unsubscribing from change notification.
     */
    unsubscribe(subscriber: Subscriber): void;
    /**
     * Notifies all subscribers.
     * @param args - Data passed along to subscribers during notification.
     */
    notify(args: any): void;
}

/**
 * The options used to configure subtree observation.
 * @public
 */
export declare interface SubtreeBehaviorOptions<T = any> extends Omit<NodeBehaviorOptions<T>, "filter">, Omit<MutationObserverInit, "subtree" | "childList"> {
    /**
     * Indicates that child subtrees should be observed for changes.
     */
    subtree: boolean;
    /**
     * When subtrees are observed, a query selector is required to indicate
     * which of potentially many nodes should be assigned to the property.
     */
    selector: string;
}

/**
 * A view representing a range of DOM nodes which can be added/removed ad hoc.
 * @public
 */
export declare interface SyntheticView extends View {
    /**
     * The first DOM node in the range of nodes that make up the view.
     */
    readonly firstChild: Node;
    /**
     * The last DOM node in the range of nodes that make up the view.
     */
    readonly lastChild: Node;
    /**
     * Inserts the view's DOM nodes before the referenced node.
     * @param node - The node to insert the view's DOM before.
     */
    insertBefore(node: Node): void;
    /**
     * Removes the view's DOM nodes.
     * The nodes are not disposed and the view can later be re-inserted.
     */
    remove(): void;
    /**
     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
     * Once a view has been disposed, it cannot be inserted or bound again.
     */
    dispose(): void;
}

/**
 * A template capable of rendering views not specifically connected to custom elements.
 * @public
 */
export declare interface SyntheticViewTemplate<TSource = any, TParent = any> {
    /**
     * Creates a SyntheticView instance based on this template definition.
     */
    create(): SyntheticView;
}

/**
 * A {@link HTMLDirective} that targets a named attribute or property on a node.
 * @public
 */
export declare abstract class TargetedHTMLDirective extends HTMLDirective {
    /**
     * Gets/sets the name of the attribute or property that this
     * directive is targeting on the associated node.
     */
    abstract targetName: string | undefined;
    /**
     * Creates a placeholder string based on the directive's index within the template.
     * @param index - The index of the directive within the template.
     */
    createPlaceholder: (index: number) => string;
}

/**
 * Represents the types of values that can be interpolated into a template.
 * @public
 */
export declare type TemplateValue<TScope, TParent = any> = Binding<TScope, any, TParent> | string | number | HTMLDirective | CaptureType<TScope>;

/**
 * Enables working with trusted types.
 * @public
 */
export declare type TrustedTypes = {
    /**
     * Creates a trusted types policy.
     * @param name - The policy name.
     * @param rules - The policy rules implementation.
     */
    createPolicy(name: string, rules: TrustedTypesPolicy): TrustedTypesPolicy;
};

/**
 * A policy for use with the standard trustedTypes platform API.
 * @public
 */
export declare type TrustedTypesPolicy = {
    /**
     * Creates trusted HTML.
     * @param html - The HTML to clear as trustworthy.
     */
    createHTML(html: string): string;
};

declare function updatePropertyTarget(this: BindingBehavior, value: unknown): void;

/**
 * Represents objects that can convert values to and from
 * view or model representations.
 * @public
 */
export declare interface ValueConverter {
    /**
     * Converts a value from its representation in the model, to a representation for the view.
     * @param value - The value to convert to a view representation.
     */
    toView(value: any): any;
    /**
     * Converts a value from its representation in the view, to a representation for the model.
     * @param value - The value to convert to a model representation.
     */
    fromView(value: any): any;
}

/**
 * Represents a collection of DOM nodes which can be bound to a data source.
 * @public
 */
export declare interface View {
    /**
     * The execution context the view is running within.
     */
    readonly context: ExecutionContext | null;
    /**
     * The data that the view is bound to.
     */
    readonly source: any | null;
    /**
     * Binds a view's behaviors to its binding source.
     * @param source - The binding source for the view's binding behaviors.
     * @param context - The execution context to run the view within.
     */
    bind(source: unknown, context: ExecutionContext): void;
    /**
     * Unbinds a view's behaviors from its binding source and context.
     */
    unbind(): void;
    /**
     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
     * Once a view has been disposed, it cannot be inserted or bound again.
     */
    dispose(): void;
}

/**
 * A template capable of creating HTMLView instances or rendering directly to DOM.
 * @public
 */
export declare class ViewTemplate<TSource = any, TParent = any> implements ElementViewTemplate, SyntheticViewTemplate {
    private behaviorCount;
    private hasHostBehaviors;
    private fragment;
    private targetOffset;
    private viewBehaviorFactories;
    private hostBehaviorFactories;
    /**
     * The html representing what this template will
     * instantiate, including placeholders for directives.
     */
    readonly html: string | HTMLTemplateElement;
    /**
     * The directives that will be connected to placeholders in the html.
     */
    readonly directives: ReadonlyArray<HTMLDirective>;
    /**
     * Creates an instance of ViewTemplate.
     * @param html - The html representing what this template will instantiate, including placeholders for directives.
     * @param directives - The directives that will be connected to placeholders in the html.
     */
    constructor(html: string | HTMLTemplateElement, directives: ReadonlyArray<HTMLDirective>);
    /**
     * Creates an HTMLView instance based on this template definition.
     * @param hostBindingTarget - The element that host behaviors will be bound to.
     */
    create(hostBindingTarget?: Element): HTMLView;
    /**
     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.
     * @param source - The data source to bind the template to.
     * @param host - The Element where the template will be rendered.
     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the
     * host that the template is being attached to.
     */
    render(source: TSource, host: Node | string, hostBindingTarget?: Element): HTMLView;
}

/**
 * Decorator: Marks a property getter as having volatile observable dependencies.
 * @param target - The target that the property is defined on.
 * @param name - The property name.
 * @param name - The existing descriptor.
 * @public
 */
export declare function volatile(target: {}, name: string | Accessor, descriptor: PropertyDescriptor): PropertyDescriptor;

/**
 * A directive that enables basic conditional rendering in a template.
 * @param binding - The condition to test for rendering.
 * @param templateOrTemplateBinding - The template or a binding that gets
 * the template to render when the condition is true.
 * @param elseTemplateOrTemplateBinding - Optional template or binding that that
 * gets the template to render when the conditional is false.
 * @public
 */
export declare function when<TSource = any, TReturn = any>(binding: Binding<TSource, TReturn>, templateOrTemplateBinding: SyntheticViewTemplate | Binding<TSource, SyntheticViewTemplate>, elseTemplateOrTemplateBinding?: SyntheticViewTemplate | Binding<TSource, SyntheticViewTemplate>): CaptureType<TSource>;

export { }
