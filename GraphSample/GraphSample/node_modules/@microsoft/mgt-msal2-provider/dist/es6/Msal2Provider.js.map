{"version":3,"file":"Msal2Provider.js","sourceRoot":"src/","sources":["Msal2Provider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  IProvider,\n  LoginType,\n  ProviderState,\n  createFromProvider,\n  Providers,\n  IProviderAccount\n} from '@microsoft/mgt-element';\nimport {\n  Configuration,\n  PublicClientApplication,\n  SilentRequest,\n  PopupRequest,\n  RedirectRequest,\n  AuthenticationResult,\n  AccountInfo,\n  EndSessionRequest,\n  InteractionRequiredAuthError\n} from '@azure/msal-browser';\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\n\n/**\n * base config for MSAL 2.0 authentication\n *\n * @export\n * @interface Msal2ConfigBase\n */\ninterface Msal2ConfigBase {\n  /**\n   * Redirect URI\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  redirectUri?: string;\n\n  /**\n   * Authority URL\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  authority?: string;\n\n  /**\n   * Other options\n   *\n   * @type {Configuration}\n   * @memberof Msal2Config\n   */\n  options?: Configuration;\n\n  /**\n   * List of scopes required\n   *\n   * @type {string[]}\n   * @memberof Msal2ConfigBase\n   */\n  scopes?: string[];\n  /**\n   * loginType if login uses popup\n   *\n   * @type {LoginType}\n   * @memberof Msal2ConfigBase\n   */\n  loginType?: LoginType;\n  /**\n   * login hint value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  loginHint?: string;\n  /**\n   * Domain hint value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  domainHint?: string;\n  /**\n   * prompt value\n   *\n   * @type {string}\n   * @memberof Msal2ConfigBase\n   */\n  prompt?: PromptType;\n\n  /**\n   * Session ID\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  sid?: string;\n\n  /**\n   * Specifies if incremental consent is disabled\n   *\n   * @type {boolean}\n   * @memberof Msal2ConfigBase\n   */\n  isIncrementalConsentDisabled?: boolean;\n}\n\n/**\n * Config for MSAL2.0 Authentication\n *\n * @export\n * @interface Msal2Config\n */\nexport interface Msal2Config extends Msal2ConfigBase {\n  /**\n   * Client ID of app registration\n   *\n   * @type {string}\n   * @memberof Msal2Config\n   */\n  clientId: string;\n}\n\n/**\n * Config for MSAL 2.0 Authentication where a PublicClientApplication already exists\n *\n * @export\n * @interface Msal2PublicClientApplicationConfig\n */\nexport interface Msal2PublicClientApplicationConfig extends Msal2ConfigBase {\n  /**\n   * Existing PublicClientApplication instance to use\n   *\n   * @type {PublicClientApplication}\n   * @memberof Msal2PublicClientApplicationConfig\n   */\n  publicClientApplication: PublicClientApplication;\n}\n\n/**\n * Prompt type enum\n *\n * @export\n * @enum {number}\n */\nexport enum PromptType {\n  SELECT_ACCOUNT = 'select_account',\n  LOGIN = 'login',\n  CONSENT = 'consent'\n}\n\n/**\n * MSAL2Provider using msal-browser to acquire tokens for authentication\n *\n * @export\n * @class Msal2Provider\n * @extends {IProvider}\n */\nexport class Msal2Provider extends IProvider {\n  private _publicClientApplication: PublicClientApplication;\n\n  /**\n   * Login type, Either Redirect or Popup\n   *\n   * @private\n   * @type {LoginType}\n   * @memberof Msal2Provider\n   */\n  private _loginType: LoginType;\n\n  /**\n   * Login hint, if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _loginHint;\n\n  /**\n   * Domain hint if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _domainHint;\n\n  /**\n   * Prompt type\n   *\n   * @private\n   * @type {string}\n   * @memberof Msal2Provider\n   */\n  private _prompt: string;\n\n  /**\n   * Session ID, if provided\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private _sid;\n\n  /**\n   * Configuration settings for authentication\n   *\n   * @private\n   * @type {Configuration}\n   * @memberof Msal2Provider\n   */\n  private ms_config: Configuration;\n\n  /**\n   * Gets the PublicClientApplication Instance\n   *\n   * @private\n   * @type {PublicClientApplication}\n   * @memberof Msal2Provider\n   */\n  public get publicClientApplication() {\n    return this._publicClientApplication;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtMsal2Provider';\n  }\n\n  /**\n   * List of scopes\n   *\n   * @type {string[]}\n   * @memberof Msal2Provider\n   */\n  public scopes: string[];\n\n  private sessionStorageRequestedScopesKey = 'mgt-requested-scopes';\n  private sessionStorageDeniedScopesKey = 'mgt-denied-scopes';\n  private homeAccountKey = '275f3731-e4a4-468a-bf9c-baca24b31e26';\n\n  public constructor(config: Msal2Config | Msal2PublicClientApplicationConfig) {\n    super();\n    this.initProvider(config);\n  }\n\n  /**\n   * Initialize provider with configuration details\n   *\n   * @private\n   * @param {Msal2Config} config\n   * @memberof Msal2Provider\n   */\n  private async initProvider(config: Msal2Config | Msal2PublicClientApplicationConfig) {\n    const msalConfig: Configuration = config.options || { auth: { clientId: '' } };\n    this.ms_config = msalConfig;\n    this.ms_config.cache = msalConfig.cache || {};\n    this.ms_config.cache.cacheLocation = msalConfig.cache.cacheLocation || 'localStorage';\n    if (\n      typeof this.ms_config.cache.storeAuthStateInCookie === 'undefined' ||\n      this.ms_config.cache.storeAuthStateInCookie === null\n    ) {\n      this.ms_config.cache.storeAuthStateInCookie = true;\n    }\n\n    this.ms_config.system = msalConfig.system || {};\n    this.ms_config.system.iframeHashTimeout = msalConfig.system.iframeHashTimeout || 10000;\n\n    if (config.authority) {\n      this.ms_config.auth.authority = config.authority;\n    }\n    if (config.redirectUri) {\n      this.ms_config.auth.redirectUri = config.redirectUri;\n    }\n\n    if ('clientId' in config) {\n      if (config.clientId) {\n        this.ms_config.auth.clientId = config.clientId;\n        this._publicClientApplication = new PublicClientApplication(this.ms_config);\n      } else {\n        throw new Error('clientId must be provided');\n      }\n    } else if ('publicClientApplication' in config) {\n      if (config.publicClientApplication) {\n        this._publicClientApplication = config.publicClientApplication;\n      } else {\n        throw new Error('publicClientApplication must be provided');\n      }\n    } else {\n      throw new Error('either clientId or publicClientApplication must be provided');\n    }\n\n    this._loginType = typeof config.loginType !== 'undefined' ? config.loginType : LoginType.Redirect;\n    this._loginHint = typeof config.loginHint !== 'undefined' ? config.loginHint : null;\n    this._sid = typeof config.sid !== 'undefined' ? config.sid : null;\n    this.isIncrementalConsentDisabled =\n      typeof config.isIncrementalConsentDisabled !== 'undefined' ? config.isIncrementalConsentDisabled : false;\n    this._domainHint = typeof config.domainHint !== 'undefined' ? config.domainHint : null;\n    this.scopes = typeof config.scopes !== 'undefined' ? config.scopes : ['user.read'];\n    this._prompt = typeof config.prompt !== 'undefined' ? config.prompt : PromptType.SELECT_ACCOUNT;\n    this.graph = createFromProvider(this);\n    try {\n      const tokenResponse = await this._publicClientApplication.handleRedirectPromise();\n      if (tokenResponse !== null) {\n        this.handleResponse(tokenResponse?.account);\n      } else {\n        this.trySilentSignIn();\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  /**\n   * Attempts to sign in user silently\n   *\n   * @memberof Msal2Provider\n   */\n  public async trySilentSignIn() {\n    let silentRequest: any = {\n      scopes: this.scopes,\n      domainHint: this._domainHint\n    };\n    if (this._sid || this._loginHint) {\n      silentRequest.sid = this._sid;\n      silentRequest.loginHint = this._loginHint;\n      try {\n        this.setState(ProviderState.Loading);\n        const response = await this._publicClientApplication.ssoSilent(silentRequest);\n        if (response) {\n          this.handleResponse(response?.account);\n        }\n      } catch (e) {\n        this.setState(ProviderState.SignedOut);\n      }\n    } else {\n      const account: AccountInfo = this.getAccount();\n      if (account) {\n        if (await this.getAccessToken(null)) {\n          this.handleResponse(account);\n          return;\n        }\n      }\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * Log in the user\n   *\n   * @return {*}  {Promise<void>}\n   * @memberof Msal2Provider\n   */\n  public async login(): Promise<void> {\n    const loginRequest: PopupRequest = {\n      scopes: this.scopes,\n      loginHint: this._loginHint,\n      prompt: this._prompt,\n      domainHint: this._domainHint\n    };\n    if (this._loginType == LoginType.Popup) {\n      const response = await this._publicClientApplication.loginPopup(loginRequest);\n      this.handleResponse(response?.account);\n    } else {\n      const loginRedirectRequest: RedirectRequest = { ...loginRequest };\n      this._publicClientApplication.loginRedirect(loginRedirectRequest);\n    }\n  }\n\n  /**\n   * Get all signed in accounts\n   *\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  public getAllAccounts() {\n    let usernames = [];\n    this._publicClientApplication.getAllAccounts().forEach((account: AccountInfo) => {\n      usernames.push({ username: account.username, id: account.homeAccountId } as IProviderAccount);\n    });\n    return usernames;\n  }\n\n  /**\n   * Switching between accounts\n   *\n   * @param {*} user\n   * @memberof Msal2Provider\n   */\n  public setActiveAccount(user: IProviderAccount) {\n    this._publicClientApplication.setActiveAccount(this._publicClientApplication.getAccountByHomeId(user.id));\n    this.setStoredAccount();\n    super.setActiveAccount(user);\n  }\n\n  /**\n   * Once a succesful login occurs, set the active account and store it\n   *\n   * @param {(AuthenticationResult | null)} account\n   * @memberof Msal2Provider\n   */\n  handleResponse(account: AccountInfo) {\n    if (account !== null) {\n      this.setActiveAccount({\n        username: account.name,\n        id: account.homeAccountId\n      } as IProviderAccount);\n      this.setState(ProviderState.SignedIn);\n    } else {\n      this.setState(ProviderState.SignedOut);\n    }\n    this.clearRequestedScopes();\n  }\n\n  /**\n   * Store the currently signed in account in storage\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private setStoredAccount() {\n    this.clearStoredAccount();\n    window[this.ms_config.cache.cacheLocation].setItem(\n      this.homeAccountKey,\n      this._publicClientApplication.getActiveAccount().homeAccountId\n    );\n  }\n\n  /**\n   * Get the stored account from storage\n   *\n   * @private\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  private getStoredAccount() {\n    let homeId = null;\n\n    homeId = window[this.ms_config.cache.cacheLocation].getItem(this.homeAccountKey);\n\n    return this._publicClientApplication.getAccountByHomeId(homeId);\n  }\n\n  /**\n   * Clears the stored account from storage\n   *\n   * @private\n   * @memberof Msal2Provider\n   */\n  private clearStoredAccount() {\n    window[this.ms_config.cache.cacheLocation].removeItem(this.homeAccountKey);\n  }\n\n  /**\n   * Adds scopes that have already been requested to sessionstorage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof Msal2Provider\n   */\n  protected setRequestedScopes(scopes: string[]) {\n    if (scopes) {\n      sessionStorage.setItem(this.sessionStorageRequestedScopesKey, JSON.stringify(scopes));\n    }\n  }\n\n  /**\n   * Adds denied scopes to session storage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof Msal2Provider\n   */\n  protected addDeniedScopes(scopes: string[]) {\n    if (scopes) {\n      let deniedScopes: string[] = this.getDeniedScopes() || [];\n      deniedScopes = deniedScopes.concat(scopes);\n\n      let index = deniedScopes.indexOf('openid');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n\n      index = deniedScopes.indexOf('profile');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n      sessionStorage.setItem(this.sessionStorageDeniedScopesKey, JSON.stringify(deniedScopes));\n    }\n  }\n\n  /**\n   * Gets denied scopes\n   *\n   * @protected\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  protected getDeniedScopes() {\n    const scopesStr = sessionStorage.getItem(this.sessionStorageDeniedScopesKey);\n    return scopesStr ? JSON.parse(scopesStr) : null;\n  }\n\n  /**\n   * Checks if scopes were denied previously\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @return {*}\n   * @memberof Msal2Provider\n   */\n  protected areScopesDenied(scopes: string[]) {\n    if (scopes) {\n      const deniedScopes = this.getDeniedScopes();\n      if (deniedScopes && deniedScopes.filter(s => -1 !== scopes.indexOf(s)).length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears all requested scopes from session storage\n   *\n   * @protected\n   * @memberof Msal2Provider\n   */\n  protected clearRequestedScopes() {\n    sessionStorage.removeItem(this.sessionStorageRequestedScopesKey);\n  }\n\n  /**\n   * Gets stored account if available, otherwise fetches the first account in the list of signed in accounts\n   *\n   * @private\n   * @return {*}  {(AccountInfo | null)}\n   * @memberof Msal2Provider\n   */\n  protected getAccount(): AccountInfo | null {\n    const account = this.getStoredAccount();\n    if (account) {\n      return account;\n    } else if (this._publicClientApplication.getAllAccounts().length > 0) {\n      return this._publicClientApplication.getAllAccounts()[0];\n    }\n    return null;\n  }\n\n  /**\n   * Logs out user\n   *\n   * @memberof Msal2Provider\n   */\n  public async logout() {\n    const logOutAccount = this._publicClientApplication.getActiveAccount();\n    const logOutRequest: EndSessionRequest = {\n      account: logOutAccount\n    };\n    this.clearStoredAccount();\n    if (this._loginType == LoginType.Redirect) {\n      this._publicClientApplication.logoutRedirect(logOutRequest);\n      this.setState(ProviderState.SignedOut);\n    } else {\n      await this._publicClientApplication.logoutPopup({ ...logOutRequest });\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * Returns access token for scopes\n   *\n   * @param {AuthenticationProviderOptions} [options]\n   * @return {*}  {Promise<string>}\n   * @memberof Msal2Provider\n   */\n  public async getAccessToken(options?: AuthenticationProviderOptions): Promise<string> {\n    const scopes = options ? options.scopes || this.scopes : this.scopes;\n    const accessTokenRequest: SilentRequest = {\n      scopes: scopes,\n      account: this.getAccount()\n    };\n    try {\n      const silentRequest: SilentRequest = accessTokenRequest;\n      const response = await this._publicClientApplication.acquireTokenSilent(silentRequest);\n      return response.accessToken;\n    } catch (e) {\n      if (e instanceof InteractionRequiredAuthError) {\n        if (this.isIncrementalConsentDisabled) {\n          return null;\n        }\n        if (this._loginType === LoginType.Redirect) {\n          if (!this.areScopesDenied(scopes)) {\n            this.setRequestedScopes(scopes);\n            this._publicClientApplication.acquireTokenRedirect(accessTokenRequest);\n          } else {\n            throw e;\n          }\n        } else {\n          try {\n            const response = await this._publicClientApplication.acquireTokenPopup(accessTokenRequest);\n            return response.accessToken;\n          } catch (e) {\n            throw e;\n          }\n        }\n      } else {\n        // if we don't know what the error is, just ask the user to sign in again\n        this.setState(ProviderState.SignedOut);\n      }\n    }\n\n    throw null;\n  }\n}\n"]}