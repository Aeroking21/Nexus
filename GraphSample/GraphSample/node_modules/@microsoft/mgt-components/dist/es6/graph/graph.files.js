/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CacheService, GraphPageIterator, prepScopes } from '@microsoft/mgt-element';
import { schemas } from './cacheStores';
import { ResponseType } from '@microsoft/microsoft-graph-client';
import { blobToBase64 } from '../utils/Utils';
/**
 * Clear Cache of FileList
 */
export function clearFilesCache() {
    let cache;
    cache = CacheService.getCache(schemas.fileLists, schemas.fileLists.stores.fileLists);
    cache.clearStore();
}
/**
 * Defines the time it takes for objects in the cache to expire
 */
export const getFileInvalidationTime = () => CacheService.config.files.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
/**
 * Whether or not the cache is enabled
 */
export const getIsFilesCacheEnabled = () => CacheService.config.files.isEnabled && CacheService.config.isEnabled;
/**
 * Defines the time it takes for objects in the cache to expire
 */
export const getFileListInvalidationTime = () => CacheService.config.fileLists.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;
/**
 * Whether or not the cache is enabled
 */
export const getIsFileListsCacheEnabled = () => CacheService.config.fileLists.isEnabled && CacheService.config.isEnabled;
export function getDriveItemByQuery(graph, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.fileQueries);
        const cachedFile = yield getFileFromCache(cache, resource);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(resource).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(resource, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /drives/{drive-id}/items/{item-id}
export function getDriveItemById(graph, driveId, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/drives/${driveId}/items/${itemId}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.driveFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /drives/{drive-id}/root:/{item-path}
export function getDriveItemByPath(graph, driveId, itemPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/drives/${driveId}/root:/${itemPath}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.driveFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /groups/{group-id}/drive/items/{item-id}
export function getGroupDriveItemById(graph, groupId, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/groups/${groupId}/drive/items/${itemId}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.groupFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /groups/{group-id}/drive/root:/{item-path}
export function getGroupDriveItemByPath(graph, groupId, itemPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/groups/${groupId}/drive/root:/${itemPath}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.groupFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /me/drive/items/{item-id}
export function getMyDriveItemById(graph, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/drive/items/${itemId}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /me/drive/root:/{item-path}
export function getMyDriveItemByPath(graph, itemPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/drive/root:/${itemPath}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /sites/{site-id}/drive/items/{item-id}
export function getSiteDriveItemById(graph, siteId, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/sites/${siteId}/drive/items/${itemId}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /sites/{site-id}/drive/root:/{item-path}
export function getSiteDriveItemByPath(graph, siteId, itemPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/sites/${siteId}/drive/root:/${itemPath}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /sites/{site-id}/lists/{list-id}/items/{item-id}/driveItem
export function getListDriveItemById(graph, siteId, listId, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/sites/${siteId}/lists/${listId}/items/${itemId}/driveItem`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.siteFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /users/{user-id}/drive/items/{item-id}
export function getUserDriveItemById(graph, userId, itemId) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/users/${userId}/drive/items/${itemId}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /users/{user-id}/drive/root:/{item-path}
export function getUserDriveItemByPath(graph, userId, itemPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/users/${userId}/drive/root:/${itemPath}`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.userFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'files.read';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /me/insights/trending/{id}/resource
// GET /me/insights/used/{id}/resource
// GET /me/insights/shared/{id}/resource
export function getMyInsightsDriveItemById(graph, insightType, id) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/insights/${insightType}/${id}/resource`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.insightFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'sites.read.all';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /users/{id or userPrincipalName}/insights/{trending or used or shared}/{id}/resource
export function getUserInsightsDriveItemById(graph, userId, insightType, id) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/users/${userId}/insights/${insightType}/${id}/resource`;
        // get from cache
        let cache;
        cache = CacheService.getCache(schemas.files, schemas.files.stores.insightFiles);
        const cachedFile = yield getFileFromCache(cache, endpoint);
        if (cachedFile) {
            return cachedFile;
        }
        // get from graph request
        const scopes = 'sites.read.all';
        let response;
        try {
            response = yield graph.api(endpoint).middlewareOptions(prepScopes(scopes)).get();
            if (getIsFilesCacheEnabled()) {
                cache.putValue(endpoint, { file: JSON.stringify(response) });
            }
        }
        catch (_a) { }
        return response || null;
    });
}
// GET /me/drive/root/children
export function getFilesIterator(graph, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = '/me/drive/root/children';
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /drives/{drive-id}/items/{item-id}/children
export function getDriveFilesByIdIterator(graph, driveId, itemId, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/drives/${driveId}/items/${itemId}/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /drives/{drive-id}/root:/{item-path}:/children
export function getDriveFilesByPathIterator(graph, driveId, itemPath, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/drives/${driveId}/root:/${itemPath}:/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /groups/{group-id}/drive/items/{item-id}/children
export function getGroupFilesByIdIterator(graph, groupId, itemId, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/groups/${groupId}/drive/items/${itemId}/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /groups/{group-id}/drive/root:/{item-path}:/children
export function getGroupFilesByPathIterator(graph, groupId, itemPath, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/groups/${groupId}/drive/root:/${itemPath}:/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /me/drive/items/{item-id}/children
export function getFilesByIdIterator(graph, itemId, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/drive/items/${itemId}/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /me/drive/root:/{item-path}:/children
export function getFilesByPathIterator(graph, itemPath, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/drive/root:/${itemPath}:/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /sites/{site-id}/drive/items/{item-id}/children
export function getSiteFilesByIdIterator(graph, siteId, itemId, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/sites/${siteId}/drive/items/${itemId}/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /sites/{site-id}/drive/root:/{item-path}:/children
export function getSiteFilesByPathIterator(graph, siteId, itemPath, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/sites/${siteId}/drive/root:/${itemPath}:/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /users/{user-id}/drive/items/{item-id}/children
export function getUserFilesByIdIterator(graph, userId, itemId, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/users/${userId}/drive/items/${itemId}/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /users/{user-id}/drive/root:/{item-path}:/children
export function getUserFilesByPathIterator(graph, userId, itemPath, top) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/users/${userId}/drive/root:/${itemPath}:/children`;
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = 'files.read';
        let request;
        try {
            request = graph.api(endpoint).middlewareOptions(prepScopes(scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(endpoint, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
export function getFilesByListQueryIterator(graph, listQuery, top) {
    return __awaiter(this, void 0, void 0, function* () {
        let filesPageIterator;
        // get iterator from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.fileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, listQuery);
        if (fileList) {
            filesPageIterator = yield getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);
            return filesPageIterator;
        }
        // get iterator from graph request
        const scopes = ['files.read', 'sites.read.all'];
        let request;
        try {
            request = yield graph.api(listQuery).middlewareOptions(prepScopes(...scopes));
            if (top) {
                request.top(top);
            }
            filesPageIterator = yield getFilesPageIteratorFromRequest(graph, request);
            if (getIsFileListsCacheEnabled()) {
                cache.putValue(listQuery, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
            }
        }
        catch (_a) { }
        return filesPageIterator || null;
    });
}
// GET /me/insights/{trending	| used | shared}
export function getMyInsightsFiles(graph, insightType) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = `/me/insights/${insightType}`;
        // get files from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.insightfileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, endpoint);
        if (fileList) {
            return fileList.files;
        }
        // get files from graph request
        const scopes = ['sites.read.all'];
        let insightResponse;
        try {
            insightResponse = yield graph
                .api(endpoint)
                .filter(`resourceReference/type eq 'microsoft.graph.driveItem'`)
                .middlewareOptions(prepScopes(...scopes))
                .get();
        }
        catch (_a) { }
        const result = yield getDriveItemsByInsights(graph, insightResponse, scopes);
        if (getIsFileListsCacheEnabled()) {
            cache.putValue(endpoint, { files: result });
        }
        return result || null;
    });
}
// GET /users/{id | userPrincipalName}/insights/{trending	| used | shared}
export function getUserInsightsFiles(graph, userId, insightType) {
    return __awaiter(this, void 0, void 0, function* () {
        let endpoint;
        let filter;
        if (insightType === 'shared') {
            endpoint = `/me/insights/shared`;
            filter = `((lastshared/sharedby/id eq '${userId}') and (resourceReference/type eq 'microsoft.graph.driveItem'))`;
        }
        else {
            endpoint = `/users/${userId}/insights/${insightType}`;
            filter = `resourceReference/type eq 'microsoft.graph.driveItem'`;
        }
        const key = `${endpoint}?$filter=${filter}`;
        // get files from cached values
        let cache;
        const cacheStore = schemas.fileLists.stores.insightfileLists;
        cache = CacheService.getCache(schemas.fileLists, cacheStore);
        const fileList = yield getFileListFromCache(cache, cacheStore, key);
        if (fileList) {
            return fileList.files;
        }
        // get files from graph request
        const scopes = ['sites.read.all'];
        let insightResponse;
        try {
            insightResponse = yield graph
                .api(endpoint)
                .filter(filter)
                .middlewareOptions(prepScopes(...scopes))
                .get();
        }
        catch (_a) { }
        const result = yield getDriveItemsByInsights(graph, insightResponse, scopes);
        if (getIsFileListsCacheEnabled()) {
            cache.putValue(endpoint, { files: result });
        }
        return result || null;
    });
}
export function getFilesByQueries(graph, fileQueries) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!fileQueries || fileQueries.length === 0) {
            return [];
        }
        const batch = graph.createBatch();
        const files = [];
        const scopes = ['files.read'];
        let cache;
        let cachedFile;
        if (getIsFilesCacheEnabled()) {
            cache = CacheService.getCache(schemas.files, schemas.files.stores.fileQueries);
        }
        for (const fileQuery of fileQueries) {
            if (getIsFilesCacheEnabled()) {
                cachedFile = yield cache.getValue(fileQuery); // todo
            }
            if (getIsFilesCacheEnabled() && cachedFile && getFileInvalidationTime() > Date.now() - cachedFile.timeCached) {
                files.push(JSON.parse(cachedFile.file));
            }
            else if (fileQuery !== '') {
                batch.get(fileQuery, fileQuery, scopes);
            }
        }
        try {
            const responses = yield batch.executeAll();
            for (const fileQuery of fileQueries) {
                const response = responses.get(fileQuery);
                if (response && response.content) {
                    files.push(response.content);
                    if (getIsFilesCacheEnabled()) {
                        cache.putValue(fileQuery, { file: JSON.stringify(response.content) });
                    }
                }
            }
            return files;
        }
        catch (_) {
            try {
                return Promise.all(fileQueries
                    .filter(fileQuery => fileQuery && fileQuery !== '')
                    .map((fileQuery) => __awaiter(this, void 0, void 0, function* () {
                    const file = yield getDriveItemByQuery(graph, fileQuery);
                    if (file) {
                        if (getIsFilesCacheEnabled()) {
                            cache.putValue(fileQuery, { file: JSON.stringify(file) });
                        }
                        return file;
                    }
                })));
            }
            catch (_) {
                return [];
            }
        }
    });
}
function getDriveItemsByInsights(graph, insightResponse, scopes) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!insightResponse) {
            return [];
        }
        const insightItems = insightResponse.value;
        const batch = graph.createBatch();
        const driveItems = [];
        for (const item of insightItems) {
            const driveItemId = item.resourceReference.id;
            if (driveItemId !== '') {
                batch.get(driveItemId, driveItemId, scopes);
            }
        }
        try {
            const driveItemResponses = yield batch.executeAll();
            for (const item of insightItems) {
                const driveItemResponse = driveItemResponses.get(item.resourceReference.id);
                if (driveItemResponse && driveItemResponse.content) {
                    driveItems.push(driveItemResponse.content);
                }
            }
            return driveItems;
        }
        catch (_) {
            try {
                return Promise.all(insightItems
                    .filter(insightItem => insightItem.resourceReference.id && insightItem.resourceReference.id !== '')
                    .map((insightItem) => __awaiter(this, void 0, void 0, function* () {
                    const driveItemResponses = yield graph
                        .api(insightItem.resourceReference.id)
                        .middlewareOptions(prepScopes(...scopes))
                        .get();
                    if (driveItemResponses && driveItemResponses.length) {
                        return driveItemResponses[0].content;
                    }
                })));
            }
            catch (_) {
                return [];
            }
        }
    });
}
function getFilesPageIteratorFromRequest(graph, request) {
    return __awaiter(this, void 0, void 0, function* () {
        return GraphPageIterator.create(graph, request);
    });
}
function getFilesPageIteratorFromCache(graph, value, nextLink) {
    return __awaiter(this, void 0, void 0, function* () {
        return GraphPageIterator.createFromValue(graph, value, nextLink);
    });
}
function getFileFromCache(cache, key) {
    return __awaiter(this, void 0, void 0, function* () {
        if (getIsFilesCacheEnabled()) {
            const file = yield cache.getValue(key);
            if (file && getFileInvalidationTime() > Date.now() - file.timeCached) {
                const cachedFile = JSON.parse(file.file);
                return cachedFile;
            }
        }
        return null;
    });
}
export function getFileListFromCache(cache, store, key) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!cache) {
            cache = CacheService.getCache(schemas.fileLists, store);
        }
        if (getIsFileListsCacheEnabled()) {
            const fileList = yield cache.getValue(key);
            if (fileList && getFileListInvalidationTime() > Date.now() - fileList.timeCached) {
                return fileList;
            }
        }
        return null;
    });
}
// refresh filesPageIterator to its next iteration and save current page to cache
export function fetchNextAndCacheForFilesPageIterator(filesPageIterator) {
    return __awaiter(this, void 0, void 0, function* () {
        const nextLink = filesPageIterator._nextLink;
        if (filesPageIterator.hasNext) {
            yield filesPageIterator.next();
        }
        if (getIsFileListsCacheEnabled()) {
            let cache;
            cache = CacheService.getCache(schemas.fileLists, schemas.fileLists.stores.fileLists);
            // match only the endpoint (after version number and before OData query params) e.g. /me/drive/root/children
            const reg = /(graph.microsoft.com\/(v1.0|beta))(.*?)(?=\?)/gi;
            const matches = reg.exec(nextLink);
            const key = matches[3];
            cache.putValue(key, { files: filesPageIterator.value, nextLink: filesPageIterator._nextLink });
        }
    });
}
/**
 * retrieves the specified document thumbnail
 *
 * @param {string} resource
 * @param {string[]} scopes
 * @returns {Promise<string>}
 */
export function getDocumentThumbnail(graph, resource, scopes) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = (yield graph
                .api(resource)
                .responseType(ResponseType.RAW)
                .middlewareOptions(prepScopes(...scopes))
                .get());
            if (response.status === 404) {
                // 404 means the resource does not have a thumbnail
                // we still want to cache that state
                // so we return an object that can be cached
                return { eTag: null, thumbnail: null };
            }
            else if (!response.ok) {
                return null;
            }
            const eTag = response.headers.get('eTag');
            const blob = yield blobToBase64(yield response.blob());
            return { eTag, thumbnail: blob };
        }
        catch (e) {
            return null;
        }
    });
}
/**
 * retrieve file properties based on Graph query
 *
 * @param graph
 * @param resource
 * @returns
 */
export function getGraphfile(graph, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // get from graph request
            const scopes = 'files.read';
            let response;
            try {
                response = yield graph
                    .api(resource)
                    .middlewareOptions(prepScopes(scopes))
                    .get()
                    .catch(error => {
                    return null;
                });
            }
            catch (_a) { }
            return response || null;
        }
        catch (e) {
            return null;
        }
    });
}
/**
 * retrieve UploadSession Url for large file and send by chuncks
 *
 * @param graph
 * @param resource
 * @returns
 */
export function getUploadSession(graph, resource, conflictBehavior) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // get from graph request
            const scopes = 'files.readwrite';
            const sessionOptions = {
                item: {
                    '@microsoft.graph.conflictBehavior': conflictBehavior === 0 || conflictBehavior === null ? 'rename' : 'replace'
                }
            };
            let response;
            try {
                response = yield graph.api(resource).middlewareOptions(prepScopes(scopes)).post(JSON.stringify(sessionOptions));
            }
            catch (_a) { }
            return response || null;
        }
        catch (e) {
            return null;
        }
    });
}
/**
 * send file chunck to OneDrive, SharePoint Site
 *
 * @param graph
 * @param resource
 * @param file
 * @returns
 */
export function sendFileChunck(graph, resource, contentLength, contentRange, file) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // get from graph request
            const scopes = 'files.readwrite';
            const header = {
                'Content-Length': contentLength,
                'Content-Range': contentRange
            };
            let response;
            try {
                response = yield graph.client.api(resource).middlewareOptions(prepScopes(scopes)).headers(header).put(file);
            }
            catch (_a) { }
            return response || null;
        }
        catch (e) {
            return null;
        }
    });
}
/**
 * send file to OneDrive, SharePoint Site
 *
 * @param graph
 * @param resource
 * @param file
 * @returns
 */
export function sendFileContent(graph, resource, file) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // get from graph request
            const scopes = 'files.readwrite';
            let response;
            try {
                response = yield graph.client.api(resource).middlewareOptions(prepScopes(scopes)).put(file);
            }
            catch (_a) { }
            return response || null;
        }
        catch (e) {
            return null;
        }
    });
}
/**
 * delete upload session
 *
 * @param graph
 * @param resource
 * @returns
 */
export function deleteSessionFile(graph, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // get from graph request
            const scopes = 'files.readwrite';
            let response;
            try {
                response = yield graph.client
                    .api(resource)
                    .middlewareOptions(prepScopes(scopes))
                    .delete(response => {
                    return response;
                });
            }
            catch (_a) { }
            return response || null;
        }
        catch (e) {
            return null;
        }
    });
}
//# sourceMappingURL=graph.files.js.map