{"version":3,"file":"graph.people.js","sourceRoot":"src/","sources":["graph/graph.people.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes, CacheItem, CacheService, CacheStore } from '@microsoft/mgt-element';\nimport { Contact, Person, User } from '@microsoft/microsoft-graph-types';\nimport { extractEmailAddress } from '../utils/Utils';\nimport { schemas } from './cacheStores';\nimport { getUsersForUserIds } from './graph.user';\nimport { IDynamicPerson } from './types';\n\n/**\n * Person Type enum\n *\n * @export\n * @enum {number}\n */\nexport enum PersonType {\n  /**\n   * Any type\n   */\n  any = 0,\n\n  /**\n   * A Person such as User or Contact\n   */\n  person = 'person',\n\n  /**\n   * A group\n   */\n  group = 'group'\n}\n\n/**\n * User Type enum\n *\n * @export\n * @enum {number}\n */\nexport enum UserType {\n  /**\n   * Any user or contact\n   */\n  any = 'any',\n\n  /**\n   * An organization User\n   */\n  user = 'user',\n\n  /**\n   * An implicit or personal contact\n   */\n  contact = 'contact'\n}\n\n/**\n * Object to be stored in cache representing individual people\n */\ninterface CachePerson extends CacheItem {\n  /**\n   * json representing a person stored as string\n   */\n  person?: string;\n}\n\n/**\n * Stores results of queries (multiple people returned)\n */\ninterface CachePeopleQuery extends CacheItem {\n  /**\n   * max number of results the query asks for\n   */\n  maxResults?: number;\n  /**\n   * list of people returned by query (might be less than max results!)\n   */\n  results?: string[];\n}\n\n/**\n * Defines the expiration time\n */\nconst getPeopleInvalidationTime = (): number =>\n  CacheService.config.people.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether the people store is enabled\n */\nconst getIsPeopleCacheEnabled = (): boolean => CacheService.config.people.isEnabled && CacheService.config.isEnabled;\n\n/**\n * async promise, returns all Graph people who are most relevant contacts to the signed in user.\n *\n * @param {string} query\n * @param {number} [top=10] - number of people to return\n * @param {PersonType} [personType=PersonType.person] - the type of person to search for\n * @returns {(Promise<Person[]>)}\n */\nexport async function findPeople(\n  graph: IGraph,\n  query: string,\n  top: number = 10,\n  userType: UserType = UserType.any,\n  filters: string = ''\n): Promise<Person[]> {\n  const scopes = 'people.read';\n\n  let cache: CacheStore<CachePeopleQuery>;\n  const cacheKey = `${query}:${top}:${userType}`;\n\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePeopleQuery>(schemas.people, schemas.people.stores.peopleQuery);\n    const result: CachePeopleQuery = getIsPeopleCacheEnabled() ? await cache.getValue(cacheKey) : null;\n    if (result && getPeopleInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(peopleStr => JSON.parse(peopleStr));\n    }\n  }\n\n  let filter = \"personType/class eq 'Person'\";\n\n  if (userType !== UserType.any) {\n    if (userType === UserType.user) {\n      filter += \"and personType/subclass eq 'OrganizationUser'\";\n    } else {\n      filter += \"and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')\";\n    }\n  }\n\n  if (filters !== '') {\n    // Adding the default people filters to the search filters\n    filter += `${filter} and ${filters}`;\n  }\n\n  let graphResult;\n  try {\n    let graphRequest = graph\n      .api('/me/people')\n      .search('\"' + query + '\"')\n      .top(top)\n      .filter(filter)\n      .middlewareOptions(prepScopes(scopes));\n\n    if (userType !== UserType.contact) {\n      // for any type other than Contact, user a wider search\n      graphRequest = graphRequest.header('X-PeopleQuery-QuerySources', 'Mailbox,Directory');\n    }\n\n    graphResult = await graphRequest.get();\n\n    if (getIsPeopleCacheEnabled() && graphResult) {\n      const item = { maxResults: top, results: null };\n      item.results = graphResult.value.map(personStr => JSON.stringify(personStr));\n      cache.putValue(cacheKey, item);\n    }\n  } catch (error) {\n    // intentionally empty\n  }\n  return graphResult ? graphResult.value : null;\n}\n\n/**\n * async promise to the Graph for People, by default, it will request the most frequent contacts for the signed in user.\n *\n * @returns {(Promise<Person[]>)}\n * @memberof Graph\n */\nexport async function getPeople(\n  graph: IGraph,\n  userType: UserType = UserType.any,\n  peopleFilters: string = ''\n): Promise<Person[]> {\n  const scopes = 'people.read';\n\n  let cache: CacheStore<CachePeopleQuery>;\n  const cacheKey = peopleFilters ? peopleFilters : `*:${userType}`;\n\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePeopleQuery>(schemas.people, schemas.people.stores.peopleQuery);\n    const cacheRes = await cache.getValue(cacheKey);\n\n    if (cacheRes && getPeopleInvalidationTime() > Date.now() - cacheRes.timeCached) {\n      return cacheRes.results.map(ppl => JSON.parse(ppl));\n    }\n  }\n\n  const uri = '/me/people';\n  let filter = \"personType/class eq 'Person'\";\n  if (userType !== UserType.any) {\n    if (userType === UserType.user) {\n      filter += \"and personType/subclass eq 'OrganizationUser'\";\n    } else {\n      filter += \"and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')\";\n    }\n  }\n\n  if (peopleFilters) {\n    filter += ` and ${peopleFilters}`;\n  }\n\n  let people;\n  try {\n    let graphRequest = graph.api(uri).middlewareOptions(prepScopes(scopes)).filter(filter);\n\n    if (userType != UserType.contact) {\n      // for any type other than Contact, user a wider search\n      graphRequest = graphRequest.header('X-PeopleQuery-QuerySources', 'Mailbox,Directory');\n    }\n\n    people = await graphRequest.get();\n    if (getIsPeopleCacheEnabled() && people) {\n      cache.putValue(cacheKey, { maxResults: 10, results: people.value.map(ppl => JSON.stringify(ppl)) });\n    }\n  } catch (_) {}\n  return people ? people.value : null;\n}\n\n/**\n * returns a promise that resolves after specified time\n * @param time in milliseconds\n */\nexport function getEmailFromGraphEntity(entity: IDynamicPerson): string {\n  const person = entity as Person;\n  const user = entity as User;\n  const contact = entity as Contact;\n\n  if (user.mail) {\n    return extractEmailAddress(user.mail);\n  } else if (person.scoredEmailAddresses && person.scoredEmailAddresses.length) {\n    return extractEmailAddress(person.scoredEmailAddresses[0].address);\n  } else if (contact.emailAddresses && contact.emailAddresses.length) {\n    return extractEmailAddress(contact.emailAddresses[0].address);\n  }\n  return null;\n}\n\n/**\n * async promise, returns a Graph contact associated with the email provided\n *\n * @param {string} email\n * @returns {(Promise<Contact[]>)}\n * @memberof Graph\n */\nexport async function findContactsByEmail(graph: IGraph, email: string): Promise<Contact[]> {\n  const scopes = 'contacts.read';\n  let cache: CacheStore<CachePerson>;\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePerson>(schemas.people, schemas.people.stores.contacts);\n    const contact = await cache.getValue(email);\n\n    if (contact && getPeopleInvalidationTime() > Date.now() - contact.timeCached) {\n      return JSON.parse(contact.person);\n    }\n  }\n\n  const encodedEmail = `${email.replace(/#/g, '%2523')}`;\n\n  const result = await graph\n    .api('/me/contacts')\n    .filter(`emailAddresses/any(a:a/address eq '${encodedEmail}')`)\n    .middlewareOptions(prepScopes(scopes))\n    .get();\n\n  if (getIsPeopleCacheEnabled() && result) {\n    cache.putValue(email, { person: JSON.stringify(result.value) });\n  }\n\n  return result ? result.value : null;\n}\n\n/**\n * async promise, returns Graph people matching the Graph query specified\n * in the resource param\n *\n * @param {string} resource\n * @returns {(Promise<Person[]>)}\n * @memberof Graph\n */\nexport async function getPeopleFromResource(\n  graph: IGraph,\n  version: string,\n  resource: string,\n  scopes: string[]\n): Promise<Person[]> {\n  let cache: CacheStore<CachePeopleQuery>;\n  const key = `${version}${resource}`;\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePeopleQuery>(schemas.people, schemas.people.stores.peopleQuery);\n    const result: CachePeopleQuery = await cache.getValue(key);\n    if (result && getPeopleInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(peopleStr => JSON.parse(peopleStr));\n    }\n  }\n\n  let request = graph.api(resource).version(version);\n\n  if (scopes && scopes.length) {\n    request = request.middlewareOptions(prepScopes(...scopes));\n  }\n\n  let response = await request.get();\n  // get more pages if there are available\n  if (response && Array.isArray(response.value) && response['@odata.nextLink']) {\n    let pageCount = 1;\n    let page = response;\n\n    while (page && page['@odata.nextLink']) {\n      pageCount++;\n      const nextResource = page['@odata.nextLink'].split(version)[1];\n      page = await graph.client.api(nextResource).version(version).get();\n      if (page && page.value && page.value.length) {\n        page.value = response.value.concat(page.value);\n        response = page;\n      }\n    }\n  }\n\n  if (getIsPeopleCacheEnabled() && response) {\n    const item = { results: null };\n    if (Array.isArray(response.value)) {\n      item.results = response.value.map(personStr => JSON.stringify(personStr));\n    } else {\n      item.results = [JSON.stringify(response)];\n    }\n    cache.putValue(key, item);\n  }\n\n  if (response) {\n    return Array.isArray(response.value) ? response.value : [response];\n  } else {\n    return null;\n  }\n}\n"]}