{"version":3,"file":"graph.photos.js","sourceRoot":"src/","sources":["graph/graph.photos.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes, CacheItem, CacheService, CacheStore } from '@microsoft/mgt-element';\nimport { ResponseType } from '@microsoft/microsoft-graph-client';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\nimport { blobToBase64 } from '../utils/Utils';\nimport { schemas } from './cacheStores';\nimport { findContactsByEmail, getEmailFromGraphEntity } from './graph.people';\nimport { findUsers } from './graph.user';\nimport { IDynamicPerson } from './types';\n\n/**\n * photo object stored in cache\n */\nexport interface CachePhoto extends CacheItem {\n  /**\n   * user tag associated with photo\n   */\n  eTag?: string;\n  /**\n   * user/contact photo\n   */\n  photo?: string;\n}\n\n/**\n * Defines expiration time\n */\nexport const getPhotoInvalidationTime = () =>\n  CacheService.config.photos.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether photo store is enabled\n */\nexport const getIsPhotosCacheEnabled = () => CacheService.config.photos.isEnabled && CacheService.config.isEnabled;\n\n/**\n * retrieves a photo for the specified resource.\n *\n * @param {string} resource\n * @param {string[]} scopes\n * @returns {Promise<string>}\n */\nexport async function getPhotoForResource(graph: IGraph, resource: string, scopes: string[]): Promise<CachePhoto> {\n  try {\n    const response = (await graph\n      .api(`${resource}/photo/$value`)\n      .responseType(ResponseType.RAW)\n      .middlewareOptions(prepScopes(...scopes))\n      .get()) as Response;\n\n    if (response.status === 404) {\n      // 404 means the resource does not have a photo\n      // we still want to cache that state\n      // so we return an object that can be cached\n      return { eTag: null, photo: null };\n    } else if (!response.ok) {\n      return null;\n    }\n\n    const eTag = response.headers.get('eTag');\n    const blob = await blobToBase64(await response.blob());\n    return { eTag, photo: blob };\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * async promise, returns Graph photos associated with contacts of the logged in user\n * @param contactId\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport async function getContactPhoto(graph: IGraph, contactId: string): Promise<string> {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.contacts);\n    photoDetails = await cache.getValue(contactId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    }\n  }\n\n  photoDetails = await getPhotoForResource(graph, `me/contacts/${contactId}`, ['contacts.read']);\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    cache.putValue(contactId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n}\n\n/**\n * async promise, returns Graph photo associated with provided userId\n * @param userId\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport async function getUserPhoto(graph: IGraph, userId: string): Promise<string> {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.users);\n    photoDetails = await cache.getValue(userId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    } else if (photoDetails) {\n      // there is a photo in the cache, but it's stale\n      try {\n        const response = await graph.api(`users/${userId}/photo`).get();\n        if (\n          response &&\n          (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n            (response['@odata.mediaEtag'] === null && response.eTag === null))\n        ) {\n          // set photoDetails to null so that photo gets pulled from the graph later\n          photoDetails = null;\n        }\n      } catch {\n        return null;\n      }\n    }\n  }\n\n  // if there is a photo in the cache, we got here because it was stale\n  photoDetails = photoDetails || (await getPhotoForResource(graph, `users/${userId}`, ['user.readbasic.all']));\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    cache.putValue(userId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n}\n\n/**\n * async promise, returns Graph photo associated with the logged in user\n * @returns {Promise<string>}\n * @memberof Graph\n */\nexport async function myPhoto(graph: IGraph): Promise<string> {\n  let cache: CacheStore<CachePhoto>;\n  let photoDetails: CachePhoto;\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.users);\n    photoDetails = await cache.getValue('me');\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    }\n  }\n\n  try {\n    const response = await graph.api('me/photo').get();\n    if (\n      response &&\n      (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n        (response['@odata.mediaEtag'] === null && response.eTag === null))\n    ) {\n      photoDetails = null;\n    }\n  } catch {\n    return null;\n  }\n\n  photoDetails = photoDetails || (await getPhotoForResource(graph, 'me', ['user.read']));\n  if (getIsPhotosCacheEnabled()) {\n    cache.putValue('me', photoDetails || {});\n  }\n\n  return photoDetails ? photoDetails.photo : null;\n}\n\n/**\n * async promise, loads image of user\n *\n * @export\n */\nexport async function getPersonImage(graph: IGraph, person: IDynamicPerson, useContactsApis: boolean = true) {\n  // handle if person but not user\n  if ('personType' in person && (person as any).personType.subclass !== 'OrganizationUser') {\n    if ((person as any).personType.subclass === 'PersonalContact' && useContactsApis) {\n      // if person is a contact, look for them and their photo in contact api\n      const email = getEmailFromGraphEntity(person);\n      const contact = await findContactsByEmail(graph, email);\n      if (contact && contact.length && contact[0].id) {\n        return await getContactPhoto(graph, contact[0].id);\n      }\n    }\n\n    return null;\n  }\n\n  // handle if user\n  if ((person as MicrosoftGraph.Person).userPrincipalName || person.id) {\n    // try to find a user by userPrincipalName\n    const id = (person as MicrosoftGraph.Person).userPrincipalName || person.id;\n    return await getUserPhoto(graph, id);\n  }\n\n  // else assume id is for user and try to get photo\n  if (person.id) {\n    const image = await getUserPhoto(graph, person.id);\n    if (image) {\n      return image;\n    }\n  }\n\n  // let's try to find a person by the email\n  const email = getEmailFromGraphEntity(person);\n\n  if (email) {\n    // try to find user\n    const users = await findUsers(graph, email, 1);\n    if (users && users.length) {\n      return await getUserPhoto(graph, users[0].id);\n    }\n\n    // if no user, try to find a contact\n    if (useContactsApis) {\n      const contacts = await findContactsByEmail(graph, email);\n      if (contacts && contacts.length) {\n        return await getContactPhoto(graph, contacts[0].id);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getGroupImage(graph: IGraph, group: any, useContactsApis: boolean = true) {\n  let photoDetails: CachePhoto;\n  let cache: CacheStore<CachePhoto>;\n\n  let groupId = group.id;\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.groups);\n    photoDetails = await cache.getValue(groupId);\n    if (photoDetails && getPhotoInvalidationTime() > Date.now() - photoDetails.timeCached) {\n      return photoDetails.photo;\n    } else if (photoDetails) {\n      // there is a photo in the cache, but it's stale\n      try {\n        const response = await graph.api(`groups/${groupId}/photo`).get();\n        if (\n          response &&\n          (response['@odata.mediaEtag'] !== photoDetails.eTag ||\n            (response['@odata.mediaEtag'] === null && response.eTag === null))\n        ) {\n          // set photoDetails to null so that photo gets pulled from the graph later\n          photoDetails = null;\n        }\n      } catch {\n        return null;\n      }\n    }\n  }\n\n  // if there is a photo in the cache, we got here because it was stale\n  photoDetails = photoDetails || (await getPhotoForResource(graph, `groups/${groupId}`, ['user.readbasic.all']));\n  if (getIsPhotosCacheEnabled() && photoDetails) {\n    cache.putValue(groupId, photoDetails);\n  }\n  return photoDetails ? photoDetails.photo : null;\n}\n\n/**\n * checks if user has a photo in the cache\n * @param userId\n * @returns {CachePhoto}\n * @memberof Graph\n */\nexport async function getPhotoFromCache(userId: string, storeName: string): Promise<CachePhoto> {\n  const cache = CacheService.getCache<CachePhoto>(schemas.photos, storeName);\n  const item = await cache.getValue(userId);\n  return item;\n}\n\n/**\n * checks if user has a photo in the cache\n * @param userId\n * @returns {void}\n * @memberof Graph\n */\nexport async function storePhotoInCache(userId: string, storeName: string, value: CachePhoto): Promise<void> {\n  const cache = CacheService.getCache<CachePhoto>(schemas.photos, storeName);\n  cache.putValue(userId, value);\n}\n"]}