{"version":3,"file":"BasePersonCardSection.js","sourceRoot":"src/","sources":["components/mgt-person-card/sections/BasePersonCardSection.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAC/D,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAK7D,OAAO,8CAA8C,CAAC;AAEtD;;;;;;GAMG;AACH,MAAM,OAAgB,qBAAsB,SAAQ,qBAAqB;IACvE;;;;;OAKG;IACH,IAIW,aAAa;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IACD,IAAW,aAAa,CAAC,KAAqB;QAC5C,IAAI,IAAI,CAAC,cAAc,KAAK,KAAK,EAAE;YACjC,OAAO;SACR;QAED,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAWD;;;;;;OAMG;IACH,IAAc,SAAS;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAKD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAYD;;;;;OAKG;IACI,aAAa;QAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,UAAU;QACf,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACO,MAAM;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IAC3E,CAAC;IAED;;;;;;OAMG;IACO,aAAa;QACrB,OAAO,IAAI,CAAA;;;;KAIV,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACO,YAAY;QACpB,OAAO,IAAI,CAAA;;KAEV,CAAC;IACJ,CAAC;IAsBD;;;;;OAKG;IACO,YAAY,CAAC,MAAsB;QAC3C,8DAA8D;QAC9D,IAAI,MAAM,GAAQ,IAAI,CAAC,UAAU,CAAC;QAClC,OAAO,MAAM,EAAE;YACb,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC;YAE3B,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,iBAAiB,EAAE;gBACtE,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;gBACrB,MAAM;aACP;SACF;QAED,MAAM,UAAU,GAAG,MAAuB,CAAC;QAC3C,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;CACF;AAzKC;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,gBAAgB;QAC3B,IAAI,EAAE,MAAM;KACb,CAAC;;;0DAGD","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { MgtTemplatedComponent } from '@microsoft/mgt-element';\nimport { html, property, TemplateResult } from 'lit-element';\n\nimport { IDynamicPerson } from '../../../graph/types';\nimport { MgtPersonCard } from '../mgt-person-card';\n\nimport '../../sub-components/mgt-spinner/mgt-spinner';\n\n/**\n * A base class for building person card subsections.\n *\n * @export\n * @class BasePersonCardSection\n * @extends {MgtTemplatedComponent}\n */\nexport abstract class BasePersonCardSection extends MgtTemplatedComponent {\n  /**\n   * Set the person details to render\n   *\n   * @type {IDynamicPerson}\n   * @memberof BasePersonCardSection\n   */\n  @property({\n    attribute: 'person-details',\n    type: Object\n  })\n  public get personDetails(): IDynamicPerson {\n    return this._personDetails;\n  }\n  public set personDetails(value: IDynamicPerson) {\n    if (this._personDetails === value) {\n      return;\n    }\n\n    this._personDetails = value;\n    this.requestStateUpdate();\n  }\n\n  /**\n   * The name for display in the overview section.\n   *\n   * @abstract\n   * @type {string}\n   * @memberof BasePersonCardSection\n   */\n  public abstract get displayName(): string;\n\n  /**\n   * Determines the appropriate view state: full or compact\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof BasePersonCardSection\n   */\n  protected get isCompact(): boolean {\n    return this._isCompact;\n  }\n\n  private _isCompact: boolean;\n  private _personDetails: IDynamicPerson;\n\n  constructor() {\n    super();\n    this._isCompact = false;\n    this._personDetails = null;\n  }\n\n  /**\n   * Render the icon for display in the navigation ribbon.\n   *\n   * @protected\n   * @abstract\n   * @returns {TemplateResult}\n   * @memberof BasePersonCardSection\n   */\n  public abstract renderIcon(): TemplateResult;\n\n  /**\n   * Set the section to compact view mode\n   *\n   * @returns\n   * @memberof BasePersonCardSection\n   */\n  public asCompactView() {\n    this._isCompact = true;\n    this.requestUpdate();\n    return this;\n  }\n\n  /**\n   * Set the section to full view mode\n   *\n   * @returns\n   * @memberof BasePersonCardSection\n   */\n  public asFullView() {\n    this._isCompact = false;\n    this.requestUpdate();\n    return this;\n  }\n\n  /**\n   * Reset any state in the section\n   *\n   * @protected\n   * @abstract\n   * @memberof BasePersonCardSection\n   */\n  public clearState(): void {\n    this._isCompact = false;\n    this._personDetails = null;\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    return this.isCompact ? this.renderCompactView() : this.renderFullView();\n  }\n\n  /**\n   * Render a spinner while the component loads state\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof BasePersonCardSection\n   */\n  protected renderLoading(): TemplateResult {\n    return html`\n      <div class=\"loading\">\n        <mgt-spinner></mgt-spinner>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the section in a empty data state\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPersonCardContact\n   */\n  protected renderNoData(): TemplateResult {\n    return html`\n      <div class=\"no-data\">No data</div>\n    `;\n  }\n\n  /**\n   * Render the compact view\n   *\n   * @protected\n   * @abstract\n   * @returns {TemplateResult}\n   * @memberof BasePersonCardSection\n   */\n  protected abstract renderCompactView(): TemplateResult;\n\n  /**\n   * Render the full view\n   *\n   * @protected\n   * @abstract\n   * @returns {TemplateResult}\n   * @memberof BasePersonCardSection\n   */\n  protected abstract renderFullView(): TemplateResult;\n\n  /**\n   * Navigate the card to a different user.\n   *\n   * @protected\n   * @memberof BasePersonCardSection\n   */\n  protected navigateCard(person: IDynamicPerson): void {\n    // Search for card parent and update it's personDetails object\n    let parent: any = this.parentNode;\n    while (parent) {\n      parent = parent.parentNode;\n\n      if (parent && parent.host && parent.host.tagName === 'MGT-PERSON-CARD') {\n        parent = parent.host;\n        break;\n      }\n    }\n\n    const personCard = parent as MgtPersonCard;\n    personCard.navigate(person);\n  }\n}\n"]}