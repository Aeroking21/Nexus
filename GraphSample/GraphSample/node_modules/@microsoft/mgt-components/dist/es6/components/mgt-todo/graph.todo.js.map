{"version":3,"file":"graph.todo.js","sourceRoot":"src/","sources":["components/mgt-todo/graph.todo.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { DateTimeTimeZone, ItemBody, PatternedRecurrence } from '@microsoft/microsoft-graph-types';\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\n\n// tslint:disable\nexport interface LinkedResource {\n  id: string;\n  webUrl: string;\n  applicationName: string;\n  displayName: string;\n  externalId: string;\n}\n\nexport enum TaskStatus {\n  notStarted,\n  inProgress,\n  completed,\n  deferred,\n  waitingOnOthers\n}\n\nexport enum TaskImportance {\n  low,\n  normal,\n  high\n}\n\nexport enum WellknownListName {\n  none,\n  default,\n  flaggedEmails,\n  unknownFutureValue\n}\n\nexport interface TodoTask {\n  id: string;\n  title: string;\n  body: ItemBody;\n  importance: TaskImportance;\n  status: TaskStatus;\n  createdDateTime: Date;\n  completedDateTime: DateTimeTimeZone;\n  lastModifiedDate: Date;\n  bodyLastModifiedDateTime: Date;\n  dueDateTime: DateTimeTimeZone;\n  isReminderOn: boolean;\n  reminderDateTime: DateTimeTimeZone;\n  recurrence: PatternedRecurrence;\n  linkedResources: LinkedResource[];\n}\n\nexport interface TodoTaskList {\n  id: string;\n  displayName: string;\n  tasks: TodoTask[];\n  isOwner: boolean;\n  isShared: boolean;\n  wellknownName: WellknownListName;\n}\n// tslint:enable\n\n/**\n * Get all todo tasks for a specific task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTask[]>}\n */\nexport async function getTodoTasks(graph: IGraph, listId: string): Promise<TodoTask[]> {\n  const tasks = await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return tasks && tasks.value;\n}\n\n/**\n * Get a specific todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<TodoTask>}\n */\nexport async function getTodoTask(graph: IGraph, listId: string, taskId: string): Promise<TodoTask> {\n  const task = await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return task;\n}\n\n/**\n * get all todo task lists\n *\n * @export\n * @param {IGraph} graph\n * @returns {Promise<TodoTaskList[]>}\n */\nexport async function getTodoTaskLists(graph: IGraph): Promise<TodoTaskList[]> {\n  const taskLists = await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return taskLists && taskLists.value;\n}\n\n/**\n * Get a specific todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTaskList>}\n */\nexport async function getTodoTaskList(graph: IGraph, listId: string): Promise<TodoTaskList> {\n  const taskList = await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return taskList;\n}\n\n/**\n * Create a new todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData\n * @returns {Promise<TodoTask>}\n */\nexport async function createTodoTask(\n  graph: IGraph,\n  listId: string,\n  // tslint:disable-next-line: completed-docs\n  taskData: { title: string; dueDateTime?: { dateTime: string; timeZone: string } }\n): Promise<TodoTask> {\n  const task: TodoTask = await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(taskData);\n\n  return task;\n}\n\n/**\n * Create a new todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {{ displayName: string }} list\n * @returns {Promise<TodoTaskList>}\n */\n// tslint:disable-next-line: completed-docs\nexport async function createTodoTaskList(graph: IGraph, listData: { displayName: string }): Promise<TodoTaskList> {\n  const list: TodoTaskList = await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(listData);\n\n  return list;\n}\n\n/**\n * Delete a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<void>}\n */\nexport async function deleteTodoTask(graph: IGraph, listId: string, taskId: string): Promise<void> {\n  await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n}\n\n/**\n * Delete a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<void>}\n */\nexport async function deleteTodoTaskList(graph: IGraph, listId: string): Promise<void> {\n  await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n}\n\n/**\n * Update a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @param {TodoTask} taskData\n * @returns {Promise<TodoTask>}\n */\nexport async function updateTodoTask(\n  graph: IGraph,\n  listId: string,\n  taskId: string,\n  taskData: TodoTask\n): Promise<TodoTask> {\n  const task = await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskData);\n\n  return task;\n}\n\n/**\n * Update a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {TodoTaskList} taskListData\n * @returns {Promise<TodoTaskList>}\n */\nexport async function updateTodoTaskList(\n  graph: IGraph,\n  listId: string,\n  taskListData: TodoTaskList\n): Promise<TodoTaskList> {\n  const task = await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskListData);\n\n  return task;\n}\n"]}