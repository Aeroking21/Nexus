/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { arraysAreEqual, MgtTemplatedComponent, Providers, ProviderState } from '@microsoft/mgt-element';
import { customElement, html, internalProperty, property } from 'lit-element';
import { repeat } from 'lit-html/directives/repeat';
import { clearFilesCache, fetchNextAndCacheForFilesPageIterator, getDriveFilesByIdIterator, getDriveFilesByPathIterator, getFilesByIdIterator, getFilesByListQueryIterator, getFilesByPathIterator, getFilesByQueries, getFilesIterator, getGroupFilesByIdIterator, getGroupFilesByPathIterator, getMyInsightsFiles, getSiteFilesByIdIterator, getSiteFilesByPathIterator, getUserFilesByIdIterator, getUserFilesByPathIterator, getUserInsightsFiles } from '../../graph/graph.files';
import './mgt-file-upload/mgt-file-upload';
import { ViewType } from '../../graph/types';
import { styles } from './mgt-file-list-css';
import { strings } from './strings';
import { MgtFile } from '../mgt-file/mgt-file';
export { FluentDesignSystemProvider, FluentProgressRing } from '@fluentui/web-components';
export * from './mgt-file-upload/mgt-file-upload';
// import { fluentProgressRing } from '@fluentui/web-components';
// import { registerFluentComponents } from '../../utils/FluentComponents';
// registerFluentComponents(fluentProgressRing);
/**
 * The File List component displays a list of multiple folders and files by
 * using the file/folder name, an icon, and other properties specicified by the developer.
 * This component uses the mgt-file component.
 *
 * @export
 * @class MgtFileList
 * @extends {MgtTemplatedComponent}
 *
 * @fires itemClick - Fired when user click a file. Returns the file (DriveItem) details.
 * @cssprop --file-upload-border- {String} File upload border top style
 * @cssprop --file-upload-background-color - {Color} File upload background color with opacity style
 * @cssprop --file-upload-button-float - {string} Upload button float position
 * @cssprop --file-upload-button-background-color - {Color} Background color of upload button
 * @cssprop --file-upload-dialog-background-color - {Color} Background color of upload dialog
 * @cssprop --file-upload-dialog-content-background-color - {Color} Background color of dialog content
 * @cssprop --file-upload-dialog-content-color - {Color} Color of dialog content
 * @cssprop --file-upload-dialog-primarybutton-background-color - {Color} Background color of primary button
 * @cssprop --file-upload-dialog-primarybutton-color - {Color} Color text of primary button
 * @cssprop --file-upload-button-color - {Color} Text color of upload button
 * @cssprop --file-list-background-color - {Color} File list background color
 * @cssprop --file-list-box-shadow - {String} File list box shadow style
 * @cssprop --file-list-border - {String} File list border styles
 * @cssprop --file-list-padding -{String} File list padding
 * @cssprop --file-list-margin -{String} File list margin
 * @cssprop --file-item-background-color--hover - {Color} File item background hover color
 * @cssprop --file-item-border-top - {String} File item border top style
 * @cssprop --file-item-border-left - {String} File item border left style
 * @cssprop --file-item-border-right - {String} File item border right style
 * @cssprop --file-item-border-bottom - {String} File item border bottom style
 * @cssprop --file-item-background-color--active - {Color} File item background active color
 * @cssprop --file-item-border-radius - {String} File item border radius
 * @cssprop --file-item-margin - {String} File item margin
 * @cssprop --show-more-button-background-color - {Color} Show more button background color
 * @cssprop --show-more-button-background-color--hover - {Color} Show more button background hover color
 * @cssprop --show-more-button-font-size - {String} Show more button font size
 * @cssprop --show-more-button-padding - {String} Show more button padding
 * @cssprop --show-more-button-border-bottom-right-radius - {String} Show more button bottom right radius
 * @cssprop --show-more-button-border-bottom-left-radius - {String} Show more button bottom left radius
 * @cssprop --progress-ring-size -{String} Progress ring height and width
 */
let MgtFileList = class MgtFileList extends MgtTemplatedComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    /**
     * allows developer to provide query for a file list
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get fileListQuery() {
        return this._fileListQuery;
    }
    set fileListQuery(value) {
        if (value === this._fileListQuery) {
            return;
        }
        this._fileListQuery = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide an array of file queries
     *
     * @type {string[]}
     * @memberof MgtFileList
     */
    get fileQueries() {
        return this._fileQueries;
    }
    set fileQueries(value) {
        if (arraysAreEqual(this._fileQueries, value)) {
            return;
        }
        this._fileQueries = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide site id for a file
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get siteId() {
        return this._siteId;
    }
    set siteId(value) {
        if (value === this._siteId) {
            return;
        }
        this._siteId = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide drive id for a file
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get driveId() {
        return this._driveId;
    }
    set driveId(value) {
        if (value === this._driveId) {
            return;
        }
        this._driveId = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide group id for a file
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get groupId() {
        return this._groupId;
    }
    set groupId(value) {
        if (value === this._groupId) {
            return;
        }
        this._groupId = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide item id for a file
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get itemId() {
        return this._itemId;
    }
    set itemId(value) {
        if (value === this._itemId) {
            return;
        }
        this._itemId = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide item path for a file
     *
     * @type {string}
     * @memberof MgtFileList
     */
    get itemPath() {
        return this._itemPath;
    }
    set itemPath(value) {
        if (value === this._itemPath) {
            return;
        }
        this._itemPath = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide user id for a file
     *
     * @type {string}
     * @memberof MgtFile
     */
    get userId() {
        return this._userId;
    }
    set userId(value) {
        if (value === this._userId) {
            return;
        }
        this._userId = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide insight type for a file
     * can be trending, used, or shared
     *
     * @type {OfficeGraphInsightString}
     * @memberof MgtFileList
     */
    get insightType() {
        return this._insightType;
    }
    set insightType(value) {
        if (value === this._insightType) {
            return;
        }
        this._insightType = value;
        this.requestStateUpdate(true);
    }
    /**
     * allows developer to provide file type to filter the list
     * can be docx
     *
     * @type {string[]}
     * @memberof MgtFileList
     */
    get fileExtensions() {
        return this._fileExtensions;
    }
    set fileExtensions(value) {
        if (arraysAreEqual(this._fileExtensions, value)) {
            return;
        }
        this._fileExtensions = value;
        this.requestStateUpdate(true);
    }
    /**
     * A number value to indicate the number of more files to load when show more button is clicked
     * @type {number}
     * @memberof MgtFileList
     */
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        if (value === this._pageSize) {
            return;
        }
        this._pageSize = value;
        this.requestStateUpdate(true);
    }
    /**
     * A number value indication for file size upload (KB)
     * @type {number}
     * @memberof MgtFileList
     */
    get maxFileSize() {
        return this._maxFileSize;
    }
    set maxFileSize(value) {
        if (value === this._maxFileSize) {
            return;
        }
        this._maxFileSize = value;
        this.requestStateUpdate(true);
    }
    /**
     * A number value to indicate the max number allowed of files to upload.
     * @type {number}
     * @memberof MgtFileList
     */
    get maxUploadFile() {
        return this._maxUploadFile;
    }
    set maxUploadFile(value) {
        if (value === this._maxUploadFile) {
            return;
        }
        this._maxUploadFile = value;
        this.requestStateUpdate(true);
    }
    /**
     * A Array of file extensions to be excluded from file upload.
     *
     * @type {string[]}
     * @memberof MgtFileList
     */
    get excludedFileExtensions() {
        return this._excludedFileExtensions;
    }
    set excludedFileExtensions(value) {
        if (arraysAreEqual(this._excludedFileExtensions, value)) {
            return;
        }
        this._excludedFileExtensions = value;
        this.requestStateUpdate(true);
    }
    /**
     * Get the scopes required for file list
     *
     * @static
     * @return {*}  {string[]}
     * @memberof MgtFileList
     */
    static get requiredScopes() {
        return [...new Set([...MgtFile.requiredScopes])];
    }
    constructor() {
        super();
        // tracking user arrow key input of selection for accessibility purpose
        this._focusedItemIndex = -1;
        this.pageSize = 10;
        this.itemView = ViewType.twolines;
        this.maxUploadFile = 10;
        this.enableFileUpload = false;
        this._preloadedFiles = [];
    }
    /**
     * Override requestStateUpdate to include clearstate.
     *
     * @memberof MgtFileList
     */
    requestStateUpdate(force) {
        this.clearState();
        return super.requestStateUpdate(force);
    }
    /**
     * Reset state
     *
     * @memberof MgtFileList
     */
    clearState() {
        super.clearState();
        this.files = null;
    }
    render() {
        if (!this.files && this.isLoadingState) {
            return this.renderLoading();
        }
        if (!this.files || this.files.length === 0) {
            return this.renderNoData();
        }
        return this.renderTemplate('default', { files: this.files }) || this.renderFiles();
    }
    /**
     * Render the loading state
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderLoading() {
        return this.renderTemplate('loading', null) || html ``;
    }
    /**
     * Render the state when no data is available
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderNoData() {
        return (this.renderTemplate('no-data', null) ||
            (this.enableFileUpload === true && Providers.globalProvider !== undefined
                ? html `
      <fluent-design-system-provider use-defaults>
        <div id="file-list-wrapper" class="file-list-wrapper" dir=${this.direction}>
          ${this.renderFileUpload()}
        </div>
      </fluent-design-system-provider>
      `
                : html ``));
    }
    /**
     * Render the list of files.
     *
     * @protected
     * @param {*} files
     * @returns {TemplateResult}
     * @memberof mgtFileList
     */
    renderFiles() {
        return html `
    <fluent-design-system-provider use-defaults>
      <div id="file-list-wrapper" class="file-list-wrapper" dir=${this.direction}>
        ${this.enableFileUpload ? this.renderFileUpload() : null}
        <ul
          id="file-list"
          class="file-list"
          tabindex="0"
          @keydown="${this.onFileListKeyDown}"
          @keyup="${this.onFileListKeyUp}"
          @blur="${this.onFileListOut}"
        >
          ${repeat(this.files, f => f.id, f => html `
              <li class="file-item" @click=${e => this.handleItemSelect(f, e)}>
                ${this.renderFile(f)}
              </li>
            `)}
        </ul>
        ${!this.hideMoreFilesButton && this.pageIterator && (this.pageIterator.hasNext || this._preloadedFiles.length)
            ? this.renderMoreFileButton()
            : null}
      </div>
    </fluent-design-system-provider>
    `;
    }
    /**
     * Render an individual file.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof mgtFileList
     */
    renderFile(file) {
        const view = this.itemView;
        return (this.renderTemplate('file', { file }, file.id) ||
            html `
        <mgt-file .fileDetails=${file} .view=${view}></mgt-file>
      `);
    }
    /**
     * Render the button when clicked will show more files.
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtFileList
     */
    renderMoreFileButton() {
        if (this._isLoadingMore) {
            return html `
        <fluent-progress-ring role="progressbar" viewBox="0 0 8 8" class="progress-ring"></fluent-progress-ring>
      `;
        }
        else {
            return html `<a id="show-more" class="show-more" @click=${() => this.renderNextPage()} tabindex="0" @keydown=${this.onShowMoreKeyDown}><span>${this.strings.showMoreSubtitle}<span></a>`;
        }
    }
    /**
     * Render MgtFileUpload sub component
     *
     * @returns
     */
    renderFileUpload() {
        const fileUploadConfig = {
            graph: Providers.globalProvider.graph.forComponent(this),
            driveId: this.driveId,
            excludedFileExtensions: this.excludedFileExtensions,
            groupId: this.groupId,
            itemId: this.itemId,
            itemPath: this.itemPath,
            userId: this.userId,
            siteId: this.siteId,
            maxFileSize: this.maxFileSize,
            maxUploadFile: this.maxUploadFile
        };
        return html `
        <mgt-file-upload .fileUploadList=${fileUploadConfig} ></mgt-file-upload>
      `;
    }
    /**
     * Handle accessibility keyboard enter event on 'show more items' button
     *
     * @param event
     */
    onShowMoreKeyDown(event) {
        if (event && event.code === 'Enter') {
            event.preventDefault();
            this.renderNextPage();
        }
    }
    /**
     * Handle accessibility keyboard keyup events on file list
     *
     * @param event
     */
    onFileListKeyUp(event) {
        const fileList = this.renderRoot.querySelector('.file-list');
        const focusedItem = fileList.children[this._focusedItemIndex];
        if (event.code === 'Enter' || event.code === 'Space') {
            event.preventDefault();
            focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove('selected');
            focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.add('focused');
        }
    }
    /**
     * Handle accessibility keyboard keydown events (arrow up, arrow down, enter, tab) on file list
     *
     * @param event
     */
    onFileListKeyDown(event) {
        const fileList = this.renderRoot.querySelector('.file-list');
        let focusedItem;
        if (!fileList || !fileList.children.length) {
            return;
        }
        if (event.code === 'ArrowUp' || event.code === 'ArrowDown') {
            if (event.code === 'ArrowUp') {
                if (this._focusedItemIndex === -1) {
                    this._focusedItemIndex = fileList.children.length;
                }
                this._focusedItemIndex = (this._focusedItemIndex - 1 + fileList.children.length) % fileList.children.length;
            }
            if (event.code === 'ArrowDown') {
                this._focusedItemIndex = (this._focusedItemIndex + 1) % fileList.children.length;
            }
            focusedItem = fileList.children[this._focusedItemIndex];
            this.updateItemBackgroundColor(fileList, focusedItem, 'focused');
        }
        if (event.code === 'Enter' || event.code === 'Space') {
            focusedItem = fileList.children[this._focusedItemIndex];
            const file = focusedItem.children[0];
            event.preventDefault();
            this.fireCustomEvent('itemClick', file.fileDetails);
            this.updateItemBackgroundColor(fileList, focusedItem, 'selected');
        }
        if (event.code === 'Tab') {
            focusedItem = fileList.children[this._focusedItemIndex];
            focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove('focused');
        }
    }
    /**
     * Remove accessibility keyboard focused when out of file list
     *
     */
    onFileListOut() {
        const fileList = this.renderRoot.querySelector('.file-list');
        const focusedItem = fileList.children[this._focusedItemIndex];
        focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.classList.remove('focused');
    }
    /**
     * load state into the component.
     *
     * @protected
     * @returns
     * @memberof MgtFileList
     */
    loadState() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = Providers.globalProvider;
            if (!provider || provider.state === ProviderState.Loading) {
                return;
            }
            if (provider.state === ProviderState.SignedOut) {
                this.files = null;
                return;
            }
            const graph = provider.graph.forComponent(this);
            let files;
            let pageIterator;
            const getFromMyDrive = !this.driveId && !this.siteId && !this.groupId && !this.userId;
            // combinations of these attributes must be provided in order for the component to know which endpoint to call to request files
            // not supplying enough for these combinations will get a null file result
            if ((this.driveId && !this.itemId && !this.itemPath) ||
                (this.groupId && !this.itemId && !this.itemPath) ||
                (this.siteId && !this.itemId && !this.itemPath) ||
                (this.userId && !this.insightType && !this.itemId && !this.itemPath)) {
                this.files = null;
            }
            if (!this.files) {
                if (this.fileListQuery) {
                    pageIterator = yield getFilesByListQueryIterator(graph, this.fileListQuery, this.pageSize);
                }
                else if (this.fileQueries) {
                    files = yield getFilesByQueries(graph, this.fileQueries);
                }
                else if (getFromMyDrive) {
                    if (this.itemId) {
                        pageIterator = yield getFilesByIdIterator(graph, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getFilesByPathIterator(graph, this.itemPath, this.pageSize);
                    }
                    else if (this.insightType) {
                        files = yield getMyInsightsFiles(graph, this.insightType);
                    }
                    else {
                        pageIterator = yield getFilesIterator(graph, this.pageSize);
                    }
                }
                else if (this.driveId) {
                    if (this.itemId) {
                        pageIterator = yield getDriveFilesByIdIterator(graph, this.driveId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getDriveFilesByPathIterator(graph, this.driveId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.groupId) {
                    if (this.itemId) {
                        pageIterator = yield getGroupFilesByIdIterator(graph, this.groupId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getGroupFilesByPathIterator(graph, this.groupId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.siteId) {
                    if (this.itemId) {
                        pageIterator = yield getSiteFilesByIdIterator(graph, this.siteId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getSiteFilesByPathIterator(graph, this.siteId, this.itemPath, this.pageSize);
                    }
                }
                else if (this.userId) {
                    if (this.itemId) {
                        pageIterator = yield getUserFilesByIdIterator(graph, this.userId, this.itemId, this.pageSize);
                    }
                    else if (this.itemPath) {
                        pageIterator = yield getUserFilesByPathIterator(graph, this.userId, this.itemPath, this.pageSize);
                    }
                    else if (this.insightType) {
                        files = yield getUserInsightsFiles(graph, this.userId, this.insightType);
                    }
                }
                if (pageIterator) {
                    this.pageIterator = pageIterator;
                    this._preloadedFiles = [...this.pageIterator.value];
                    // handle when cached file length is greater than page size
                    if (this._preloadedFiles.length >= this.pageSize) {
                        files = this._preloadedFiles.splice(0, this.pageSize);
                    }
                    else {
                        files = this._preloadedFiles.splice(0, this._preloadedFiles.length);
                    }
                }
                // filter files when extensions are provided
                let filteredByFileExtension;
                if (this.fileExtensions && this.fileExtensions !== null) {
                    // retrive all pages before filtering
                    if (this.pageIterator && this.pageIterator.value) {
                        while (this.pageIterator.hasNext) {
                            yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
                        }
                        files = this.pageIterator.value;
                        this._preloadedFiles = [];
                    }
                    filteredByFileExtension = files.filter(file => {
                        for (const e of this.fileExtensions) {
                            if (e == this.getFileExtension(file.name)) {
                                return file;
                            }
                        }
                    });
                }
                if (filteredByFileExtension && filteredByFileExtension.length >= 0) {
                    this.files = filteredByFileExtension;
                    if (this.pageSize) {
                        files = this.files.splice(0, this.pageSize);
                        this.files = files;
                    }
                }
                else {
                    this.files = files;
                }
            }
        });
    }
    /**
     * Handle the click event on an item.
     *
     * @protected
     * @memberof MgtFileList
     */
    handleItemSelect(item, event) {
        this.fireCustomEvent('itemClick', item);
        // handle accessibility updates when item clicked
        if (event) {
            const fileList = this.renderRoot.querySelector('.file-list');
            // get index of the focused item
            const nodes = Array.from(fileList.children);
            const li = event.target.closest('li');
            const index = nodes.indexOf(li);
            this._focusedItemIndex = index;
            for (let i = 0; i < fileList.children.length; i++) {
                fileList.children[i].classList.remove('focused');
            }
        }
    }
    /**
     * Handle the click event on button to show next page.
     *
     * @protected
     * @memberof MgtFileList
     */
    renderNextPage() {
        return __awaiter(this, void 0, void 0, function* () {
            // render next page from cache if exists, or else use iterator
            if (this._preloadedFiles.length > 0) {
                this.files = [
                    ...this.files,
                    ...this._preloadedFiles.splice(0, Math.min(this.pageSize, this._preloadedFiles.length))
                ];
            }
            else {
                if (this.pageIterator.hasNext) {
                    this._isLoadingMore = true;
                    const root = this.renderRoot.querySelector('file-list-wrapper');
                    if (root && root.animate) {
                        // play back
                        root.animate([
                            {
                                height: 'auto',
                                transformOrigin: 'top left'
                            },
                            {
                                height: 'auto',
                                transformOrigin: 'top left'
                            }
                        ], {
                            duration: 1000,
                            easing: 'ease-in-out',
                            fill: 'both'
                        });
                    }
                    yield fetchNextAndCacheForFilesPageIterator(this.pageIterator);
                    this._isLoadingMore = false;
                    this.files = this.pageIterator.value;
                }
            }
            this.requestUpdate();
        });
    }
    /**
     * Get file extension string from file name
     *
     * @param name file name
     * @returns {string} file extension
     */
    getFileExtension(name) {
        const re = /(?:\.([^.]+))?$/;
        const fileExtension = re.exec(name)[1] || '';
        return fileExtension;
    }
    /**
     * Handle remove and add css class on accessibility keyboard select and focus
     *
     * @param fileList HTML element
     * @param focusedItem HTML element
     * @param className background class to be applied
     */
    updateItemBackgroundColor(fileList, focusedItem, className) {
        // reset background color
        for (let i = 0; i < fileList.children.length; i++) {
            fileList.children[i].classList.remove(className);
        }
        // set focused item background color
        if (focusedItem) {
            focusedItem.classList.add(className);
            focusedItem.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
        }
    }
    /**
     * Handle reload of File List and condition to clear cache
     *
     * @param clearCache boolean, if true clear cache
     */
    reload(clearCache = false) {
        if (clearCache) {
            // clear cache File List
            clearFilesCache();
        }
        this.requestStateUpdate(true);
    }
};
__decorate([
    property({
        attribute: 'file-list-query'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "fileListQuery", null);
__decorate([
    property({
        attribute: 'file-queries',
        converter: (value, type) => {
            if (value) {
                return value.split(',').map(v => v.trim());
            }
            else {
                return null;
            }
        }
    }),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], MgtFileList.prototype, "fileQueries", null);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Array)
], MgtFileList.prototype, "files", void 0);
__decorate([
    property({
        attribute: 'site-id'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "siteId", null);
__decorate([
    property({
        attribute: 'drive-id'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "driveId", null);
__decorate([
    property({
        attribute: 'group-id'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "groupId", null);
__decorate([
    property({
        attribute: 'item-id'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "itemId", null);
__decorate([
    property({
        attribute: 'item-path'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "itemPath", null);
__decorate([
    property({
        attribute: 'user-id'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "userId", null);
__decorate([
    property({
        attribute: 'insight-type'
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtFileList.prototype, "insightType", null);
__decorate([
    property({
        attribute: 'item-view',
        converter: value => {
            if (!value || value.length === 0) {
                return ViewType.threelines;
            }
            value = value.toLowerCase();
            if (typeof ViewType[value] === 'undefined') {
                return ViewType.threelines;
            }
            else {
                return ViewType[value];
            }
        }
    }),
    __metadata("design:type", Number)
], MgtFileList.prototype, "itemView", void 0);
__decorate([
    property({
        attribute: 'file-extensions',
        converter: (value, type) => {
            return value.split(',').map(v => v.trim());
        }
    }),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], MgtFileList.prototype, "fileExtensions", null);
__decorate([
    property({
        attribute: 'page-size',
        type: Number
    }),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MgtFileList.prototype, "pageSize", null);
__decorate([
    property({
        attribute: 'hide-more-files-button',
        type: Boolean
    }),
    __metadata("design:type", Boolean)
], MgtFileList.prototype, "hideMoreFilesButton", void 0);
__decorate([
    property({
        attribute: 'max-file-size',
        type: Number
    }),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MgtFileList.prototype, "maxFileSize", null);
__decorate([
    property({
        attribute: 'enable-file-upload',
        type: Boolean
    }),
    __metadata("design:type", Boolean)
], MgtFileList.prototype, "enableFileUpload", void 0);
__decorate([
    property({
        attribute: 'max-upload-file',
        type: Number
    }),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MgtFileList.prototype, "maxUploadFile", null);
__decorate([
    property({
        attribute: 'excluded-file-extensions',
        converter: (value, type) => {
            return value.split(',').map(v => v.trim());
        }
    }),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], MgtFileList.prototype, "excludedFileExtensions", null);
__decorate([
    internalProperty(),
    __metadata("design:type", Boolean)
], MgtFileList.prototype, "_isLoadingMore", void 0);
MgtFileList = __decorate([
    customElement('mgt-file-list'),
    __metadata("design:paramtypes", [])
], MgtFileList);
export { MgtFileList };
//# sourceMappingURL=mgt-file-list.js.map