{"version":3,"file":"mgt-todo.js","sourceRoot":"src/","sources":["components/mgt-todo/mgt-todo.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,aAAa,EAAE,IAAI,EAAkB,MAAM,aAAa,CAAC;AAClE,OAAO,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AACzD,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAEpD,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAClE,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,0BAA0B,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,kCAAkC,CAAC;AAChE,OAAO,uDAAuD,CAAC;AAC/D,OAAO,mDAAmD,CAAC;AAC3D,OAAO,EACL,cAAc,EACd,cAAc,EACd,eAAe,EACf,gBAAgB,EAChB,YAAY,EACZ,UAAU,EAGV,cAAc,EACf,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAQpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AAEI,IAAM,OAAO,GAAb,MAAM,OAAQ,SAAQ,YAAY;IACvC;;;OAGG;IACI,MAAM,KAAK,MAAM;QACtB,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,IAAc,OAAO;QACnB,OAAO,OAAO,CAAC;IACjB,CAAC;IAUD;;;;;;OAMG;IACI,MAAM,KAAK,cAAc;QAC9B,OAAO,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;IAC3C,CAAC;IAYD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACO,WAAW;QACnB,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;SACjC;QAED,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE;YAC5B,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;SACrD;QAED,MAAM,aAAa,GAAG,MAAM,CAC1B,KAAK,EACL,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EACf,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAC9B,CAAC;QACF,OAAO,IAAI,CAAA;QACP,aAAa;KAChB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACO,oBAAoB;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAC9B,IAAI,CAAC,EAAE,CACL,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACvD,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,CAC1D,CAAC;QAEF,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YAC5C,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SACnC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY;YAChC,CAAC,CAAC,IAAI,CAAA;;cAEE,IAAI,CAAC,gBAAgB,EAAE;oBACjB,IAAI,CAAC,YAAY,CAAC,WAAW;;SAExC;YACH,CAAC,CAAC,IAAI,CAAA;;cAEE,IAAI,CAAC,gBAAgB,EAAE;;wBAEb,IAAI,CAAC,cAAc;yBAClB,CAAC,CAAQ,EAAE,EAAE;gBACtB,IAAI,CAAC,cAAc,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;YAC7D,CAAC;;gBAEC,KAAK,CAAC,GAAG,CACT,IAAI,CAAC,EAAE,CAAC,IAAI,CAAA;mCACO,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW;iBAC9C,CACF;;;SAGN,CAAC;QAEN,MAAM,OAAO,GAAG,IAAI,CAAA;;UAEd,IAAI,CAAC,kBAAkB,EAAE;;;;;;oBAMf,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC;qBAC1C,CAAC,CAAQ,EAAE,EAAE;YACtB,MAAM,KAAK,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;YACnD,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC;aACnD;iBAAM;gBACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;aAC7B;QACH,CAAC;;;KAGN,CAAC;QAEF,OAAO,IAAI,CAAA;QACP,QAAQ,IAAI,OAAO;KACtB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACO,mBAAmB;QAC3B,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,OAAO,IAAI,CAAA;;OAEV,CAAC;SACH;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,UAA0B,CAAC;QAE/B,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;YAChD,IAAI,IAAI,EAAE;gBACR,UAAU,GAAG,IAAI,CAAA;;cAEX,IAAI,CAAC,WAAW;;SAErB,CAAC;aACH;SACF;aAAM,IAAI,WAAW,EAAE;YACtB,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;gBACrB,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;aACzD;YAED,UAAU,GAAG,IAAI,CAAA;qCACc,WAAW,CAAC,WAAW,eAAe,WAAW;OAC/E,CAAC;SACH;QAED,OAAO,IAAI,CAAA;;UAEL,UAAU;;KAEf,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACO,UAAU,CAAC,IAAc;QACjC,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;QAElD,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;SACtD;QAED,MAAM,WAAW,GAAI,UAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,SAAS,CAAC;QAC9E,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,MAAM,gBAAgB,GAAG;YACvB,QAAQ,EAAE,CAAC,SAAS,IAAI,WAAW;YACnC,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,IAAI;SACf,CAAC;QAEF,MAAM,gBAAgB,GAAG,SAAS;YAChC,CAAC,CAAC,IAAI,CAAA;;SAEH;YACH,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,IAAI,CAAA;;SAEH;gBACH,CAAC,CAAC,IAAI,CAAC;QAET,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAC/B,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE;YACpC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,OAAO,EAAE,gBAAgB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;SAC/F;aAAM;YACL,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW;gBACtC,CAAC,CAAC,IAAI,CAAA;;0BAEY,kBAAkB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;WAEtE;gBACH,CAAC,CAAC,IAAI,CAAC;YAET,mBAAmB,GAAG,IAAI,CAAA;;YAEpB,IAAI,CAAC,KAAK;;;YAGV,IAAI,CAAC,gBAAgB,EAAE;kBACjB,IAAI,CAAC,YAAY,CAAC,WAAW;;UAErC,eAAe;OAClB,CAAC;SACH;QAED,MAAM,mBAAmB,GACvB,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW;YACjC,CAAC,CAAC,IAAI,CAAA;;;4BAGc;gBACV,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC;aACpE;;;WAGN;YACH,CAAC,CAAC,IAAI,CAAC;QAEX,MAAM,WAAW,GAAG,QAAQ,CAAC;YAC3B,QAAQ,EAAE,WAAW;YACrB,UAAU,EAAE,CAAC,WAAW;YACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,MAAM,yBAAyB,GAAG,QAAQ,CAAC;YACzC,QAAQ,EAAE,WAAW;YACrB,UAAU,EAAE,CAAC,WAAW;YACxB,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAA;mBACI,WAAW;2CACa,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC;wBAC9D,yBAAyB,YAAY,CAAC,CAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC;0BACnF,QAAQ,CAAC,gBAAgB,CAAC;+CACL,gBAAgB;;;6CAGlB,IAAI,CAAC,UAAU;cAC9C,mBAAmB;;YAErB,mBAAmB;;;;KAI1B,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACa,SAAS;;YACvB,MAAM,QAAQ,GAAG,SAAS,CAAC,cAAc,CAAC;YAC1C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,KAAK,aAAa,CAAC,QAAQ,EAAE;gBAC1D,OAAO;aACR;YAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aACrB;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YACxB,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBAC3B,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACrE,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;iBACxC;qBAAM;oBACL,KAAK,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC7C;gBAED,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aACrB;YAED,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;YACpC,IAAI,CAAC,WAAW,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;gBACzC,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC;iBACxD;gBACD,IAAI,CAAC,WAAW,EAAE;oBAChB,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBACxB;gBAED,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACjB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;aACjC;YAED,IAAI,WAAW,EAAE;gBACf,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;aACtC;QACH,CAAC;KAAA;IAED;;;;;;OAMG;IACa,aAAa;;YAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACpC,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,IAAI,CAAC,WAAW;aACxB,CAAC;YAEF,IAAI,IAAI,CAAC,eAAe,EAAE;gBACxB,8CAA8C;gBAC9C,QAAQ,CAAC,aAAa,CAAC,GAAG;oBACxB,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;oBACnD,QAAQ,EAAE,KAAK;iBAChB,CAAC;aACH;YAED,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;KAAA;IAED;;;;;OAKG;IACO,gBAAgB;QACxB,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACO,UAAU;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAEa,YAAY,CAAC,IAAkB;;YAC3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,IAAI,CAAC,MAAM,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAEvD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;KAAA;IAEa,gBAAgB,CAAC,IAAc,EAAE,UAAsB;;YACnE,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,yBAAyB;YACzB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YAEzB,sBAAsB;YACtB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACpC,IAAI,GAAG,MAAM,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAEhE,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;YAC/D,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YAE9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;KAAA;IAED,2CAA2C;IAC7B,UAAU,CAAC,CAA0B,EAAE,MAAc;;YACjE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YACpC,MAAM,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAElD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;QACzD,CAAC;KAAA;IAEO,oBAAoB,CAAC,CAAQ,EAAE,IAAc;QACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAK,UAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,SAAS,EAAE;gBAC7D,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;aACpD;iBAAM;gBACL,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;aACnD;YAED,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;SACpB;IACH,CAAC;CACF,CAAA;AA7bY,OAAO;IADnB,aAAa,CAAC,UAAU,CAAC;;GACb,OAAO,CA6bnB;SA7bY,OAAO","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { customElement, html, TemplateResult } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { IGraph } from '@microsoft/mgt-element';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport { getShortDateString } from '../../utils/Utils';\nimport '../mgt-person/mgt-person';\nimport { MgtTasksBase } from '../mgt-tasks-base/mgt-tasks-base';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport '../sub-components/mgt-dot-options/mgt-dot-options';\nimport {\n  createTodoTask,\n  deleteTodoTask,\n  getTodoTaskList,\n  getTodoTaskLists,\n  getTodoTasks,\n  TaskStatus,\n  TodoTask,\n  TodoTaskList,\n  updateTodoTask\n} from './graph.todo';\nimport { styles } from './mgt-todo-css';\nimport { strings } from './strings';\n\n/*\n * Filter function\n */\n// tslint:disable-next-line: completed-docs\nexport type TodoFilter = (task: TodoTask) => boolean;\n\n/**\n * component enables the user to view, add, remove, complete, or edit todo tasks. It works with tasks in Microsoft Planner or Microsoft To-Do.\n *\n * @export\n * @class MgtTodo\n * @extends {MgtTasksBase}\n *\n * @cssprop --tasks-background-color - {Color} Task background color\n * @cssprop --tasks-header-padding - {String} Tasks header padding\n * @cssprop --tasks-title-padding - {String} Tasks title padding\n * @cssprop --tasks-plan-title-font-size - {Length} Tasks plan title font size\n * @cssprop --tasks-plan-title-padding - {String} Tasks plan title padding\n * @cssprop --tasks-new-button-width - {String} Tasks new button width\n * @cssprop --tasks-new-button-height - {String} Tasks new button height\n * @cssprop --tasks-new-button-color - {Color} Tasks new button color\n * @cssprop --tasks-new-button-background - {String} Tasks new button background\n * @cssprop --tasks-new-button-border - {String} Tasks new button border\n * @cssprop --tasks-new-button-hover-background - {Color} Tasks new button hover background\n * @cssprop --tasks-new-button-active-background - {Color} Tasks new button active background\n * @cssprop --task-margin - {String} Task margin\n * @cssprop --task-background - {Color} Task background\n * @cssprop --task-border - {String} Task border\n * @cssprop --task-header-color - {Color} Task header color\n * @cssprop --task-header-margin - {String} Task header margin\n * @cssprop --task-new-margin - {String} Task new margin\n * @cssprop --task-new-border - {String} Task new border\n * @cssprop --task-new-input-margin - {String} Task new input margin\n * @cssprop --task-new-input-padding - {String} Task new input padding\n * @cssprop --task-new-input-font-size - {Length} Task new input font size\n * @cssprop --task-new-select-border - {String} Task new select border\n * @cssprop --task-new-add-button-background - {Color} Task new add button background\n * @cssprop --task-new-add-button-disabled-background - {Color} Task new add button disabled background\n * @cssprop --task-new-cancel-button-color - {Color} Task new cancel button color\n * @cssprop --task-complete-background - {Color} Task complete background\n * @cssprop --task-complete-border - {String} Task complete border\n * @cssprop --task-icon-alignment - {String} Task icon alignment\n * @cssprop --task-icon-background - {Color} Task icon color\n * @cssprop --task-icon-background-completed - {Color} Task icon background color when completed\n * @cssprop --task-icon-border - {String} Task icon border styles\n * @cssprop --task-icon-border-completed - {String} Task icon border style when task is completed\n * @cssprop --task-icon-border-radius - {String} Task icon border radius\n * @cssprop --task-icon-color - {Color} Task icon color\n * @cssprop --task-icon-color-completed - {Color} Task icon color when completed\n */\n@customElement('mgt-todo')\nexport class MgtTodo extends MgtTasksBase {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Optional filter function when rendering tasks\n   *\n   * @type {TodoFilter}\n   * @memberof MgtTodo\n   */\n  public taskFilter: TodoFilter;\n\n  /**\n   * Get the scopes required for todo\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTodo\n   */\n  public static get requiredScopes(): string[] {\n    return ['tasks.read', 'tasks.readwrite'];\n  }\n\n  private _lists: TodoTaskList[];\n  private _tasks: TodoTask[];\n  private _currentList: TodoTaskList;\n\n  private _isLoadingTasks: boolean;\n  private _loadingTasks: string[];\n  private _newTaskDueDate: Date;\n  private _newTaskListId: string;\n  private _graph: IGraph;\n\n  constructor() {\n    super();\n    this._graph = null;\n    this._newTaskDueDate = null;\n    this._newTaskListId = '';\n    this._currentList = null;\n    this._lists = [];\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n  }\n\n  /**\n   * Render the list of todo tasks\n   */\n  protected renderTasks(): TemplateResult {\n    if (this._isLoadingTasks) {\n      return this.renderLoadingTask();\n    }\n\n    let tasks = this._tasks;\n    if (tasks && this.taskFilter) {\n      tasks = tasks.filter(task => this.taskFilter(task));\n    }\n\n    const taskTemplates = repeat(\n      tasks,\n      task => task.id,\n      task => this.renderTask(task)\n    );\n    return html`\n      ${taskTemplates}\n    `;\n  }\n\n  /**\n   * Render the details part of the new task panel\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderNewTaskDetails(): TemplateResult {\n    const lists = this._lists.filter(\n      list =>\n        (this._currentList && list.id === this._currentList.id) ||\n        (!this._currentList && list.id === this._newTaskListId)\n    );\n\n    if (lists.length > 0 && !this._newTaskListId) {\n      this._newTaskListId = lists[0].id;\n    }\n\n    const taskList = this._currentList\n      ? html`\n          <span class=\"NewTaskGroup\">\n            ${this.renderBucketIcon()}\n            <span>${this._currentList.displayName}</span>\n          </span>\n        `\n      : html`\n          <span class=\"NewTaskGroup\">\n            ${this.renderBucketIcon()}\n            <select\n              .value=\"${this._newTaskListId}\"\n              @change=\"${(e: Event) => {\n                this._newTaskListId = (e.target as HTMLInputElement).value;\n              }}\"\n            >\n              ${lists.map(\n                list => html`\n                  <option value=\"${list.id}\">${list.displayName}</option>\n                `\n              )}\n            </select>\n          </span>\n        `;\n\n    const taskDue = html`\n      <span class=\"NewTaskDue\">\n        ${this.renderCalendarIcon()}\n        <input\n          type=\"date\"\n          label=\"new-taskDate-input\"\n          aria-label=\"new-taskDate-input\"\n          role=\"textbox\"\n          .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n          @change=\"${(e: Event) => {\n            const value = (e.target as HTMLInputElement).value;\n            if (value) {\n              this._newTaskDueDate = new Date(value + 'T17:00');\n            } else {\n              this._newTaskDueDate = null;\n            }\n          }}\"\n        />\n      </span>\n    `;\n\n    return html`\n      ${taskList} ${taskDue}\n    `;\n  }\n\n  /**\n   * Render the header part of the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderHeaderContent(): TemplateResult {\n    if (this.isLoadingState) {\n      return html`\n        <div class=\"header__loading\"></div>\n      `;\n    }\n\n    const lists = this._lists || [];\n    const currentList = this._currentList;\n    const targetId = this.targetId;\n    let listSelect: TemplateResult;\n\n    if (targetId && lists.length) {\n      const list = lists.find(l => l.id === targetId);\n      if (list) {\n        listSelect = html`\n          <span class=\"PlanTitle\">\n            ${list.displayName}\n          </span>\n        `;\n      }\n    } else if (currentList) {\n      const listOptions = {};\n      for (const l of lists) {\n        listOptions[l.displayName] = () => this.loadTaskList(l);\n      }\n\n      listSelect = html`\n        <mgt-arrow-options .value=\"${currentList.displayName}\" .options=\"${listOptions}\"></mgt-arrow-options>\n      `;\n    }\n\n    return html`\n      <span class=\"TitleCont\">\n        ${listSelect}\n      </span>\n    `;\n  }\n\n  /**\n   * Render a task in the list.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderTask(task: TodoTask) {\n    const context = { task, list: this._currentList };\n\n    if (this.hasTemplate('task')) {\n      return this.renderTemplate('task', context, task.id);\n    }\n\n    const isCompleted = (TaskStatus as any)[task.status] === TaskStatus.completed;\n    const isLoading = this._loadingTasks.includes(task.id);\n    const taskCheckClasses = {\n      Complete: !isLoading && isCompleted,\n      Loading: isLoading,\n      TaskCheck: true,\n      TaskIcon: true\n    };\n\n    const taskCheckContent = isLoading\n      ? html`\n          \n        `\n      : isCompleted\n      ? html`\n          \n        `\n      : null;\n\n    let taskDetailsTemplate = null;\n    if (this.hasTemplate('task-details')) {\n      taskDetailsTemplate = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n    } else {\n      const taskDueTemplate = task.dueDateTime\n        ? html`\n            <div class=\"TaskDetail TaskDue\">\n              <span>Due ${getShortDateString(new Date(task.dueDateTime.dateTime))}</span>\n            </div>\n          `\n        : null;\n\n      taskDetailsTemplate = html`\n        <div class=\"TaskTitle\">\n          ${task.title}\n        </div>\n        <div class=\"TaskDetail TaskBucket\">\n          ${this.renderBucketIcon()}\n          <span>${this._currentList.displayName}</span>\n        </div>\n        ${taskDueTemplate}\n      `;\n    }\n\n    const taskOptionsTemplate =\n      !this.readOnly && !this.hideOptions\n        ? html`\n            <div class=\"TaskOptions\">\n              <mgt-dot-options\n                .options=\"${{\n                  [this.strings.removeTaskSubtitle]: e => this.removeTask(e, task.id)\n                }}\"\n              ></mgt-dot-options>\n            </div>\n          `\n        : null;\n\n    const taskClasses = classMap({\n      Complete: isCompleted,\n      Incomplete: !isCompleted,\n      ReadOnly: this.readOnly,\n      Task: true\n    });\n    const taskCheckContainerClasses = classMap({\n      Complete: isCompleted,\n      Incomplete: !isCompleted,\n      TaskCheckContainer: true\n    });\n\n    return html`\n      <div class=${taskClasses}>\n        <div class=\"TaskContent\" @click=\"${(e: Event) => this.handleTaskClick(e, task)}}\">\n          <span class=${taskCheckContainerClasses} @click=\"${(e: Event) => this.handleTaskCheckClick(e, task)}\">\n            <span class=${classMap(taskCheckClasses)}>\n              <span class=\"TaskCheckContent\">${taskCheckContent}</span>\n            </span>\n          </span>\n          <div class=\"TaskDetailsContainer ${this.mediaQuery}\">\n            ${taskDetailsTemplate}\n          </div>\n          ${taskOptionsTemplate}\n          <div class=\"Divider\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * loads tasks from dataSource\n   *\n   * @returns\n   * @memberof MgtTasks\n   */\n  protected async loadState(): Promise<void> {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    if (!this._graph) {\n      const graph = provider.graph.forComponent(this);\n      this._graph = graph;\n    }\n\n    let lists = this._lists;\n    if (!lists || !lists.length) {\n      if (this.targetId) {\n        const targetList = await getTodoTaskList(this._graph, this.targetId);\n        lists = targetList ? [targetList] : [];\n      } else {\n        lists = await getTodoTaskLists(this._graph);\n      }\n\n      this._tasks = [];\n      this._currentList = null;\n      this._lists = lists;\n    }\n\n    let currentList = this._currentList;\n    if (!currentList && lists && lists.length) {\n      if (this.initialId) {\n        currentList = lists.find(l => l.id === this.initialId);\n      }\n      if (!currentList) {\n        currentList = lists[0];\n      }\n\n      this._tasks = [];\n      this._currentList = currentList;\n    }\n\n    if (currentList) {\n      await this.loadTaskList(currentList);\n    }\n  }\n\n  /**\n   * Send a request the Graph to create a new todo task item\n   *\n   * @protected\n   * @returns {Promise<any>}\n   * @memberof MgtTodo\n   */\n  protected async createNewTask(): Promise<void> {\n    const listId = this._currentList.id;\n    const taskData = {\n      title: this.newTaskName\n    };\n\n    if (this._newTaskDueDate) {\n      // tslint:disable-next-line: no-string-literal\n      taskData['dueDateTime'] = {\n        dateTime: this._newTaskDueDate.toLocaleDateString(),\n        timeZone: 'UTC'\n      };\n    }\n\n    const task = await createTodoTask(this._graph, listId, taskData);\n    this._tasks.unshift(task);\n  }\n\n  /**\n   * Clear out the new task metadata input fields\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearNewTaskData(): void {\n    super.clearNewTaskData();\n    this._newTaskDueDate = null;\n    this._newTaskListId = null;\n  }\n\n  /**\n   * Clear the state of the component\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearState(): void {\n    super.clearState();\n    this._currentList = null;\n    this._lists = [];\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n  }\n\n  private async loadTaskList(list: TodoTaskList): Promise<void> {\n    this._isLoadingTasks = true;\n    this._currentList = list;\n    this.requestUpdate();\n\n    this._tasks = await getTodoTasks(this._graph, list.id);\n\n    this._isLoadingTasks = false;\n    this.requestUpdate();\n  }\n\n  private async updateTaskStatus(task: TodoTask, taskStatus: TaskStatus): Promise<void> {\n    this._loadingTasks = [...this._loadingTasks, task.id];\n    this.requestUpdate();\n\n    // Change the task status\n    task.status = taskStatus;\n\n    // Send update request\n    const listId = this._currentList.id;\n    task = await updateTodoTask(this._graph, listId, task.id, task);\n\n    const taskIndex = this._tasks.findIndex(t => t.id === task.id);\n    this._tasks[taskIndex] = task;\n\n    this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n    this.requestUpdate();\n  }\n\n  // tslint:disable-next-line: completed-docs\n  private async removeTask(e: { target: HTMLElement }, taskId: string) {\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n    this.requestUpdate();\n\n    const listId = this._currentList.id;\n    await deleteTodoTask(this._graph, listId, taskId);\n\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n  }\n\n  private handleTaskCheckClick(e: Event, task: TodoTask) {\n    if (!this.readOnly) {\n      if ((TaskStatus as any)[task.status] === TaskStatus.completed) {\n        this.updateTaskStatus(task, TaskStatus.notStarted);\n      } else {\n        this.updateTaskStatus(task, TaskStatus.completed);\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n}\n"]}