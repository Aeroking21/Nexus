{"version":3,"file":"task-sources.js","sourceRoot":"src/","sources":["components/mgt-tasks/task-sources.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, BetaGraph } from '@microsoft/mgt-element';\nimport { PlannerAssignments } from '@microsoft/microsoft-graph-types';\nimport { OutlookTask, OutlookTaskFolder, OutlookTaskGroup } from '@microsoft/microsoft-graph-types-beta';\nimport {\n  addPlannerTask,\n  assignPeopleToPlannerTask,\n  getAllMyPlannerPlans,\n  getBucketsForPlannerPlan,\n  getPlansForGroup,\n  getSinglePlannerPlan,\n  getTasksForPlannerBucket,\n  removePlannerTask,\n  setPlannerTaskComplete,\n  setPlannerTaskIncomplete\n} from './mgt-tasks.graph.planner';\nimport {\n  addTodoTask,\n  getAllMyTodoGroups,\n  getAllTodoTasksForFolder,\n  getFoldersForTodoGroup,\n  getSingleTodoGroup,\n  removeTodoTask,\n  setTodoTaskComplete,\n  setTodoTaskIncomplete\n} from './mgt-tasks.graph.todo';\n\n/**\n * Itask\n *\n * @export\n * @interface ITask\n */\nexport interface ITask {\n  /**\n   * id\n   *\n   * @type {string}\n   * @memberof ITask\n   */\n  id: string;\n  /**\n   * name\n   *\n   * @type {string}\n   * @memberof ITask\n   */\n  name: string;\n  /**\n   * task dueDate\n   *\n   * @type {Date}\n   * @memberof ITask\n   */\n  dueDate: Date;\n  /**\n   * is task completed\n   *\n   * @type {boolean}\n   * @memberof ITask\n   */\n  completed: boolean;\n  /**\n   * task topParentId\n   *\n   * @type {string}\n   * @memberof ITask\n   */\n  topParentId: string;\n  /**\n   * task's immediate parent task id\n   *\n   * @type {string}\n   * @memberof ITask\n   */\n  immediateParentId: string;\n  /**\n   * assignments\n   *\n   * @type {PlannerAssignments}\n   * @memberof ITask\n   */\n  assignments: PlannerAssignments;\n  /**\n   * eTag\n   *\n   * @type {string}\n   * @memberof ITask\n   */\n  eTag: string;\n  /**\n   * raw\n   *\n   * @type {*}\n   * @memberof ITask\n   */\n  _raw?: any;\n}\n/**\n * container for tasks\n *\n * @export\n * @interface ITaskFolder\n */\nexport interface ITaskFolder {\n  /**\n   * id\n   *\n   * @type {string}\n   * @memberof ITaskFolder\n   */\n  id: string;\n  /**\n   * name\n   *\n   * @type {string}\n   * @memberof ITaskFolder\n   */\n  name: string;\n  /**\n   * parentId\n   *\n   * @type {string}\n   * @memberof ITaskFolder\n   */\n  parentId: string;\n  /**\n   * raw\n   *\n   * @type {*}\n   * @memberof ITaskFolder\n   */\n  _raw?: any;\n}\n\n/**\n * container for folders\n *\n * @export\n * @interface ITaskGroup\n */\nexport interface ITaskGroup {\n  /**\n   * string\n   *\n   * @type {string}\n   * @memberof ITaskGroup\n   */\n  id: string;\n  /**\n   * secondaryId\n   *\n   * @type {string}\n   * @memberof ITaskGroup\n   */\n  secondaryId?: string;\n  /**\n   * title\n   *\n   * @type {string}\n   * @memberof ITaskGroup\n   */\n  title: string;\n  /**\n   * raw\n   *\n   * @type {*}\n   * @memberof ITaskGroup\n   */\n  _raw?: any;\n\n  /**\n   * Plan Container ID. Same as the group ID of the group in the plan.\n   *\n   * @type {string}\n   * @memberof ITaskGroup\n   */\n  containerId?: string;\n}\n/**\n * A common interface for both planner and todo tasks\n *\n * @export\n * @interface ITaskSource\n */\nexport interface ITaskSource {\n  /**\n   * Promise that returns task collections for the signed in user\n   *\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof ITaskSource\n   */\n  getTaskGroups(): Promise<ITaskGroup[]>;\n\n  /**\n   * Promise that returns task collections for group id\n   *\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof ITaskSource\n   */\n  getTaskGroupsForGroup(id: string): Promise<ITaskGroup[]>;\n\n  /**\n   * Promise that returns a single task collection by collection id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskGroup>}\n   * @memberof ITaskSource\n   */\n  getTaskGroup(id: string): Promise<ITaskGroup>;\n\n  /**\n   * Promise that returns all task groups in task collection\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskFolder[]>}\n   * @memberof ITaskSource\n   */\n  getTaskFoldersForTaskGroup(id: string): Promise<ITaskFolder[]>;\n\n  /**\n   * Promise that returns all tasks in task group\n   *\n   * @param {string} id\n   * @param {string} parId\n   * @returns {Promise<ITask[]>}\n   * @memberof ITaskSource\n   */\n  getTasksForTaskFolder(id: string, parId: string): Promise<ITask[]>;\n\n  /**\n   * Promise that completes a single task\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof ITaskSource\n   */\n  setTaskComplete(id: string, eTag: string): Promise<any>;\n\n  /**\n   * Promise that sets a task to incomplete\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof ITaskSource\n   */\n  setTaskIncomplete(id: string, eTag: string): Promise<any>;\n\n  /**\n   * Promise to add a new task\n   *\n   * @param {ITask} newTask\n   * @returns {Promise<any>}\n   * @memberof ITaskSource\n   */\n  addTask(newTask: ITask): Promise<any>;\n\n  /**\n   * assign id's to task\n   *\n   * @param {string} id\n   * @param {*} people\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof ITaskSource\n   */\n  assignPeopleToTask(id: string, people: any, eTag: string): Promise<any>;\n\n  /**\n   * Promise to delete a task by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof ITaskSource\n   */\n  removeTask(id: string, eTag: string): Promise<any>;\n\n  /**\n   * assigns task to the current signed in user\n   *\n   * @param {ITask} task\n   * @param {string} myId\n   * @returns {Boolean}\n   * @memberof ITaskSource\n   */\n  isAssignedToMe(task: ITask, myId: string): boolean;\n}\n/**\n * async method to get user details\n *\n * @class TaskSourceBase\n */\nclass TaskSourceBase {\n  /**\n   * the IGraph instance to use for making Graph requests\n   *\n   * @type {IGraph}\n   * @memberof TaskSourceBase\n   */\n  public graph: IGraph;\n\n  constructor(graph: IGraph) {\n    // Use an instance of BetaGraph since we know we need to call beta apis.\n    this.graph = BetaGraph.fromGraph(graph);\n  }\n}\n\n/**\n * Create Planner\n *\n * @export\n * @class PlannerTaskSource\n * @extends {TaskSourceBase}\n * @implements {ITaskSource}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class PlannerTaskSource extends TaskSourceBase implements ITaskSource {\n  /**\n   * returns promise with all of users plans\n   *\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTaskGroups(): Promise<ITaskGroup[]> {\n    const plans = await getAllMyPlannerPlans(this.graph);\n    return plans.map(\n      plan => ({ id: plan.id, title: plan.title, containerId: plan?.container?.containerId } as ITaskGroup)\n    );\n  }\n\n  /**\n   * returns promise with all of plans for group id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTaskGroupsForGroup(id: string): Promise<ITaskGroup[]> {\n    const plans = await getPlansForGroup(this.graph, id);\n\n    return plans.map(plan => ({ id: plan.id, title: plan.title } as ITaskGroup));\n  }\n\n  /**\n   * returns promise single TaskGroup or plan from plan.id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskGroup>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTaskGroup(id: string): Promise<ITaskGroup> {\n    const plan = await getSinglePlannerPlan(this.graph, id);\n\n    return { id: plan.id, title: plan.title, _raw: plan };\n  }\n\n  /**\n   * returns promise with Bucket for a plan from bucket.id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskFolder[]>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTaskFoldersForTaskGroup(id: string): Promise<ITaskFolder[]> {\n    const buckets = await getBucketsForPlannerPlan(this.graph, id);\n\n    return buckets.map(\n      bucket =>\n        ({\n          _raw: bucket,\n          id: bucket.id,\n          name: bucket.name,\n          parentId: bucket.planId\n        } as ITaskFolder)\n    );\n  }\n\n  /**\n   * get all task from a Bucket given task id\n   *\n   * @param {string} id\n   * @returns {Promise<ITask[]>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTasksForTaskFolder(id: string): Promise<ITask[]> {\n    const tasks = await getTasksForPlannerBucket(this.graph, id);\n\n    return tasks.map(\n      task =>\n        ({\n          _raw: task,\n          assignments: task.assignments,\n          completed: task.percentComplete === 100,\n          dueDate: task.dueDateTime && new Date(task.dueDateTime),\n          eTag: task['@odata.etag'],\n          id: task.id,\n          immediateParentId: task.bucketId,\n          name: task.title,\n          topParentId: task.planId\n        } as ITask)\n    );\n  }\n\n  /**\n   * set task in planner to complete state by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async setTaskComplete(id: string, eTag: string): Promise<any> {\n    return await setPlannerTaskComplete(this.graph, id, eTag);\n  }\n\n  /**\n   * set task in planner to incomplete state by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async setTaskIncomplete(id: string, eTag: string): Promise<any> {\n    return await setPlannerTaskIncomplete(this.graph, id, eTag);\n  }\n\n  /**\n   * add new task to bucket\n   *\n   * @param {ITask} newTask\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async addTask(newTask: ITask): Promise<any> {\n    return await addPlannerTask(this.graph, {\n      assignments: newTask.assignments,\n      bucketId: newTask.immediateParentId,\n      dueDateTime: newTask.dueDate && newTask.dueDate.toISOString(),\n      planId: newTask.topParentId,\n      title: newTask.name\n    });\n  }\n\n  /**\n   * Assigns people to task\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @param {*} people\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async assignPeopleToTask(id: string, eTag: string, people: any): Promise<any> {\n    return await assignPeopleToPlannerTask(this.graph, id, eTag, people);\n  }\n\n  /**\n   * remove task from bucket\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async removeTask(id: string, eTag: string): Promise<any> {\n    return await removePlannerTask(this.graph, id, eTag);\n  }\n\n  /**\n   * assigns task to the signed in user\n   *\n   * @param {ITask} task\n   * @param {string} myId\n   * @returns {boolean}\n   * @memberof PlannerTaskSource\n   */\n  public isAssignedToMe(task: ITask, myId: string): boolean {\n    const keys = Object.keys(task.assignments);\n    return keys.includes(myId);\n  }\n}\n\n/**\n * determins outlook task group for data source\n *\n * @export\n * @class TodoTaskSource\n * @extends {TaskSourceBase}\n * @implements {ITaskSource}\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class TodoTaskSource extends TaskSourceBase implements ITaskSource {\n  /**\n   * get all Outlook task groups\n   *\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof TodoTaskSource\n   */\n  public async getTaskGroups(): Promise<ITaskGroup[]> {\n    const groups: OutlookTaskGroup[] = await getAllMyTodoGroups(this.graph);\n\n    return groups.map(\n      group =>\n        ({\n          _raw: group,\n          id: group.id,\n          secondaryId: group.groupKey,\n          title: group.name\n        } as ITaskGroup)\n    );\n  }\n  /**\n   * get a single OutlookTaskGroup from id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskGroup>}\n   * @memberof TodoTaskSource\n   */\n  public async getTaskGroup(id: string): Promise<ITaskGroup> {\n    const group: OutlookTaskGroup = await getSingleTodoGroup(this.graph, id);\n\n    return { id: group.id, secondaryId: group.groupKey, title: group.name, _raw: group };\n  }\n  /**\n   * get all OutlookTaskFolder for group by id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskFolder[]>}\n   * @memberof TodoTaskSource\n   */\n  public async getTaskFoldersForTaskGroup(id: string): Promise<ITaskFolder[]> {\n    const folders: OutlookTaskFolder[] = await getFoldersForTodoGroup(this.graph, id);\n\n    return folders.map(\n      folder =>\n        ({\n          _raw: folder,\n          id: folder.id,\n          name: folder.name,\n          parentId: id\n        } as ITaskFolder)\n    );\n  }\n  /**\n   * gets all tasks for OutLook Task Folder by id\n   *\n   * @param {string} id\n   * @param {string} parId\n   * @returns {Promise<ITask[]>}\n   * @memberof TodoTaskSource\n   */\n  public async getTasksForTaskFolder(id: string, parId: string): Promise<ITask[]> {\n    const tasks: OutlookTask[] = await getAllTodoTasksForFolder(this.graph, id);\n\n    return tasks.map(\n      task =>\n        ({\n          _raw: task,\n          assignments: {},\n          completed: !!task.completedDateTime,\n          dueDate: task.dueDateTime && new Date(task.dueDateTime.dateTime + 'Z'),\n          eTag: task['@odata.etag'],\n          id: task.id,\n          immediateParentId: id,\n          name: task.subject,\n          topParentId: parId\n        } as ITask)\n    );\n  }\n\n  /**\n   * set task in planner to complete state by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof TodoTaskSource\n   */\n  public async setTaskComplete(id: string, eTag: string): Promise<any> {\n    return await setTodoTaskComplete(this.graph, id, eTag);\n  }\n\n  /**\n   * Assigns people to task\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @param {*} people\n   * @returns {Promise<any>}\n   * @memberof PlannerTaskSource\n   */\n  public async assignPeopleToTask(id: string, eTag: string, people: any): Promise<any> {\n    return await assignPeopleToPlannerTask(this.graph, id, eTag, people);\n  }\n  /**\n   * set task in planner to incomplete state by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof TodoTaskSource\n   */\n  public async setTaskIncomplete(id: string, eTag: string): Promise<any> {\n    return await setTodoTaskIncomplete(this.graph, id, eTag);\n  }\n  /**\n   * add new task to planner\n   *\n   * @param {ITask} newTask\n   * @returns {Promise<any>}\n   * @memberof TodoTaskSource\n   */\n  public async addTask(newTask: ITask): Promise<any> {\n    const task = {\n      parentFolderId: newTask.immediateParentId,\n      subject: newTask.name\n    } as OutlookTask;\n    if (newTask.dueDate) {\n      task.dueDateTime = {\n        dateTime: newTask.dueDate.toISOString(),\n        timeZone: 'UTC'\n      };\n    }\n    return await addTodoTask(this.graph, task);\n  }\n  /**\n   * remove task from planner by id\n   *\n   * @param {string} id\n   * @param {string} eTag\n   * @returns {Promise<any>}\n   * @memberof TodoTaskSource\n   */\n  public async removeTask(id: string, eTag: string): Promise<any> {\n    return await removeTodoTask(this.graph, id, eTag);\n  }\n\n  /**\n   * if task is assigned in to user logged in\n   *\n   * @param {ITask} task\n   * @param {string} myId\n   * @returns {boolean}\n   * @memberof TodoTaskSource\n   */\n  public isAssignedToMe(task: ITask, myId: string): boolean {\n    return true;\n  }\n\n  /**\n   * returns promise with all of plans for group id\n   *\n   * @param {string} id\n   * @returns {Promise<ITaskGroup[]>}\n   * @memberof PlannerTaskSource\n   */\n  public async getTaskGroupsForGroup(id: string): Promise<ITaskGroup[]> {\n    return undefined;\n  }\n}\n"]}