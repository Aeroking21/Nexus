{"version":3,"file":"mgt-tasks.graph.todo.js","sourceRoot":"src/","sources":["components/mgt-tasks/mgt-tasks.graph.todo.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { OutlookTask, OutlookTaskFolder, OutlookTaskGroup } from '@microsoft/microsoft-graph-types-beta';\n\n/**\n * async promise, allows developer to add new to-do task\n *\n * @param {*} newTask\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport async function addTodoTask(graph: IGraph, newTask: any): Promise<OutlookTask> {\n  const { parentFolderId = null } = newTask;\n\n  if (parentFolderId) {\n    return await graph\n      .api(`/me/outlook/taskFolders/${parentFolderId}/tasks`)\n      .header('Cache-Control', 'no-store')\n      .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n      .post(newTask);\n  } else {\n    return await graph\n      .api('/me/outlook/tasks')\n      .header('Cache-Control', 'no-store')\n      .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n      .post(newTask);\n  }\n}\n\n/**\n * async promise, returns all Outlook taskGroups associated with the logged in user\n *\n * @returns {Promise<OutlookTaskGroup[]>}\n * @memberof BetaGraph\n */\nexport async function getAllMyTodoGroups(graph: IGraph): Promise<OutlookTaskGroup[]> {\n  const groups = await graph\n    .api('/me/outlook/taskGroups')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return groups && groups.value;\n}\n\n/**\n * async promise, returns all Outlook tasks associated with a taskFolder with folderId\n *\n * @param {string} folderId\n * @returns {Promise<OutlookTask[]>}\n * @memberof BetaGraph\n */\nexport async function getAllTodoTasksForFolder(graph: IGraph, folderId: string): Promise<OutlookTask[]> {\n  const tasks = await graph\n    .api(`/me/outlook/taskFolders/${folderId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return tasks && tasks.value;\n}\n\n/**\n * async promise, returns all Outlook taskFolders associated with groupId\n *\n * @param {string} groupId\n * @returns {Promise<OutlookTaskFolder[]>}\n * @memberof BetaGraph\n */\nexport async function getFoldersForTodoGroup(graph: IGraph, groupId: string): Promise<OutlookTaskFolder[]> {\n  const folders = await graph\n    .api(`/me/outlook/taskGroups/${groupId}/taskFolders`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return folders && folders.value;\n}\n\n/**\n * async promise, returns to-do tasks from Outlook groups associated with a groupId\n *\n * @param {string} groupId\n * @returns {Promise<OutlookTaskGroup>}\n * @memberof BetaGraph\n */\nexport async function getSingleTodoGroup(graph: IGraph, groupId: string): Promise<OutlookTaskGroup> {\n  const group = await graph\n    .api(`/me/outlook/taskGroups/${groupId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get();\n\n  return group;\n}\n\n/**\n * async promise, allows developer to remove task based on taskId\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof BetaGraph\n */\nexport async function removeTodoTask(graph: IGraph, taskId: string, eTag: string): Promise<any> {\n  return await graph\n    .api(`/me/outlook/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', eTag)\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n}\n\n/**\n * async promise, allows developer to set to-do task to completed state\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport async function setTodoTaskComplete(graph: IGraph, taskId: string, eTag: string): Promise<OutlookTask> {\n  return await setTodoTaskDetails(\n    graph,\n    taskId,\n    {\n      isReminderOn: false,\n      status: 'completed'\n    },\n    eTag\n  );\n}\n\n/**\n * async promise, allows developer to set to-do task to incomplete state\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport async function setTodoTaskIncomplete(graph: IGraph, taskId: string, eTag: string): Promise<OutlookTask> {\n  return await setTodoTaskDetails(\n    graph,\n    taskId,\n    {\n      isReminderOn: true,\n      status: 'notStarted'\n    },\n    eTag\n  );\n}\n\n/**\n * async promise, allows developer to redefine to-do Task details associated with a taskId\n *\n * @param {string} taskId\n * @param {*} task\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport async function setTodoTaskDetails(graph: IGraph, taskId: string, task: any, eTag: string): Promise<OutlookTask> {\n  return await graph\n    .api(`/me/outlook/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', eTag)\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(task);\n}\n"]}