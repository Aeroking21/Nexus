{"version":3,"file":"mgt-teams-channel-picker.js","sourceRoot":"src/","sources":["components/mgt-teams-channel-picker/mgt-teams-channel-picker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { customElement, html, property, TemplateResult } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { Providers, ProviderState, MgtTemplatedComponent } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport '../sub-components/mgt-spinner/mgt-spinner';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport { debounce } from '../../utils/Utils';\nimport { styles } from './mgt-teams-channel-picker-css';\nimport { getAllMyTeams } from './mgt-teams-channel-picker.graph';\nimport { strings } from './strings';\n\n/**\n * Team with displayName\n *\n * @export\n * @interface SelectedChannel\n */\nexport type Team = MicrosoftGraph.Team & {\n  /**\n   * Display name Of Team\n   *\n   * @type {string}\n   */\n  displayName?: string;\n};\n\n/**\n * Selected Channel item\n *\n * @export\n * @interface SelectedChannel\n */\nexport interface SelectedChannel {\n  /**\n   * Channel\n   *\n   * @type {MicrosoftGraph.Channel}\n   * @memberof SelectedChannel\n   */\n  channel: MicrosoftGraph.Channel;\n\n  /**\n   * Team\n   *\n   * @type {MicrosoftGraph.Team}\n   * @memberof SelectedChannel\n   */\n  team: Team;\n}\n\n/**\n * Drop down menu item\n *\n * @export\n * @interface DropdownItem\n */\ninterface DropdownItem {\n  /**\n   * Teams channel\n   *\n   * @type {DropdownItem[]}\n   * @memberof DropdownItem\n   */\n  channels?: DropdownItem[];\n  /**\n   * Microsoft Graph Channel or Team\n   *\n   * @type {(MicrosoftGraph.Channel | MicrosoftGraph.Team)}\n   * @memberof DropdownItem\n   */\n  item: MicrosoftGraph.Channel | Team;\n}\n\n/**\n * Drop down menu item state\n *\n * @interface DropdownItemState\n */\ninterface ChannelPickerItemState {\n  /**\n   * Microsoft Graph Channel or Team\n   *\n   * @type {(MicrosoftGraph.Channel | MicrosoftGraph.Team)}\n   * @memberof ChannelPickerItemState\n   */\n  item: MicrosoftGraph.Channel | Team;\n  /**\n   * if dropdown item shows expanded state\n   *\n   * @type {boolean}\n   * @memberof DropdownItemState\n   */\n  isExpanded?: boolean;\n  /**\n   * If item contains channels\n   *\n   * @type {ChannelPickerItemState[]}\n   * @memberof DropdownItemState\n   */\n  channels?: ChannelPickerItemState[];\n  /**\n   * if Item has parent item (team)\n   *\n   * @type {ChannelPickerItemState}\n   * @memberof DropdownItemState\n   */\n  parent: ChannelPickerItemState;\n}\n\n/**\n * Configuration object for the TeamsChannelPicker component\n *\n * @export\n * @interface MgtTeamsChannelPickerConfig\n */\nexport interface MgtTeamsChannelPickerConfig {\n  /**\n   * Sets or gets whether the teams channel picker component should use\n   * the Teams based scopes instead of the User and Group based scopes\n   *\n   * @type {boolean}\n   */\n  useTeamsBasedScopes: boolean;\n}\n\n/**\n * Web component used to select channels from a User's Microsoft Teams profile\n *\n *\n * @class MgtTeamsChannelPicker\n * @extends {MgtTemplatedComponent}\n *\n * @fires selectionChanged - Fired when the selection changes\n *\n * @cssprop --color - {font} Default font color\n *\n * @cssprop --input-border - {String} Input section entire border\n * @cssprop --input-border-top - {String} Input section border top only\n * @cssprop --input-border-right - {String} Input section border right only\n * @cssprop --input-border-bottom - {String} Input section border bottom only\n * @cssprop --input-border-left - {String} Input section border left only\n * @cssprop --input-background-color - {Color} Input section background color\n * @cssprop --input-border-color--hover - {Color} Input border hover color\n * @cssprop --input-border-color--focus - {Color} Input border focus color\n *\n * @cssprop --dropdown-background-color - {Color} Background color of dropdown area\n * @cssprop --dropdown-item-hover-background - {Color} Background color of channel or team during hover\n * @cssprop --dropdown-item-selected-background - {Color} Background color of selected channel\n *\n * @cssprop --arrow-fill - {Color} Color of arrow svg\n * @cssprop --placeholder-color--focus - {Color} Color of placeholder text during focus state\n * @cssprop --placeholder-color - {Color} Color of placeholder text\n *\n */\n@customElement('mgt-teams-channel-picker')\nexport class MgtTeamsChannelPicker extends MgtTemplatedComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Global Configuration object for all\n   * teams channel picker components\n   *\n   * @static\n   * @type {MgtTeamsChannelPickerConfig}\n   * @memberof MgtTeamsChannelPicker\n   */\n  public static get config(): MgtTeamsChannelPickerConfig {\n    return this._config;\n  }\n\n  private static _config = {\n    useTeamsBasedScopes: false\n  };\n\n  /**\n   * Gets Selected item to be used\n   *\n   * @readonly\n   * @type {SelectedChannel}\n   * @memberof MgtTeamsChannelPicker\n   */\n  public get selectedItem(): SelectedChannel {\n    if (this._selectedItemState) {\n      return { channel: this._selectedItemState.item, team: this._selectedItemState.parent.item };\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the scopes required for teams channel picker\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTeamsChannelPicker\n   */\n  public static get requiredScopes(): string[] {\n    if (this.config.useTeamsBasedScopes) {\n      return ['team.readbasic.all', 'channel.readbasic.all'];\n    } else {\n      return ['user.read.all', 'group.read.all'];\n    }\n  }\n\n  private set items(value) {\n    if (this._items === value) {\n      return;\n    }\n    this._items = value;\n    this._treeViewState = value ? this.generateTreeViewState(value) : [];\n    this.resetFocusState();\n  }\n  private get items(): DropdownItem[] {\n    return this._items;\n  }\n\n  // User input in search\n  private get _input(): HTMLElement {\n    return this.renderRoot.querySelector('.team-chosen-input');\n  }\n  private _inputValue: string = '';\n\n  private _isFocused = false;\n\n  private _selectedItemState: ChannelPickerItemState;\n  private _items: DropdownItem[];\n  private _treeViewState: ChannelPickerItemState[] = [];\n\n  // focus state\n  private _focusList: ChannelPickerItemState[] = [];\n  private _focusedIndex: number = -1;\n  private debouncedSearch;\n\n  // determines loading state\n  @property({ attribute: false }) private _isDropdownVisible;\n\n  constructor() {\n    super();\n    this.handleWindowClick = this.handleWindowClick.bind(this);\n    this.addEventListener('keydown', e => this.onUserKeyDown(e));\n    this.addEventListener('focus', _ => this.loadTeamsIfNotLoaded());\n    this.addEventListener('mouseover', _ => this.loadTeamsIfNotLoaded());\n  }\n\n  /**\n   * Invoked each time the custom element is appended into a document-connected element\n   *\n   * @memberof MgtTeamsChannelPicker\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('click', this.handleWindowClick);\n  }\n\n  /**\n   * Invoked each time the custom element is disconnected from the document's DOM\n   *\n   * @memberof MgtTeamsChannelPicker\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('click', this.handleWindowClick);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * selects a channel by looking up the id in the Graph\n   *\n   * @param {string} channelId MicrosoftGraph.Channel.id\n   * @returns {Promise<return>} A promise that will resolve to true if channel was selected\n   * @memberof MgtTeamsChannelPicker\n   */\n  public async selectChannelById(channelId: string): Promise<boolean> {\n    const provider = Providers.globalProvider;\n    if (provider && provider.state === ProviderState.SignedIn) {\n      // since the component normally handles loading on hover, forces the load for items\n      if (!this.items) {\n        await this.requestStateUpdate();\n      }\n\n      for (const item of this._treeViewState) {\n        for (const channel of item.channels) {\n          if (channel.item.id === channelId) {\n            this.selectChannel(channel);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.\n   * Setting properties inside this method will not trigger the element to update.\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  public render() {\n    const inputClasses = {\n      focused: this._isFocused,\n      'input-wrapper': true\n    };\n\n    const iconClasses = {\n      focused: this._isFocused && !!this._selectedItemState,\n      'search-icon': true\n    };\n\n    const dropdownClasses = {\n      dropdown: true,\n      visible: this._isDropdownVisible\n    };\n\n    const searchClasses = {\n      'hide-icon': !!this._selectedItemState,\n      'search-wrapper': true\n    };\n\n    return (\n      this.renderTemplate('default', { teams: this.items }) ||\n      html`\n        <div class=\"root\" @blur=${this.lostFocus} dir=${this.direction}>\n          <div class=${classMap(inputClasses)} @click=${this.gainedFocus}>\n            ${this.renderSelected()}\n            <div class=${classMap(searchClasses)}>${this.renderSearchIcon()} ${this.renderInput()}</div>\n          </div>\n          ${this.renderCloseButton()}\n          <div class=${classMap(dropdownClasses)}>${this.renderDropdown()}</div>\n        </div>\n      `\n    );\n  }\n\n  /**\n   * Renders selected channel\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderSelected() {\n    if (!this._selectedItemState) {\n      return html``;\n    }\n\n    return html`\n      <li class=\"selected-team\" title=${this._selectedItemState.item.displayName}>\n        <div class=\"selected-team-name\">${this._selectedItemState.parent.item.displayName}</div>\n        <div class=\"arrow\">${getSvg(SvgIcon.TeamSeparator, '#B3B0AD')}</div>\n        ${this._selectedItemState.item.displayName}\n        <div class=\"search-wrapper\">${this.renderSearchIcon()} ${this.renderInput()}</div>\n      </li>\n    `;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected clearState(): void {\n    this._items = [];\n    this._inputValue = '';\n    this._treeViewState = [];\n    this._focusList = [];\n  }\n\n  /**\n   * Renders search icon\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderSearchIcon() {\n    return html`\n      <div class=\"search-icon\">\n        ${getSvg(SvgIcon.Search, '#252424')}\n      </div>\n    `;\n  }\n\n  /**\n   * Renders input field\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderInput() {\n    const rootClasses = {\n      'input-search': !!this._selectedItemState,\n      'input-search-start': !this._selectedItemState\n    };\n\n    return html`\n      <div class=\"${classMap(rootClasses)}\">\n        <span\n          id=\"teams-channel-picker-input\"\n          class=\"team-chosen-input\"\n          type=\"text\"\n          label=\"teams-channel-picker-input\"\n          aria-label=\"Select a channel\"\n          data-placeholder=\"${!!this._selectedItemState ? '' : this.strings.inputPlaceholderText} \"\n          role=\"searchbox\"\n          @keyup=${e => this.handleInputChanged(e)}\n          contenteditable\n        ></span>\n      </div>\n    `;\n  }\n\n  /**\n   * Renders close button\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderCloseButton() {\n    return html`\n      <div tabindex=\"0\" class=\"close-icon\"\n        @keydown=\"${() => this.selectChannel(null)}\"\n        @click=\"${() => this.selectChannel(null)}\"> \n      </div>\n    `;\n  }\n\n  /**\n   * Renders dropdown content\n   *\n   * @param {ChannelPickerItemState[]} items\n   * @param {number} [level=0]\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderDropdown() {\n    if (this.isLoadingState || !this._treeViewState) {\n      return this.renderLoading();\n    }\n\n    if (this._treeViewState) {\n      if (!this.isLoadingState && this._treeViewState.length === 0 && this._inputValue.length > 0) {\n        return this.renderError();\n      }\n\n      return this.renderDropdownList(this._treeViewState);\n    }\n\n    return html``;\n  }\n\n  /**\n   * Renders the dropdown list recursively\n   *\n   * @protected\n   * @param {ChannelPickerItemState[]} items\n   * @param {number} [level=0]\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderDropdownList(items: ChannelPickerItemState[], level: number = 0) {\n    if (items && items.length) {\n      return items.map((treeItem, index) => {\n        const isLeaf = !treeItem.channels;\n        const renderChannels = !isLeaf && treeItem.isExpanded;\n\n        return html`\n          ${this.renderItem(treeItem)}\n          ${renderChannels ? this.renderDropdownList(treeItem.channels, level + 1) : html``}\n        `;\n      });\n    }\n\n    return null;\n  }\n\n  /**\n   * Renders each Channel or Team\n   *\n   * @param {ChannelPickerItemState} itemState\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderItem(itemState: ChannelPickerItemState) {\n    let icon: TemplateResult = null;\n\n    if (itemState.channels) {\n      // must be team with channels\n      icon = itemState.isExpanded ? getSvg(SvgIcon.ArrowDown, '#252424') : getSvg(SvgIcon.ArrowRight, '#252424');\n    }\n\n    let isSelected = false;\n    if (this.selectedItem) {\n      if (this.selectedItem.channel === itemState.item) {\n        isSelected = true;\n      }\n    }\n\n    const classes = {\n      focused: this._focusList[this._focusedIndex] === itemState,\n      item: true,\n      'list-team': itemState.channels ? true : false,\n      selected: isSelected\n    };\n\n    const dropDown = this.renderRoot.querySelector('.dropdown');\n\n    if (dropDown.children[this._focusedIndex]) {\n      dropDown.children[this._focusedIndex].scrollIntoView(false);\n    }\n\n    return html`\n      <div @click=${() => this.handleItemClick(itemState)} class=\"${classMap(classes)}\">\n        <div class=\"arrow\">\n          ${icon}\n        </div>\n        ${itemState.channels ? itemState.item.displayName : this.renderHighlightedText(itemState.item)}\n      </div>\n    `;\n  }\n\n  /**\n   * Renders the channel with the query text higlighted\n   *\n   * @protected\n   * @param {*} channel\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderHighlightedText(channel: any) {\n    // tslint:disable-next-line: prefer-const\n    let channels: any = {};\n\n    const highlightLocation = channel.displayName.toLowerCase().indexOf(this._inputValue.toLowerCase());\n    if (highlightLocation !== -1) {\n      // no location\n      if (highlightLocation === 0) {\n        // highlight is at the beginning of sentence\n        channels.first = '';\n        channels.highlight = channel.displayName.slice(0, this._inputValue.length);\n        channels.last = channel.displayName.slice(this._inputValue.length, channel.displayName.length);\n      } else if (highlightLocation === channel.displayName.length) {\n        // highlight is at end of the sentence\n        channels.first = channel.displayName.slice(0, highlightLocation);\n        channels.highlight = channel.displayName.slice(highlightLocation, channel.displayName.length);\n        channels.last = '';\n      } else {\n        // highlight is in middle of sentence\n        channels.first = channel.displayName.slice(0, highlightLocation);\n        channels.highlight = channel.displayName.slice(highlightLocation, highlightLocation + this._inputValue.length);\n        channels.last = channel.displayName.slice(\n          highlightLocation + this._inputValue.length,\n          channel.displayName.length\n        );\n      }\n    } else {\n      channels.last = channel.displayName;\n    }\n\n    return html`\n      <div class=\"channel-display\">\n        <div class=\"showing\">\n          <span class=\"channel-name-text\">${channels.first}</span\n          ><span class=\"channel-name-text highlight-search-text\">${channels.highlight}</span\n          ><span class=\"channel-name-text\">${channels.last}</span>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Renders an error message when no channel or teams match the query\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderError(): TemplateResult {\n    const template = this.renderTemplate('error', null, 'error');\n\n    return (\n      template ||\n      html`\n        <div class=\"message-parent\">\n          <div label=\"search-error-text\" aria-label=\"We didn't find any matches.\" class=\"search-error-text\">\n            ${this.strings.noResultsFound}\n          </div>\n        </div>\n      `\n    );\n  }\n\n  /**\n   * Renders loading spinner while channels are fetched from the Graph\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderLoading(): TemplateResult {\n    const template = this.renderTemplate('loading', null, 'loading');\n\n    return (\n      template ||\n      html`\n        <div class=\"message-parent\">\n          <mgt-spinner></mgt-spinner>\n          <div label=\"loading-text\" aria-label=\"loading\" class=\"loading-text\">\n            ${this.strings.loadingMessage}\n          </div>\n        </div>\n      `\n    );\n  }\n\n  /**\n   * Queries Microsoft Graph for Teams & respective channels then sets to items list\n   *\n   * @protected\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected async loadState() {\n    const provider = Providers.globalProvider;\n    let teams: MicrosoftGraph.Team[];\n    if (provider && provider.state === ProviderState.SignedIn) {\n      const graph = provider.graph.forComponent(this);\n\n      // make sure we have the needed scopes\n      if (!(await provider.getAccessTokenForScopes(...MgtTeamsChannelPicker.requiredScopes))) {\n        return;\n      }\n\n      teams = await getAllMyTeams(graph);\n      teams = teams.filter(t => !t.isArchived);\n\n      const batch = graph.createBatch();\n      const scopes = ['team.readbasic.all'];\n\n      for (const team of teams) {\n        batch.get(team.id, `teams/${team.id}/channels`, scopes);\n      }\n\n      const responses = await batch.executeAll();\n\n      for (const team of teams) {\n        const response = responses.get(team.id);\n\n        if (response && response.content && response.content.value) {\n          team.channels = response.content.value.map(c => {\n            return {\n              item: c\n            };\n          });\n        }\n      }\n\n      this.items = teams.map(t => {\n        return {\n          channels: t.channels as DropdownItem[],\n          item: t\n        };\n      });\n    }\n    this.filterList();\n    this.resetFocusState();\n  }\n\n  private handleItemClick(item: ChannelPickerItemState) {\n    if (item.channels) {\n      item.isExpanded = !item.isExpanded;\n    } else {\n      this.selectChannel(item);\n    }\n\n    this._focusedIndex = -1;\n    this.resetFocusState();\n  }\n\n  private handleInputChanged(e) {\n    if (this._inputValue !== e.target.textContent) {\n      this._inputValue = e.target.textContent;\n    } else {\n      return;\n    }\n\n    // shows list\n    this.gainedFocus();\n\n    if (!this.debouncedSearch) {\n      this.debouncedSearch = debounce(() => {\n        this.filterList();\n      }, 400);\n    }\n\n    this.debouncedSearch();\n  }\n\n  private filterList() {\n    if (this.items) {\n      this._treeViewState = this.generateTreeViewState(this.items, this._inputValue);\n      this._focusedIndex = -1;\n      this.resetFocusState();\n    }\n  }\n\n  private generateTreeViewState(\n    tree: DropdownItem[],\n    filterString: string = '',\n    parent: ChannelPickerItemState = null\n  ): ChannelPickerItemState[] {\n    const treeView: ChannelPickerItemState[] = [];\n    filterString = filterString.toLowerCase();\n\n    if (tree) {\n      for (const state of tree) {\n        let stateItem: ChannelPickerItemState;\n\n        if (filterString.length === 0 || state.item.displayName.toLowerCase().includes(filterString)) {\n          stateItem = { item: state.item, parent };\n          if (state.channels) {\n            stateItem.channels = this.generateTreeViewState(state.channels, '', stateItem);\n            stateItem.isExpanded = filterString.length > 0;\n          }\n        } else if (state.channels) {\n          const newStateItem = { item: state.item, parent };\n          const channels = this.generateTreeViewState(state.channels, filterString, newStateItem);\n          if (channels.length > 0) {\n            stateItem = newStateItem;\n            stateItem.channels = channels;\n            stateItem.isExpanded = true;\n          }\n        }\n\n        if (stateItem) {\n          treeView.push(stateItem);\n        }\n      }\n    }\n    return treeView;\n  }\n\n  // generates a flat list from a tree to facilitate easier focus\n  // navigation\n  private generateFocusList(items): any[] {\n    if (!items || items.length === 0) {\n      return [];\n    }\n\n    let array = [];\n\n    for (const item of items) {\n      array.push(item);\n      if (item.channels && item.isExpanded) {\n        array = [...array, ...this.generateFocusList(item.channels)];\n      }\n    }\n\n    return array;\n  }\n\n  private resetFocusState() {\n    this._focusList = this.generateFocusList(this._treeViewState);\n    this.requestUpdate();\n  }\n\n  private loadTeamsIfNotLoaded() {\n    if (!this.items && !this.isLoadingState) {\n      this.requestStateUpdate();\n    }\n  }\n\n  private handleWindowClick(e: MouseEvent) {\n    if (e.target !== this) {\n      this.lostFocus();\n    }\n  }\n\n  private onUserKeyDown(event: KeyboardEvent) {\n    if (event.keyCode === 13) {\n      // No new line\n      event.preventDefault();\n    }\n\n    if (this._treeViewState.length === 0) {\n      return;\n    }\n\n    const currentFocusedItem = this._focusList[this._focusedIndex];\n\n    switch (event.keyCode) {\n      case 40: // down\n        this._focusedIndex = (this._focusedIndex + 1) % this._focusList.length;\n        this.requestUpdate();\n        event.preventDefault();\n        break;\n      case 38: // up\n        if (this._focusedIndex === -1) {\n          this._focusedIndex = this._focusList.length;\n        }\n        this._focusedIndex = (this._focusedIndex - 1 + this._focusList.length) % this._focusList.length;\n        this.requestUpdate();\n        event.preventDefault();\n        break;\n      case 39: // right\n        if (currentFocusedItem && currentFocusedItem.channels && !currentFocusedItem.isExpanded) {\n          currentFocusedItem.isExpanded = true;\n          this.resetFocusState();\n          event.preventDefault();\n        }\n        break;\n      case 37: // left\n        if (currentFocusedItem && currentFocusedItem.channels && currentFocusedItem.isExpanded) {\n          currentFocusedItem.isExpanded = false;\n          this.resetFocusState();\n          event.preventDefault();\n        }\n        break;\n      case 9: // tab\n        if (!currentFocusedItem) {\n          this.lostFocus();\n          break;\n        }\n      case 13: // return/enter\n        if (currentFocusedItem && currentFocusedItem.channels) {\n          // focus item is a Team\n          currentFocusedItem.isExpanded = !currentFocusedItem.isExpanded;\n          this.resetFocusState();\n          event.preventDefault();\n        } else if (currentFocusedItem && !currentFocusedItem.channels) {\n          this.selectChannel(currentFocusedItem);\n\n          // refocus to new textbox on initial selection\n          this.resetFocusState();\n          this._focusedIndex = -1;\n          event.preventDefault();\n        }\n        break;\n      case 8: // backspace\n        if (this._inputValue.length === 0 && this._selectedItemState) {\n          this.selectChannel(null);\n          event.preventDefault();\n        }\n        break;\n      case 27: // esc\n        this.selectChannel(this._selectedItemState);\n        this._focusedIndex = -1;\n        this.resetFocusState();\n        event.preventDefault();\n        break;\n    }\n  }\n\n  private gainedFocus() {\n    this._isFocused = true;\n    const input = this._input;\n    if (input) {\n      input.focus();\n    }\n\n    this._isDropdownVisible = true;\n  }\n\n  private lostFocus() {\n    this._isFocused = false;\n    const input = this._input;\n    if (input) {\n      input.textContent = this._inputValue = '';\n    }\n\n    this._isDropdownVisible = false;\n    this.filterList();\n  }\n\n  private selectChannel(item: ChannelPickerItemState) {\n    if (this._selectedItemState !== item) {\n      this._selectedItemState = item;\n      this.fireCustomEvent('selectionChanged', item ? [this.selectedItem] : []);\n    }\n\n    const input = this._input;\n    if (input) {\n      input.textContent = this._inputValue = '';\n    }\n    this.requestUpdate();\n    this.lostFocus();\n  }\n}\n"]}