/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { customElement, html, property } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map';
import { MgtBaseComponent } from '@microsoft/mgt-element';
import { styles } from './mgt-dot-options-css';
/**
 * Custom Component used to handle an arrow rendering for TaskGroups utilized in the task component.
 *
 * @export MgtDotOptions
 * @class MgtDotOptions
 * @extends {MgtBaseComponent}
 */
let MgtDotOptions = class MgtDotOptions extends MgtBaseComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * user the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    constructor() {
        super();
        this._clickHandler = null;
        this._clickHandler = (e) => (this.open = false);
    }
    // tslint:disable-next-line: completed-docs
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('click', this._clickHandler);
    }
    // tslint:disable-next-line: completed-docs
    disconnectedCallback() {
        window.removeEventListener('click', this._clickHandler);
        super.disconnectedCallback();
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */
    render() {
        return html `
      <div tabindex="0" class=${classMap({ DotMenu: true, Open: this.open })}
        @click=${e => this.onDotClick(e)}
        @keydown=${e => this.onDotKeydown(e)}>
        <span class="DotIcon">\uE712</span>
        <div tabindex="0" class="Menu">
          ${Object.keys(this.options).map(prop => this.getMenuOption(prop, this.options[prop]))}
        </div>
      </div>
    `;
    }
    /**
     * Used by the render method to attach click handler to each dot item
     *
     * @param {string} name
     * @param {((e: Event) => void | any)} click
     * @returns
     * @memberof MgtDotOptions
     */
    getMenuOption(name, click) {
        return html `
      <div
        class="DotItem"
        @click="${e => {
            e.preventDefault();
            e.stopPropagation();
            click(e);
            this.open = false;
        }}"
        @keydown="${e => {
            this.handleKeydownMenuOption;
            click(e);
            this.open = false;
        }}"
      >
        <span class="DotItemName">
          ${name}
        </span>
      </div>
    `;
    }
    onDotClick(e) {
        e.preventDefault();
        e.stopPropagation();
        this.open = !this.open;
    }
    onDotKeydown(e) {
        if (e.code === 'Enter') {
            e.preventDefault();
            e.stopPropagation();
            this.open = !this.open;
        }
    }
    handleKeydownMenuOption(e) {
        if (e.code === 'Enter') {
            e.preventDefault();
            e.stopPropagation();
        }
    }
};
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], MgtDotOptions.prototype, "open", void 0);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Object)
], MgtDotOptions.prototype, "options", void 0);
MgtDotOptions = __decorate([
    customElement('mgt-dot-options'),
    __metadata("design:paramtypes", [])
], MgtDotOptions);
export { MgtDotOptions };
//# sourceMappingURL=mgt-dot-options.js.map