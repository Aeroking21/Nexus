{"version":3,"file":"mgt-tasks.graph.planner.js","sourceRoot":"src/","sources":["components/mgt-tasks/mgt-tasks.graph.planner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { PlannerBucket, PlannerPlan, PlannerTask } from '@microsoft/microsoft-graph-types';\n\n/**\n * async promise, allows developer to create new Planner task\n *\n * @param {(PlannerTask)} newTask\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport function addPlannerTask(graph: IGraph, newTask: PlannerTask): Promise<any> {\n  return graph\n    .api('/planner/tasks')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n    .post(newTask);\n}\n\n/**\n * async promise, allows developer to assign people to task\n *\n * @param {string} taskId\n * @param {*} people\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport function assignPeopleToPlannerTask(graph: IGraph, taskId: string, people: any, eTag: string): Promise<any> {\n  return setPlannerTaskDetails(\n    graph,\n    taskId,\n    {\n      assignments: people\n    },\n    eTag\n  );\n}\n\n/**\n * async promise, allows developer to remove Planner task associated with taskId\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport function removePlannerTask(graph: IGraph, taskId: string, eTag: string): Promise<any> {\n  return graph\n    .api(`/planner/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', eTag)\n    .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n    .delete();\n}\n\n/**\n * async promise, allows developer to set a task to complete, associated with taskId\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport function setPlannerTaskComplete(graph: IGraph, taskId: string, eTag: string): Promise<any> {\n  return setPlannerTaskDetails(\n    graph,\n    taskId,\n    {\n      percentComplete: 100\n    },\n    eTag\n  );\n}\n\n/**\n * async promise, allows developer to set a task to incomplete, associated with taskId\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport function setPlannerTaskIncomplete(graph: IGraph, taskId: string, eTag: string): Promise<any> {\n  return setPlannerTaskDetails(\n    graph,\n    taskId,\n    {\n      percentComplete: 0\n    },\n    eTag\n  );\n}\n\n/**\n * async promise, allows developer to set details of planner task associated with a taskId\n *\n * @param {string} taskId\n * @param {(PlannerTask)} details\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport async function setPlannerTaskDetails(\n  graph: IGraph,\n  taskId: string,\n  details: PlannerTask,\n  eTag: string\n): Promise<any> {\n  return await graph\n    .api(`/planner/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n    .header('If-Match', eTag)\n    .patch(JSON.stringify(details));\n}\n\n/**\n * async promise, returns all planner plans associated with the group id\n *\n * @param {string} groupId\n * @returns {(Promise<PlannerPlan[]>)}\n * @memberof Graph\n */\nexport async function getPlansForGroup(graph: IGraph, groupId: string): Promise<PlannerPlan[]> {\n  const scopes = 'Group.Read.All';\n\n  const uri = `/groups/${groupId}/planner/plans`;\n  const plans = await graph.api(uri).header('Cache-Control', 'no-store').middlewareOptions(prepScopes(scopes)).get();\n  return plans ? plans.value : null;\n}\n\n/**\n * async promise, returns a single plan from the Graph associated with the planId\n *\n * @param {string} planId\n * @returns {(Promise<PlannerPlan>)}\n * @memberof Graph\n */\nexport async function getSinglePlannerPlan(graph: IGraph, planId: string): Promise<PlannerPlan> {\n  const plan = await graph\n    .api(`/planner/plans/${planId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get();\n\n  return plan;\n}\n\n/**\n * async promise, returns bucket (for tasks) associated with a planId\n *\n * @param {string} planId\n * @returns {(Promise<PlannerBucket[]>)}\n * @memberof Graph\n */\nexport async function getBucketsForPlannerPlan(graph: IGraph, planId: string): Promise<PlannerBucket[]> {\n  const buckets = await graph\n    .api(`/planner/plans/${planId}/buckets`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get();\n\n  return buckets && buckets.value;\n}\n\n/**\n * async promise, returns all planner plans associated with the user logged in\n *\n * @returns {(Promise<PlannerPlan[]>)}\n * @memberof Graph\n */\nexport async function getAllMyPlannerPlans(graph: IGraph): Promise<PlannerPlan[]> {\n  const plans = await graph\n    .api('/me/planner/plans')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get();\n\n  return plans && plans.value;\n}\n\n/**\n * async promise, returns all tasks from planner associated with a bucketId\n *\n * @param {string} bucketId\n * @returns {(Promise<PlannerTask[][]>)}\n * @memberof Graph\n */\nexport async function getTasksForPlannerBucket(graph: IGraph, bucketId: string): Promise<PlannerTask[]> {\n  const tasks = await graph\n    .api(`/planner/buckets/${bucketId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get();\n\n  return tasks && tasks.value;\n}\n"]}