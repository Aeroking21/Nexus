/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { prepScopes } from '@microsoft/mgt-element';
export var TaskStatus;
(function (TaskStatus) {
    TaskStatus[TaskStatus["notStarted"] = 0] = "notStarted";
    TaskStatus[TaskStatus["inProgress"] = 1] = "inProgress";
    TaskStatus[TaskStatus["completed"] = 2] = "completed";
    TaskStatus[TaskStatus["deferred"] = 3] = "deferred";
    TaskStatus[TaskStatus["waitingOnOthers"] = 4] = "waitingOnOthers";
})(TaskStatus || (TaskStatus = {}));
export var TaskImportance;
(function (TaskImportance) {
    TaskImportance[TaskImportance["low"] = 0] = "low";
    TaskImportance[TaskImportance["normal"] = 1] = "normal";
    TaskImportance[TaskImportance["high"] = 2] = "high";
})(TaskImportance || (TaskImportance = {}));
export var WellknownListName;
(function (WellknownListName) {
    WellknownListName[WellknownListName["none"] = 0] = "none";
    WellknownListName[WellknownListName["default"] = 1] = "default";
    WellknownListName[WellknownListName["flaggedEmails"] = 2] = "flaggedEmails";
    WellknownListName[WellknownListName["unknownFutureValue"] = 3] = "unknownFutureValue";
})(WellknownListName || (WellknownListName = {}));
// tslint:enable
/**
 * Get all todo tasks for a specific task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<TodoTask[]>}
 */
export function getTodoTasks(graph, listId) {
    return __awaiter(this, void 0, void 0, function* () {
        const tasks = yield graph
            .api(`/me/todo/lists/${listId}/tasks`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.Read'))
            .get();
        return tasks && tasks.value;
    });
}
/**
 * Get a specific todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @returns {Promise<TodoTask>}
 */
export function getTodoTask(graph, listId, taskId) {
    return __awaiter(this, void 0, void 0, function* () {
        const task = yield graph
            .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.Read'))
            .get();
        return task;
    });
}
/**
 * get all todo task lists
 *
 * @export
 * @param {IGraph} graph
 * @returns {Promise<TodoTaskList[]>}
 */
export function getTodoTaskLists(graph) {
    return __awaiter(this, void 0, void 0, function* () {
        const taskLists = yield graph
            .api('/me/todo/lists')
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.Read'))
            .get();
        return taskLists && taskLists.value;
    });
}
/**
 * Get a specific todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<TodoTaskList>}
 */
export function getTodoTaskList(graph, listId) {
    return __awaiter(this, void 0, void 0, function* () {
        const taskList = yield graph
            .api(`/me/todo/lists/${listId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.Read'))
            .get();
        return taskList;
    });
}
/**
 * Create a new todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData
 * @returns {Promise<TodoTask>}
 */
export function createTodoTask(graph, listId, 
// tslint:disable-next-line: completed-docs
taskData) {
    return __awaiter(this, void 0, void 0, function* () {
        const task = yield graph
            .api(`/me/todo/lists/${listId}/tasks`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .post(taskData);
        return task;
    });
}
/**
 * Create a new todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {{ displayName: string }} list
 * @returns {Promise<TodoTaskList>}
 */
// tslint:disable-next-line: completed-docs
export function createTodoTaskList(graph, listData) {
    return __awaiter(this, void 0, void 0, function* () {
        const list = yield graph
            .api('/me/todo/lists')
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .post(listData);
        return list;
    });
}
/**
 * Delete a todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @returns {Promise<void>}
 */
export function deleteTodoTask(graph, listId, taskId) {
    return __awaiter(this, void 0, void 0, function* () {
        yield graph
            .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .delete();
    });
}
/**
 * Delete a todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<void>}
 */
export function deleteTodoTaskList(graph, listId) {
    return __awaiter(this, void 0, void 0, function* () {
        yield graph
            .api(`/me/todo/lists/${listId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .delete();
    });
}
/**
 * Update a todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @param {TodoTask} taskData
 * @returns {Promise<TodoTask>}
 */
export function updateTodoTask(graph, listId, taskId, taskData) {
    return __awaiter(this, void 0, void 0, function* () {
        const task = yield graph
            .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .patch(taskData);
        return task;
    });
}
/**
 * Update a todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {TodoTaskList} taskListData
 * @returns {Promise<TodoTaskList>}
 */
export function updateTodoTaskList(graph, listId, taskListData) {
    return __awaiter(this, void 0, void 0, function* () {
        const task = yield graph
            .api(`/me/todo/lists/${listId}`)
            .header('Cache-Control', 'no-store')
            .middlewareOptions(prepScopes('Tasks.ReadWrite'))
            .patch(taskListData);
        return task;
    });
}
//# sourceMappingURL=graph.todo.js.map