{"version":3,"file":"mgt-people.js","sourceRoot":"src/","sources":["components/mgt-people/mgt-people.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { customElement, html, property, TemplateResult } from 'lit-element';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { getPeople, getPeopleFromResource, PersonType } from '../../graph/graph.people';\nimport { getUsersPresenceByPeople } from '../../graph/graph.presence';\nimport { findGroupMembers, getUsersForPeopleQueries, getUsersForUserIds } from '../../graph/graph.user';\nimport { IDynamicPerson } from '../../graph/types';\nimport { Providers, ProviderState, MgtTemplatedComponent, arraysAreEqual } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport { PersonCardInteraction } from './../PersonCardInteraction';\nimport { styles } from './mgt-people-css';\nimport { MgtPerson } from '../mgt-person/mgt-person';\n\nexport { PersonCardInteraction } from './../PersonCardInteraction';\n\n/**\n * web component to display a group of people or contacts by using their photos or initials.\n *\n * @export\n * @class MgtPeople\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --list-margin - {String} List margin for component\n * @cssprop --avatar-margin - {String} Margin for each person\n */\n@customElement('mgt-people')\nexport class MgtPeople extends MgtTemplatedComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * determines if agenda events come from specific group\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public get groupId(): string {\n    return this._groupId;\n  }\n  public set groupId(value) {\n    if (this._groupId === value) {\n      return;\n    }\n    this._groupId = value;\n    this.requestStateUpdate(true);\n  }\n\n  /**\n   * user id array\n   *\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'user-ids',\n    converter: (value, type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public get userIds(): string[] {\n    return this._userIds;\n  }\n  public set userIds(value: string[]) {\n    if (arraysAreEqual(this._userIds, value)) {\n      return;\n    }\n    this._userIds = value;\n    this.requestStateUpdate(true);\n  }\n\n  /**\n   * containing array of people used in the component.\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'people',\n    type: Object\n  })\n  public people: IDynamicPerson[];\n\n  /**\n   * allows developer to define queries of people for component\n   * @type {string[]}\n   */\n\n  @property({\n    attribute: 'people-queries',\n    converter: (value, type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public get peopleQueries(): string[] {\n    return this._peopleQueries;\n  }\n  public set peopleQueries(value: string[]) {\n    if (arraysAreEqual(this._peopleQueries, value)) {\n      return;\n    }\n    this._peopleQueries = value;\n    this.requestStateUpdate(true);\n  }\n\n  /**\n   * developer determined max people shown in component\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * determines if person component renders presence\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'show-presence',\n    type: Boolean\n  })\n  public showPresence: boolean;\n\n  /**\n   * Sets how the person-card is invoked\n   * Set to PersonCardInteraction.none to not show the card\n   *\n   * @type {PersonCardInteraction}\n   * @memberof MgtPerson\n   */\n  @property({\n    attribute: 'person-card',\n    converter: (value, type) => {\n      value = value.toLowerCase();\n      if (typeof PersonCardInteraction[value] === 'undefined') {\n        return PersonCardInteraction.hover;\n      } else {\n        return PersonCardInteraction[value];\n      }\n    }\n  })\n  public personCardInteraction: PersonCardInteraction = PersonCardInteraction.hover;\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public get resource(): string {\n    return this._resource;\n  }\n  public set resource(value) {\n    if (this._resource === value) {\n      return;\n    }\n    this._resource = value;\n    this.requestStateUpdate(true);\n  }\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public get version(): string {\n    return this._version;\n  }\n  public set version(value) {\n    if (this._version === value) {\n      return;\n    }\n    this._version = value;\n    this.requestStateUpdate(true);\n  }\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    },\n    reflect: true\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Fallback when no user is found\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'fallback-details',\n    type: Array\n  })\n  public get fallbackDetails(): IDynamicPerson[] {\n    return this._fallbackDetails;\n  }\n  public set fallbackDetails(value: IDynamicPerson[]) {\n    if (value === this._fallbackDetails) {\n      return;\n    }\n\n    this._fallbackDetails = value;\n\n    this.requestStateUpdate();\n  }\n\n  /**\n   * Get the scopes required for people\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtPeople\n   */\n  public static get requiredScopes(): string[] {\n    return [\n      ...new Set([\n        'user.read.all',\n        'people.read',\n        'user.readbasic.all',\n        'presence.read.all',\n        'contacts.read',\n        ...MgtPerson.requiredScopes\n      ])\n    ];\n  }\n\n  private _groupId: string;\n  private _userIds: string[];\n  private _peopleQueries: string[];\n  private _peoplePresence: {};\n  private _resource: string;\n  private _version: string = 'v1.0';\n  private _fallbackDetails: IDynamicPerson[];\n\n  constructor() {\n    super();\n    this.showMax = 3;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPeople\n   */\n  protected clearState(): void {\n    this.people = null;\n  }\n\n  /**\n   * Request to reload the state.\n   * Use reload instead of load to ensure loading events are fired.\n   *\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  protected requestStateUpdate(force?: boolean) {\n    if (force) {\n      this.people = null;\n    }\n    return super.requestStateUpdate(force);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    if (this.isLoadingState) {\n      return this.renderLoading();\n    }\n\n    if (!this.people || this.people.length === 0) {\n      return this.renderNoData();\n    }\n\n    return this.renderTemplate('default', { people: this.people, max: this.showMax }) || this.renderPeople();\n  }\n\n  /**\n   * Render the loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected renderLoading() {\n    return this.renderTemplate('loading', null) || html``;\n  }\n\n  /**\n   * Render the list of people.\n   *\n   * @protected\n   * @param {*} people\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPeople(): TemplateResult {\n    const maxPeople = this.people.slice(0, this.showMax).filter(pple => pple);\n    return html`\n      <ul class=\"people-list\" aria-label=\"people\">\n        ${repeat(\n          maxPeople,\n          p => (p.id ? p.id : p.displayName),\n          p => html`\n            <li class=\"people-person\">\n              ${this.renderPerson(p)}\n            </li>\n          `\n        )}\n        ${this.people.length > this.showMax ? this.renderOverflow() : null}\n      </ul>\n    `;\n  }\n\n  /**\n   * Render the overflow content to represent any extra people, beyond the max.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderOverflow(): TemplateResult {\n    const extra = this.people.length - this.showMax;\n    return (\n      this.renderTemplate('overflow', {\n        extra,\n        max: this.showMax,\n        people: this.people\n      }) ||\n      html`\n        <li aria-label=\"and ${extra} more attendees\" class=\"overflow\"><span>+${extra}<span></li>\n      `\n    );\n  }\n\n  /**\n   * Render an individual person.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPerson(person: MicrosoftGraph.User | MicrosoftGraph.Person | MicrosoftGraph.Contact): TemplateResult {\n    let personPresence = {\n      // set up default presence\n      activity: 'Offline',\n      availability: 'Offline',\n      id: null\n    };\n    if (this.showPresence && this._peoplePresence) {\n      personPresence = this._peoplePresence[person.id];\n    }\n    const avatarSize = 'small';\n    return (\n      this.renderTemplate('person', { person }, person.id) ||\n      // set image to @ to flag the mgt-person component to\n      // query the image from the graph\n      html`\n        <mgt-person\n          .personDetails=${person}\n          .fetchImage=${true}\n          .avatarSize=${avatarSize}\n          .personCardInteraction=${this.personCardInteraction}\n          .showPresence=${this.showPresence}\n          .personPresence=${personPresence}\n        ></mgt-person>\n      `\n    );\n  }\n\n  /**\n   * render the no data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected async loadState() {\n    if (!this.people) {\n      const provider = Providers.globalProvider;\n\n      if (provider && provider.state === ProviderState.SignedIn) {\n        const graph = provider.graph.forComponent(this);\n\n        // populate people\n        if (this.groupId) {\n          this.people = await findGroupMembers(graph, null, this.groupId, this.showMax, PersonType.person);\n        } else if (this.userIds || this.peopleQueries) {\n          this.userIds\n            ? (this.people = await getUsersForUserIds(graph, this.userIds))\n            : (this.people = await getUsersForPeopleQueries(graph, this.peopleQueries));\n          if (this._fallbackDetails) {\n            // replace null people with fallback details\n            this.people = this.people.map((p, i) => {\n              if (p) {\n                return p;\n              } else if (i < this._fallbackDetails.length) {\n                return this._fallbackDetails[i];\n              }\n              return null;\n            });\n          } else {\n            // remove null people from the array\n            this.people = this.people.filter(p => p !== null);\n          }\n        } else if (this.resource) {\n          this.people = await getPeopleFromResource(graph, this.version, this.resource, this.scopes);\n        } else {\n          this.people = await getPeople(graph);\n        }\n\n        // populate presence for people\n        if (this.showPresence) {\n          this._peoplePresence = await getUsersPresenceByPeople(graph, this.people);\n        } else {\n          this._peoplePresence = null;\n        }\n      }\n    }\n  }\n}\n"]}