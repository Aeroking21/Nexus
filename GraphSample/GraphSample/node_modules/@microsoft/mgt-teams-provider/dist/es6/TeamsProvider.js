/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { TeamsHelper } from '@microsoft/mgt-element';
import { LoginType, ProviderState } from '@microsoft/mgt-element';
import { MsalProvider } from '@microsoft/mgt-msal-provider';
/**
 * Enables authentication of Single page apps inside of a Microsoft Teams tab
 *
 * @export
 * @class TeamsProvider
 * @extends {MsalProvider}
 */
export class TeamsProvider extends MsalProvider {
    /**
     * Gets whether the Teams provider can be used in the current context
     * (Whether the app is running in Microsoft Teams)
     *
     * @readonly
     * @static
     * @memberof TeamsProvider
     */
    static get isAvailable() {
        return TeamsHelper.isAvailable;
    }
    /**
     * Optional entry point to the teams library
     * If this value is not set, the provider will attempt to use
     * the microsoftTeams global variable.
     *
     * @static
     * @memberof TeamsProvider
     */
    static get microsoftTeamsLib() {
        return TeamsHelper.microsoftTeamsLib;
    }
    static set microsoftTeamsLib(value) {
        TeamsHelper.microsoftTeamsLib = value;
    }
    /**
     * Name used for analytics
     *
     * @readonly
     * @memberof IProvider
     */
    get name() {
        return 'MgtTeamsProvider';
    }
    /**
     * Handle all authentication redirects in the authentication page and authenticates the user
     *
     * @static
     * @returns
     * @memberof TeamsProvider
     */
    static handleAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            // we are in popup world now - authenticate and handle it
            const teams = TeamsHelper.microsoftTeamsLib;
            if (!teams) {
                // tslint:disable-next-line: no-console
                console.error('Make sure you have referenced the Microsoft Teams sdk before using the TeamsProvider');
                return;
            }
            teams.initialize();
            // if we were signing out before, then we are done
            if (sessionStorage.getItem(this._sessionStorageLogoutInProgress)) {
                teams.authentication.notifySuccess();
            }
            const url = new URL(window.location.href);
            const isSignOut = url.searchParams.get('signout');
            const paramsString = localStorage.getItem(this._localStorageParametersKey);
            let authParams;
            if (paramsString) {
                authParams = JSON.parse(paramsString);
            }
            else {
                authParams = {};
            }
            if (!authParams.clientId) {
                teams.authentication.notifyFailure('no clientId provided');
                return;
            }
            const scopes = authParams.scopes ? authParams.scopes.split(',') : null;
            const options = authParams.options || { auth: { clientId: authParams.clientId } };
            options.system = options.system || {};
            options.system.loadFrameTimeout = 10000;
            const provider = new MsalProvider({
                clientId: authParams.clientId,
                options,
                scopes
            });
            if (provider.userAgentApplication.urlContainsHash(window.location.hash)) {
                // the page should redirect again
                return;
            }
            const handleProviderState = () => __awaiter(this, void 0, void 0, function* () {
                // how do we handle when user can't sign in
                // change to promise and return status
                if (provider.state === ProviderState.SignedOut) {
                    if (isSignOut) {
                        teams.authentication.notifySuccess();
                        return;
                    }
                    // make sure we are calling login only once
                    if (!sessionStorage.getItem(this._sessionStorageLoginInProgress)) {
                        sessionStorage.setItem(this._sessionStorageLoginInProgress, 'true');
                        provider.login({
                            loginHint: authParams.loginHint,
                            scopes: scopes || provider.scopes
                        });
                    }
                }
                else if (provider.state === ProviderState.SignedIn) {
                    if (isSignOut) {
                        sessionStorage.setItem(this._sessionStorageLogoutInProgress, 'true');
                        yield provider.logout();
                        return;
                    }
                    try {
                        const accessToken = yield provider.getAccessTokenForScopes(...provider.scopes);
                        teams.authentication.notifySuccess(accessToken);
                    }
                    catch (e) {
                        teams.authentication.notifyFailure(e);
                    }
                }
            });
            provider.onStateChanged(handleProviderState);
            handleProviderState();
        });
    }
    constructor(config) {
        super({
            clientId: config.clientId,
            loginType: LoginType.Redirect,
            options: config.msalOptions,
            scopes: config.scopes
        });
        this._msalOptions = config.msalOptions;
        this._authPopupUrl = config.authPopupUrl;
        const teams = TeamsHelper.microsoftTeamsLib;
        teams.initialize();
    }
    /**
     * Opens the teams authentication popup to the authentication page
     *
     * @returns {Promise<void>}
     * @memberof TeamsProvider
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setState(ProviderState.Loading);
            const teams = TeamsHelper.microsoftTeamsLib;
            return new Promise((resolve, reject) => {
                teams.getContext(context => {
                    this.teamsContext = context;
                    const authParams = {
                        clientId: this.clientId,
                        loginHint: context.loginHint,
                        options: this._msalOptions,
                        scopes: this.scopes.join(',')
                    };
                    localStorage.setItem(TeamsProvider._localStorageParametersKey, JSON.stringify(authParams));
                    const url = new URL(this._authPopupUrl, new URL(window.location.href));
                    teams.authentication.authenticate({
                        failureCallback: reason => {
                            this.setState(ProviderState.SignedOut);
                            reject();
                        },
                        successCallback: result => {
                            this.trySilentSignIn();
                            resolve();
                        },
                        url: url.href
                    });
                });
            });
        });
    }
    /**
     * sign out user
     *
     * @returns {Promise<void>}
     * @memberof MsalProvider
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            const teams = TeamsHelper.microsoftTeamsLib;
            return new Promise((resolve, reject) => {
                teams.getContext(context => {
                    this.teamsContext = context;
                    const url = new URL(this._authPopupUrl, new URL(window.location.href));
                    url.searchParams.append('signout', 'true');
                    teams.authentication.authenticate({
                        failureCallback: reason => {
                            this.trySilentSignIn();
                            reject();
                        },
                        successCallback: result => {
                            this.trySilentSignIn();
                            resolve();
                        },
                        url: url.href
                    });
                });
            });
        });
    }
    /**
     * Returns an access token that can be used for making calls to the Microsoft Graph
     *
     * @param {AuthenticationProviderOptions} options
     * @returns {Promise<string>}
     * @memberof TeamsProvider
     */
    getAccessToken(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.teamsContext && TeamsHelper.microsoftTeamsLib) {
                const teams = TeamsHelper.microsoftTeamsLib;
                teams.initialize();
                this.teamsContext = yield teams.getContext();
            }
            const scopes = options ? options.scopes || this.scopes : this.scopes;
            const accessTokenRequest = {
                scopes
            };
            if (this.teamsContext && this.teamsContext.loginHint) {
                accessTokenRequest.loginHint = this.teamsContext.loginHint;
            }
            try {
                const response = yield this.userAgentApplication.acquireTokenSilent(accessTokenRequest);
                return response.accessToken;
            }
            catch (e) {
                if (this.requiresInteraction(e)) {
                    // nothing we can do now until we can do incremental consent
                    return null;
                }
                else {
                    throw e;
                }
            }
        });
    }
}
TeamsProvider._localStorageParametersKey = 'msg-teamsprovider-auth-parameters';
TeamsProvider._sessionStorageLoginInProgress = 'msg-teamsprovider-login-in-progress';
TeamsProvider._sessionStorageLogoutInProgress = 'msg-teamsprovider-logout-in-progress';
//# sourceMappingURL=TeamsProvider.js.map