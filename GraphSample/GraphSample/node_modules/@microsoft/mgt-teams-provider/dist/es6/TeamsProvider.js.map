{"version":3,"file":"TeamsProvider.js","sourceRoot":"src/","sources":["TeamsProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\nimport { AuthenticationParameters, Configuration, UserAgentApplication } from 'msal';\nimport { TeamsHelper } from '@microsoft/mgt-element';\nimport { LoginType, ProviderState } from '@microsoft/mgt-element';\nimport { MsalProvider } from '@microsoft/mgt-msal-provider';\n\n// tslint:disable-next-line: completed-docs\ndeclare global {\n  // tslint:disable-next-line: completed-docs\n  interface Window {\n    // tslint:disable-next-line: completed-docs\n    nativeInterface: any;\n  }\n}\n\n/**\n * Interface used to store authentication parameters in session storage\n * between redirects\n *\n * @interface AuthParams\n */\ninterface AuthParams {\n  /**\n   * The app clientId\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  clientId?: string;\n\n  /**\n   * The comma separated scopes\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  scopes?: string;\n\n  /**\n   * The login hint to be used for authentication\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  loginHint?: string;\n\n  /**\n   * Additional Msal configurations options to use\n   * See Msal.js documentation for more details\n   *\n   * @type {Configuration}\n   * @memberof TeamsConfig\n   */\n  options?: Configuration;\n}\n\n/**\n * Interface to define the configuration when creating a TeamsProvider\n *\n * @export\n * @interface TeamsConfig\n */\nexport interface TeamsConfig {\n  /**\n   * The app clientId\n   *\n   * @type {string}\n   * @memberof TeamsConfig\n   */\n  clientId: string;\n  /**\n   * The relative or absolute path of the html page that will handle the authentication\n   *\n   * @type {string}\n   * @memberof TeamsConfig\n   */\n  authPopupUrl: string;\n  /**\n   * The scopes to use when authenticating the user\n   *\n   * @type {string[]}\n   * @memberof TeamsConfig\n   */\n  scopes?: string[];\n  /**\n   * Additional Msal configurations options to use\n   * See Msal.js documentation for more details\n   *\n   * @type {Configuration}\n   * @memberof TeamsConfig\n   */\n  msalOptions?: Configuration;\n}\n\n/**\n * Enables authentication of Single page apps inside of a Microsoft Teams tab\n *\n * @export\n * @class TeamsProvider\n * @extends {MsalProvider}\n */\nexport class TeamsProvider extends MsalProvider {\n  /**\n   * Gets whether the Teams provider can be used in the current context\n   * (Whether the app is running in Microsoft Teams)\n   *\n   * @readonly\n   * @static\n   * @memberof TeamsProvider\n   */\n  public static get isAvailable(): boolean {\n    return TeamsHelper.isAvailable;\n  }\n\n  /**\n   * Optional entry point to the teams library\n   * If this value is not set, the provider will attempt to use\n   * the microsoftTeams global variable.\n   *\n   * @static\n   * @memberof TeamsProvider\n   */\n  public static get microsoftTeamsLib(): any {\n    return TeamsHelper.microsoftTeamsLib;\n  }\n  public static set microsoftTeamsLib(value: any) {\n    TeamsHelper.microsoftTeamsLib = value;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtTeamsProvider';\n  }\n\n  /**\n   * Handle all authentication redirects in the authentication page and authenticates the user\n   *\n   * @static\n   * @returns\n   * @memberof TeamsProvider\n   */\n  public static async handleAuth() {\n    // we are in popup world now - authenticate and handle it\n    const teams = TeamsHelper.microsoftTeamsLib;\n    if (!teams) {\n      // tslint:disable-next-line: no-console\n      console.error('Make sure you have referenced the Microsoft Teams sdk before using the TeamsProvider');\n      return;\n    }\n\n    teams.initialize();\n\n    // if we were signing out before, then we are done\n    if (sessionStorage.getItem(this._sessionStorageLogoutInProgress)) {\n      teams.authentication.notifySuccess();\n    }\n\n    const url = new URL(window.location.href);\n    const isSignOut = url.searchParams.get('signout');\n\n    const paramsString = localStorage.getItem(this._localStorageParametersKey);\n    let authParams: AuthParams;\n\n    if (paramsString) {\n      authParams = JSON.parse(paramsString);\n    } else {\n      authParams = {};\n    }\n\n    if (!authParams.clientId) {\n      teams.authentication.notifyFailure('no clientId provided');\n      return;\n    }\n\n    const scopes = authParams.scopes ? authParams.scopes.split(',') : null;\n\n    const options = authParams.options || { auth: { clientId: authParams.clientId } };\n\n    options.system = options.system || {};\n    options.system.loadFrameTimeout = 10000;\n\n    const provider = new MsalProvider({\n      clientId: authParams.clientId,\n      options,\n      scopes\n    });\n\n    if (provider.userAgentApplication.urlContainsHash(window.location.hash)) {\n      // the page should redirect again\n      return;\n    }\n\n    const handleProviderState = async () => {\n      // how do we handle when user can't sign in\n      // change to promise and return status\n      if (provider.state === ProviderState.SignedOut) {\n        if (isSignOut) {\n          teams.authentication.notifySuccess();\n          return;\n        }\n\n        // make sure we are calling login only once\n        if (!sessionStorage.getItem(this._sessionStorageLoginInProgress)) {\n          sessionStorage.setItem(this._sessionStorageLoginInProgress, 'true');\n          provider.login({\n            loginHint: authParams.loginHint,\n            scopes: scopes || provider.scopes\n          });\n        }\n      } else if (provider.state === ProviderState.SignedIn) {\n        if (isSignOut) {\n          sessionStorage.setItem(this._sessionStorageLogoutInProgress, 'true');\n          await provider.logout();\n          return;\n        }\n\n        try {\n          const accessToken = await provider.getAccessTokenForScopes(...provider.scopes);\n          teams.authentication.notifySuccess(accessToken);\n        } catch (e) {\n          teams.authentication.notifyFailure(e);\n        }\n      }\n    };\n\n    provider.onStateChanged(handleProviderState);\n    handleProviderState();\n  }\n\n  private static _localStorageParametersKey = 'msg-teamsprovider-auth-parameters';\n  private static _sessionStorageLoginInProgress = 'msg-teamsprovider-login-in-progress';\n  private static _sessionStorageLogoutInProgress = 'msg-teamsprovider-logout-in-progress';\n\n  private teamsContext;\n  private _authPopupUrl: string;\n  private _msalOptions: Configuration;\n\n  constructor(config: TeamsConfig) {\n    super({\n      clientId: config.clientId,\n      loginType: LoginType.Redirect,\n      options: config.msalOptions,\n      scopes: config.scopes\n    });\n\n    this._msalOptions = config.msalOptions;\n    this._authPopupUrl = config.authPopupUrl;\n\n    const teams = TeamsHelper.microsoftTeamsLib;\n    teams.initialize();\n  }\n\n  /**\n   * Opens the teams authentication popup to the authentication page\n   *\n   * @returns {Promise<void>}\n   * @memberof TeamsProvider\n   */\n  public async login(): Promise<void> {\n    this.setState(ProviderState.Loading);\n    const teams = TeamsHelper.microsoftTeamsLib;\n\n    return new Promise((resolve, reject) => {\n      teams.getContext(context => {\n        this.teamsContext = context;\n\n        const authParams: AuthParams = {\n          clientId: this.clientId,\n          loginHint: context.loginHint,\n          options: this._msalOptions,\n          scopes: this.scopes.join(',')\n        };\n\n        localStorage.setItem(TeamsProvider._localStorageParametersKey, JSON.stringify(authParams));\n\n        const url = new URL(this._authPopupUrl, new URL(window.location.href));\n\n        teams.authentication.authenticate({\n          failureCallback: reason => {\n            this.setState(ProviderState.SignedOut);\n            reject();\n          },\n          successCallback: result => {\n            this.trySilentSignIn();\n            resolve();\n          },\n          url: url.href\n        });\n      });\n    });\n  }\n\n  /**\n   * sign out user\n   *\n   * @returns {Promise<void>}\n   * @memberof MsalProvider\n   */\n  public async logout(): Promise<void> {\n    const teams = TeamsHelper.microsoftTeamsLib;\n\n    return new Promise((resolve, reject) => {\n      teams.getContext(context => {\n        this.teamsContext = context;\n\n        const url = new URL(this._authPopupUrl, new URL(window.location.href));\n        url.searchParams.append('signout', 'true');\n\n        teams.authentication.authenticate({\n          failureCallback: reason => {\n            this.trySilentSignIn();\n            reject();\n          },\n          successCallback: result => {\n            this.trySilentSignIn();\n            resolve();\n          },\n          url: url.href\n        });\n      });\n    });\n  }\n\n  /**\n   * Returns an access token that can be used for making calls to the Microsoft Graph\n   *\n   * @param {AuthenticationProviderOptions} options\n   * @returns {Promise<string>}\n   * @memberof TeamsProvider\n   */\n  public async getAccessToken(options: AuthenticationProviderOptions): Promise<string> {\n    if (!this.teamsContext && TeamsHelper.microsoftTeamsLib) {\n      const teams = TeamsHelper.microsoftTeamsLib;\n      teams.initialize();\n      this.teamsContext = await teams.getContext();\n    }\n\n    const scopes = options ? options.scopes || this.scopes : this.scopes;\n    const accessTokenRequest: AuthenticationParameters = {\n      scopes\n    };\n\n    if (this.teamsContext && this.teamsContext.loginHint) {\n      accessTokenRequest.loginHint = this.teamsContext.loginHint;\n    }\n\n    try {\n      const response = await this.userAgentApplication.acquireTokenSilent(accessTokenRequest);\n      return response.accessToken;\n    } catch (e) {\n      if (this.requiresInteraction(e)) {\n        // nothing we can do now until we can do incremental consent\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n"]}