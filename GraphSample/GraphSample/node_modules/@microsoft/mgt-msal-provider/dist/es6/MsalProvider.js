/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { IProvider, LoginType, ProviderState, createFromProvider } from '@microsoft/mgt-element';
import { UserAgentApplication } from 'msal';
/**
 * Msal Provider using MSAL.js to aquire tokens for authentication
 *
 * @export
 * @class MsalProvider
 * @extends {IProvider}
 */
export class MsalProvider extends IProvider {
    /**
     * Gets the user agent application instance
     *
     * @protected
     * @type {UserAgentApplication}
     * @memberof MsalProvider
     */
    get userAgentApplication() {
        return this._userAgentApplication;
    }
    /**
     * Name used for analytics
     *
     * @readonly
     * @memberof IProvider
     */
    get name() {
        return 'MgtMsalProvider';
    }
    constructor(config) {
        super();
        // session storage
        this.sessionStorageRequestedScopesKey = 'mgt-requested-scopes';
        this.sessionStorageDeniedScopesKey = 'mgt-denied-scopes';
        this.initProvider(config);
    }
    /**
     * attempts to sign in user silently
     *
     * @returns
     * @memberof MsalProvider
     */
    trySilentSignIn() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this._userAgentApplication.isCallback(window.location.hash)) {
                    return;
                }
                if (this._userAgentApplication.getAccount() && (yield this.getAccessToken(null))) {
                    this.setState(ProviderState.SignedIn);
                }
                else {
                    this.setState(ProviderState.SignedOut);
                }
            }
            catch (e) {
                this.setState(ProviderState.SignedOut);
            }
        });
    }
    /**
     * sign in user
     *
     * @param {AuthenticationParameters} [authenticationParameters]
     * @returns {Promise<void>}
     * @memberof MsalProvider
     */
    login(authenticationParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            let loginRequest = authenticationParameters || {
                loginHint: this._loginHint,
                scopes: this.scopes
            };
            this._prompt ? (loginRequest.prompt = this._prompt) : '';
            this._domainHint ? (loginRequest.extraQueryParameters = { domain_hint: this._domainHint }) : '';
            if (this._loginType === LoginType.Popup) {
                const response = yield this._userAgentApplication.loginPopup(loginRequest);
                this.setState(response.account ? ProviderState.SignedIn : ProviderState.SignedOut);
            }
            else {
                this._userAgentApplication.loginRedirect(loginRequest);
            }
        });
    }
    /**
     * sign out user
     *
     * @returns {Promise<void>}
     * @memberof MsalProvider
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            this._userAgentApplication.logout();
            this.setState(ProviderState.SignedOut);
        });
    }
    /**
     * returns an access token for scopes
     *
     * @param {AuthenticationProviderOptions} options
     * @returns {Promise<string>}
     * @memberof MsalProvider
     */
    getAccessToken(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const scopes = options ? options.scopes || this.scopes : this.scopes;
            const accessTokenRequest = {
                loginHint: this._loginHint,
                scopes
            };
            this._domainHint ? (accessTokenRequest.extraQueryParameters = { domain_hint: this._domainHint }) : '';
            try {
                const response = yield this._userAgentApplication.acquireTokenSilent(accessTokenRequest);
                return response.accessToken;
            }
            catch (e) {
                if (this.requiresInteraction(e)) {
                    if (this._loginType === LoginType.Redirect) {
                        // check if the user denied the scope before
                        if (!this.areScopesDenied(scopes)) {
                            this.setRequestedScopes(scopes);
                            this._userAgentApplication.acquireTokenRedirect(accessTokenRequest);
                        }
                        else {
                            throw e;
                        }
                    }
                    else {
                        try {
                            const response = yield this._userAgentApplication.acquireTokenPopup(accessTokenRequest);
                            return response.accessToken;
                        }
                        catch (e) {
                            throw e;
                        }
                    }
                }
                else {
                    // if we don't know what the error is, just ask the user to sign in again
                    this.setState(ProviderState.SignedOut);
                    throw e;
                }
            }
            throw null;
        });
    }
    /**
     * sets scopes
     *
     * @param {string[]} scopes
     * @memberof MsalProvider
     */
    updateScopes(scopes) {
        this.scopes = scopes;
    }
    /**
     * checks if error indicates a user interaction is required
     *
     * @protected
     * @param {*} error
     * @returns
     * @memberof MsalProvider
     */
    requiresInteraction(error) {
        if (!error || !error.errorCode) {
            return false;
        }
        return (error.errorCode.indexOf('consent_required') !== -1 ||
            error.errorCode.indexOf('interaction_required') !== -1 ||
            error.errorCode.indexOf('login_required') !== -1);
    }
    /**
     * setting scopes in sessionStorage
     *
     * @protected
     * @param {string[]} scopes
     * @memberof MsalProvider
     */
    setRequestedScopes(scopes) {
        if (scopes) {
            sessionStorage.setItem(this.sessionStorageRequestedScopesKey, JSON.stringify(scopes));
        }
    }
    /**
     * getting scopes from sessionStorage if they exist
     *
     * @protected
     * @returns
     * @memberof MsalProvider
     */
    getRequestedScopes() {
        const scopesStr = sessionStorage.getItem(this.sessionStorageRequestedScopesKey);
        return scopesStr ? JSON.parse(scopesStr) : null;
    }
    /**
     * clears requested scopes from sessionStorage
     *
     * @protected
     * @memberof MsalProvider
     */
    clearRequestedScopes() {
        sessionStorage.removeItem(this.sessionStorageRequestedScopesKey);
    }
    /**
     * sets Denied scopes to sessionStoage
     *
     * @protected
     * @param {string[]} scopes
     * @memberof MsalProvider
     */
    addDeniedScopes(scopes) {
        if (scopes) {
            let deniedScopes = this.getDeniedScopes() || [];
            deniedScopes = deniedScopes.concat(scopes);
            let index = deniedScopes.indexOf('openid');
            if (index !== -1) {
                deniedScopes.splice(index, 1);
            }
            index = deniedScopes.indexOf('profile');
            if (index !== -1) {
                deniedScopes.splice(index, 1);
            }
            sessionStorage.setItem(this.sessionStorageDeniedScopesKey, JSON.stringify(deniedScopes));
        }
    }
    /**
     * gets deniedScopes from sessionStorage
     *
     * @protected
     * @returns
     * @memberof MsalProvider
     */
    getDeniedScopes() {
        const scopesStr = sessionStorage.getItem(this.sessionStorageDeniedScopesKey);
        return scopesStr ? JSON.parse(scopesStr) : null;
    }
    /**
     * if scopes are denied
     *
     * @protected
     * @param {string[]} scopes
     * @returns
     * @memberof MsalProvider
     */
    areScopesDenied(scopes) {
        if (scopes) {
            const deniedScopes = this.getDeniedScopes();
            if (deniedScopes && deniedScopes.filter(s => -1 !== scopes.indexOf(s)).length > 0) {
                return true;
            }
        }
        return false;
    }
    initProvider(config) {
        this.scopes = typeof config.scopes !== 'undefined' ? config.scopes : ['user.read'];
        this._loginType = typeof config.loginType !== 'undefined' ? config.loginType : LoginType.Redirect;
        this._loginHint = config.loginHint;
        this._domainHint = config.domainHint;
        this._prompt = typeof config.prompt !== 'undefined' ? config.prompt : 'select_account';
        let userAgentApplication;
        let clientId;
        if ('clientId' in config) {
            if (config.clientId) {
                const msalConfig = config.options || { auth: { clientId: config.clientId } };
                msalConfig.auth.clientId = config.clientId;
                msalConfig.cache = msalConfig.cache || {};
                msalConfig.cache.cacheLocation = msalConfig.cache.cacheLocation || 'localStorage';
                if (typeof msalConfig.cache.storeAuthStateInCookie === 'undefined' ||
                    msalConfig.cache.storeAuthStateInCookie === null) {
                    msalConfig.cache.storeAuthStateInCookie = true;
                }
                if (config.authority) {
                    msalConfig.auth.authority = config.authority;
                }
                if (config.redirectUri) {
                    msalConfig.auth.redirectUri = config.redirectUri;
                }
                clientId = config.clientId;
                userAgentApplication = new UserAgentApplication(msalConfig);
            }
            else {
                throw new Error('clientId must be provided');
            }
        }
        else if ('userAgentApplication' in config) {
            if (config.userAgentApplication) {
                userAgentApplication = config.userAgentApplication;
                const msalConfig = userAgentApplication.getCurrentConfiguration();
                clientId = msalConfig.auth.clientId;
            }
            else {
                throw new Error('userAgentApplication must be provided');
            }
        }
        else {
            throw new Error('either clientId or userAgentApplication must be provided');
        }
        this.clientId = clientId;
        this._userAgentApplication = userAgentApplication;
        this._userAgentApplication.handleRedirectCallback(response => this.tokenReceivedCallback(response), (error, state) => this.errorReceivedCallback(error, state));
        this.graph = createFromProvider(this);
        this.trySilentSignIn();
    }
    tokenReceivedCallback(response) {
        if (response.tokenType === 'id_token') {
            this.setState(ProviderState.SignedIn);
        }
        this.clearRequestedScopes();
    }
    errorReceivedCallback(authError, accountState) {
        const requestedScopes = this.getRequestedScopes();
        if (requestedScopes) {
            this.addDeniedScopes(requestedScopes);
        }
        this.clearRequestedScopes();
    }
}
//# sourceMappingURL=MsalProvider.js.map