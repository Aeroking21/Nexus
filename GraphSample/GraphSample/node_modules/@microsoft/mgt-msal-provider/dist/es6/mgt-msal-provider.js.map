{"version":3,"file":"mgt-msal-provider.js","sourceRoot":"src/","sources":["mgt-msal-provider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AAC/E,OAAO,EAAc,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC1D;;;;;;GAMG;AAEI,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,eAAe;IAA7C;;QACL;;;;WAIG;QAKI,aAAQ,GAAG,EAAE,CAAC;IAkHvB,CAAC;IAlDC;;;;;OAKG;IACH,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACO,kBAAkB;QAC1B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,MAAM,GAAe;gBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC;YAEF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/C,IAAI,SAAS,GAAW,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;gBACrD,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC3C,MAAM,CAAC,SAAS,GAAG,aAAa,CAAC;aAClC;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;aACnC;YAED,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;iBACvB;aACF;YAED,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;aACvC;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;YACzC,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC;SAC1C;IACH,CAAC;CACF,CAAA;AAtHC;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,WAAW;QACtB,IAAI,EAAE,MAAM;KACb,CAAC;;iDACmB;AAOrB;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,YAAY;QACvB,IAAI,EAAE,MAAM;KACb,CAAC;;kDACe;AAOjB;IAAC,QAAQ,EAAE;;kDAAkB;AAO7B;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,MAAM;KACb,CAAC;;+CACY;AAOd;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,cAAc;QACzB,IAAI,EAAE,MAAM;KACb,CAAC;;oDACiB;AAOnB;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,aAAa;QACxB,IAAI,EAAE,MAAM;KACb,CAAC;;mDACgB;AAOlB;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,MAAM;KACb,CAAC;;+CACY;AAxEH,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CA4H3B;SA5HY,eAAe","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { customElement, property } from 'lit-element';\nimport { Providers, LoginType, MgtBaseProvider } from '@microsoft/mgt-element';\nimport { MsalConfig, MsalProvider } from './MsalProvider';\n/**\n * Authentication Library Provider for Microsoft personal accounts\n *\n * @export\n * @class MgtMsalProvider\n * @extends {MgtBaseProvider}\n */\n@customElement('mgt-msal-provider')\nexport class MgtMsalProvider extends MgtBaseProvider {\n  /**\n   * String alphanumerical value relation to a specific user\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'client-id',\n    type: String\n  })\n  public clientId = '';\n\n  /**\n   * The login type that should be used: popup or redirect\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'login-type',\n    type: String\n  })\n  public loginType;\n\n  /**\n   * The authority to use.\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property() public authority;\n\n  /**\n   * Comma separated list of scopes\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'scopes',\n    type: String\n  })\n  public scopes;\n\n  /**\n   * The redirect uri to use\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'redirect-uri',\n    type: String\n  })\n  public redirectUri;\n\n  /**\n   * The domain hint to use during login\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'domain-hint',\n    type: String\n  })\n  public domainHint;\n\n  /**\n   * The prompt type to use during login\n   *\n   * @memberof MgtMsalProvider\n   */\n  @property({\n    attribute: 'prompt',\n    type: String\n  })\n  public prompt;\n\n  /**\n   * Gets whether this provider can be used in this environment\n   *\n   * @readonly\n   * @memberof MgtMsalProvider\n   */\n  public get isAvailable() {\n    return true;\n  }\n\n  /**\n   * method called to initialize the provider. Each derived class should provide their own implementation.\n   *\n   * @protected\n   * @memberof MgtMsalProvider\n   */\n  protected initializeProvider() {\n    if (this.clientId) {\n      const config: MsalConfig = {\n        clientId: this.clientId,\n        domainHint: this.domainHint,\n        prompt: this.prompt\n      };\n\n      if (this.loginType && this.loginType.length > 1) {\n        let loginType: string = this.loginType.toLowerCase();\n        loginType = loginType[0].toUpperCase() + loginType.slice(1);\n        const loginTypeEnum = LoginType[loginType];\n        config.loginType = loginTypeEnum;\n      }\n\n      if (this.authority) {\n        config.authority = this.authority;\n      }\n\n      if (this.scopes) {\n        const scope = this.scopes.split(',');\n        if (scope && scope.length > 0) {\n          config.scopes = scope;\n        }\n      }\n\n      if (this.redirectUri) {\n        config.redirectUri = this.redirectUri;\n      }\n\n      this.provider = new MsalProvider(config);\n      Providers.globalProvider = this.provider;\n    }\n  }\n}\n"]}