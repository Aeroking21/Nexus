{"version":3,"file":"MsalProvider.js","sourceRoot":"src/","sources":["MsalProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\nimport { IProvider, LoginType, ProviderState, createFromProvider } from '@microsoft/mgt-element';\nimport { AuthenticationParameters, AuthError, AuthResponse, Configuration, UserAgentApplication } from 'msal';\n\n/**\n * base config for MSAL authentication\n *\n * @export\n * @interface MsalConfigBase\n */\ninterface MsalConfigBase {\n  /**\n   * scopes\n   *\n   * @type {string[]}\n   * @memberof MsalConfigBase\n   */\n  scopes?: string[];\n  /**\n   * loginType if login uses popup\n   *\n   * @type {LoginType}\n   * @memberof MsalConfigBase\n   */\n  loginType?: LoginType;\n  /**\n   * login hint value\n   *\n   * @type {string}\n   * @memberof MsalConfigBase\n   */\n  loginHint?: string;\n  /**\n   * Domain hint value\n   *\n   * @type {string}\n   * @memberof MsalConfigBase\n   */\n  domainHint?: string;\n  /**\n   * prompt value\n   *\n   * @type {string}\n   * @memberof MsalConfigBase\n   */\n  prompt?: string;\n}\n\n/**\n * config for MSAL authentication where a UserAgentApplication already exists\n *\n * @export\n * @interface MsalConfig\n */\nexport interface MsalUserAgentApplicationConfig extends MsalConfigBase {\n  /**\n   * UserAgentApplication instance to use\n   *\n   * @type {UserAgentApplication}\n   * @memberof MsalConfig\n   */\n  userAgentApplication: UserAgentApplication;\n}\n\n/**\n * config for MSAL authentication\n *\n * @export\n * @interface MsalConfig\n */\nexport interface MsalConfig extends MsalConfigBase {\n  /**\n   * clientId alphanumeric code\n   *\n   * @type {string}\n   * @memberof MsalConfig\n   */\n  clientId: string;\n\n  /**\n   * config authority\n   *\n   * @type {string}\n   * @memberof MsalConfig\n   */\n  authority?: string;\n  /**\n   * options as defined in\n   * https://learn.microsoft.com/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\n   *\n   * @type {Configuration}\n   * @memberof MsalConfig\n   */\n  options?: Configuration;\n  /**\n   * redirect Uri\n   *\n   * @type {string}\n   * @memberof MsalConfig\n   */\n  redirectUri?: string;\n}\n\n/**\n * Msal Provider using MSAL.js to aquire tokens for authentication\n *\n * @export\n * @class MsalProvider\n * @extends {IProvider}\n */\nexport class MsalProvider extends IProvider {\n  /**\n   * authentication parameter\n   *\n   * @type {string[]}\n   * @memberof MsalProvider\n   */\n  public scopes: string[];\n\n  /**\n   * Gets the user agent application instance\n   *\n   * @protected\n   * @type {UserAgentApplication}\n   * @memberof MsalProvider\n   */\n  public get userAgentApplication() {\n    return this._userAgentApplication;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtMsalProvider';\n  }\n\n  /**\n   * client-id authentication\n   *\n   * @protected\n   * @type {string}\n   * @memberof MsalProvider\n   */\n  protected clientId: string;\n\n  private _userAgentApplication: UserAgentApplication;\n  private _loginType: LoginType;\n  private _loginHint: string;\n  private _domainHint: string;\n  private _prompt: string;\n\n  // session storage\n  private sessionStorageRequestedScopesKey = 'mgt-requested-scopes';\n  private sessionStorageDeniedScopesKey = 'mgt-denied-scopes';\n\n  constructor(config: MsalConfig | MsalUserAgentApplicationConfig) {\n    super();\n    this.initProvider(config);\n  }\n\n  /**\n   * attempts to sign in user silently\n   *\n   * @returns\n   * @memberof MsalProvider\n   */\n  public async trySilentSignIn() {\n    try {\n      if (this._userAgentApplication.isCallback(window.location.hash)) {\n        return;\n      }\n      if (this._userAgentApplication.getAccount() && (await this.getAccessToken(null))) {\n        this.setState(ProviderState.SignedIn);\n      } else {\n        this.setState(ProviderState.SignedOut);\n      }\n    } catch (e) {\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * sign in user\n   *\n   * @param {AuthenticationParameters} [authenticationParameters]\n   * @returns {Promise<void>}\n   * @memberof MsalProvider\n   */\n  public async login(authenticationParameters?: AuthenticationParameters): Promise<void> {\n    let loginRequest: AuthenticationParameters = authenticationParameters || {\n      loginHint: this._loginHint,\n      scopes: this.scopes\n    };\n\n    this._prompt ? (loginRequest.prompt = this._prompt) : '';\n    this._domainHint ? (loginRequest.extraQueryParameters = { domain_hint: this._domainHint }) : '';\n\n    if (this._loginType === LoginType.Popup) {\n      const response = await this._userAgentApplication.loginPopup(loginRequest);\n      this.setState(response.account ? ProviderState.SignedIn : ProviderState.SignedOut);\n    } else {\n      this._userAgentApplication.loginRedirect(loginRequest);\n    }\n  }\n\n  /**\n   * sign out user\n   *\n   * @returns {Promise<void>}\n   * @memberof MsalProvider\n   */\n  public async logout(): Promise<void> {\n    this._userAgentApplication.logout();\n    this.setState(ProviderState.SignedOut);\n  }\n\n  /**\n   * returns an access token for scopes\n   *\n   * @param {AuthenticationProviderOptions} options\n   * @returns {Promise<string>}\n   * @memberof MsalProvider\n   */\n  public async getAccessToken(options: AuthenticationProviderOptions): Promise<string> {\n    const scopes = options ? options.scopes || this.scopes : this.scopes;\n    const accessTokenRequest: AuthenticationParameters = {\n      loginHint: this._loginHint,\n      scopes\n    };\n    this._domainHint ? (accessTokenRequest.extraQueryParameters = { domain_hint: this._domainHint }) : '';\n    try {\n      const response = await this._userAgentApplication.acquireTokenSilent(accessTokenRequest);\n      return response.accessToken;\n    } catch (e) {\n      if (this.requiresInteraction(e)) {\n        if (this._loginType === LoginType.Redirect) {\n          // check if the user denied the scope before\n          if (!this.areScopesDenied(scopes)) {\n            this.setRequestedScopes(scopes);\n            this._userAgentApplication.acquireTokenRedirect(accessTokenRequest);\n          } else {\n            throw e;\n          }\n        } else {\n          try {\n            const response = await this._userAgentApplication.acquireTokenPopup(accessTokenRequest);\n            return response.accessToken;\n          } catch (e) {\n            throw e;\n          }\n        }\n      } else {\n        // if we don't know what the error is, just ask the user to sign in again\n        this.setState(ProviderState.SignedOut);\n        throw e;\n      }\n    }\n    throw null;\n  }\n\n  /**\n   * sets scopes\n   *\n   * @param {string[]} scopes\n   * @memberof MsalProvider\n   */\n  public updateScopes(scopes: string[]) {\n    this.scopes = scopes;\n  }\n\n  /**\n   * checks if error indicates a user interaction is required\n   *\n   * @protected\n   * @param {*} error\n   * @returns\n   * @memberof MsalProvider\n   */\n  protected requiresInteraction(error) {\n    if (!error || !error.errorCode) {\n      return false;\n    }\n    return (\n      error.errorCode.indexOf('consent_required') !== -1 ||\n      error.errorCode.indexOf('interaction_required') !== -1 ||\n      error.errorCode.indexOf('login_required') !== -1\n    );\n  }\n\n  /**\n   * setting scopes in sessionStorage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof MsalProvider\n   */\n  protected setRequestedScopes(scopes: string[]) {\n    if (scopes) {\n      sessionStorage.setItem(this.sessionStorageRequestedScopesKey, JSON.stringify(scopes));\n    }\n  }\n\n  /**\n   * getting scopes from sessionStorage if they exist\n   *\n   * @protected\n   * @returns\n   * @memberof MsalProvider\n   */\n  protected getRequestedScopes() {\n    const scopesStr = sessionStorage.getItem(this.sessionStorageRequestedScopesKey);\n    return scopesStr ? JSON.parse(scopesStr) : null;\n  }\n  /**\n   * clears requested scopes from sessionStorage\n   *\n   * @protected\n   * @memberof MsalProvider\n   */\n  protected clearRequestedScopes() {\n    sessionStorage.removeItem(this.sessionStorageRequestedScopesKey);\n  }\n  /**\n   * sets Denied scopes to sessionStoage\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @memberof MsalProvider\n   */\n  protected addDeniedScopes(scopes: string[]) {\n    if (scopes) {\n      let deniedScopes: string[] = this.getDeniedScopes() || [];\n      deniedScopes = deniedScopes.concat(scopes);\n\n      let index = deniedScopes.indexOf('openid');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n\n      index = deniedScopes.indexOf('profile');\n      if (index !== -1) {\n        deniedScopes.splice(index, 1);\n      }\n      sessionStorage.setItem(this.sessionStorageDeniedScopesKey, JSON.stringify(deniedScopes));\n    }\n  }\n\n  /**\n   * gets deniedScopes from sessionStorage\n   *\n   * @protected\n   * @returns\n   * @memberof MsalProvider\n   */\n  protected getDeniedScopes() {\n    const scopesStr = sessionStorage.getItem(this.sessionStorageDeniedScopesKey);\n    return scopesStr ? JSON.parse(scopesStr) : null;\n  }\n\n  /**\n   * if scopes are denied\n   *\n   * @protected\n   * @param {string[]} scopes\n   * @returns\n   * @memberof MsalProvider\n   */\n  protected areScopesDenied(scopes: string[]) {\n    if (scopes) {\n      const deniedScopes = this.getDeniedScopes();\n      if (deniedScopes && deniedScopes.filter(s => -1 !== scopes.indexOf(s)).length > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private initProvider(config: MsalConfig | MsalUserAgentApplicationConfig) {\n    this.scopes = typeof config.scopes !== 'undefined' ? config.scopes : ['user.read'];\n    this._loginType = typeof config.loginType !== 'undefined' ? config.loginType : LoginType.Redirect;\n    this._loginHint = config.loginHint;\n    this._domainHint = config.domainHint;\n    this._prompt = typeof config.prompt !== 'undefined' ? config.prompt : 'select_account';\n\n    let userAgentApplication: UserAgentApplication;\n    let clientId: string;\n\n    if ('clientId' in config) {\n      if (config.clientId) {\n        const msalConfig: Configuration = config.options || { auth: { clientId: config.clientId } };\n\n        msalConfig.auth.clientId = config.clientId;\n        msalConfig.cache = msalConfig.cache || {};\n        msalConfig.cache.cacheLocation = msalConfig.cache.cacheLocation || 'localStorage';\n        if (\n          typeof msalConfig.cache.storeAuthStateInCookie === 'undefined' ||\n          msalConfig.cache.storeAuthStateInCookie === null\n        ) {\n          msalConfig.cache.storeAuthStateInCookie = true;\n        }\n\n        if (config.authority) {\n          msalConfig.auth.authority = config.authority;\n        }\n\n        if (config.redirectUri) {\n          msalConfig.auth.redirectUri = config.redirectUri;\n        }\n\n        clientId = config.clientId;\n\n        userAgentApplication = new UserAgentApplication(msalConfig);\n      } else {\n        throw new Error('clientId must be provided');\n      }\n    } else if ('userAgentApplication' in config) {\n      if (config.userAgentApplication) {\n        userAgentApplication = config.userAgentApplication;\n        const msalConfig = userAgentApplication.getCurrentConfiguration();\n\n        clientId = msalConfig.auth.clientId;\n      } else {\n        throw new Error('userAgentApplication must be provided');\n      }\n    } else {\n      throw new Error('either clientId or userAgentApplication must be provided');\n    }\n\n    this.clientId = clientId;\n\n    this._userAgentApplication = userAgentApplication;\n    this._userAgentApplication.handleRedirectCallback(\n      response => this.tokenReceivedCallback(response),\n      (error, state) => this.errorReceivedCallback(error, state)\n    );\n\n    this.graph = createFromProvider(this);\n\n    this.trySilentSignIn();\n  }\n\n  private tokenReceivedCallback(response: AuthResponse) {\n    if (response.tokenType === 'id_token') {\n      this.setState(ProviderState.SignedIn);\n    }\n\n    this.clearRequestedScopes();\n  }\n\n  private errorReceivedCallback(authError: AuthError, accountState: string) {\n    const requestedScopes = this.getRequestedScopes();\n    if (requestedScopes) {\n      this.addDeniedScopes(requestedScopes);\n    }\n\n    this.clearRequestedScopes();\n  }\n}\n"]}