{"version":3,"file":"LocalizationHelper.js","sourceRoot":"src/","sources":["utils/LocalizationHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { EventDispatcher, EventHandler } from './EventDispatcher';\n\n/**\n * Helper class for Localization\n *\n *\n * @export\n * @class LocalizationHelper\n */\nexport class LocalizationHelper {\n  static _strings: any;\n\n  static _stringsEventDispatcher: EventDispatcher<any> = new EventDispatcher();\n\n  static _directionEventDispatcher: EventDispatcher<any> = new EventDispatcher();\n\n  private static mutationObserver;\n\n  public static get strings() {\n    return this._strings;\n  }\n\n  /**\n   * Set strings to be localized\n   *\n   * @static\n   * @memberof LocalizationHelper\n   */\n  public static set strings(value: any) {\n    this._strings = value;\n    this._stringsEventDispatcher.fire(null);\n  }\n\n  /**\n   * returns body dir attribute to determine rtl or ltr\n   *\n   * @static\n   * @returns {string} dir\n   * @memberof LocalizationHelper\n   */\n  public static getDocumentDirection() {\n    return document.body?.getAttribute('dir') || document.documentElement?.getAttribute('dir');\n  }\n\n  /**\n   * Fires event when LocalizationHelper changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof LocalizationHelper\n   */\n  public static onStringsUpdated(event: EventHandler<any>) {\n    this._stringsEventDispatcher.add(event);\n  }\n\n  public static removeOnStringsUpdated(event: EventHandler<any>) {\n    this._stringsEventDispatcher.remove(event);\n  }\n\n  public static onDirectionUpdated(event: EventHandler<any>) {\n    this._directionEventDispatcher.add(event);\n    this.initDirection();\n  }\n\n  public static removeOnDirectionUpdated(event: EventHandler<any>) {\n    this._directionEventDispatcher.remove(event);\n  }\n\n  private static _isDirectionInit = false;\n\n  /**\n   * Checks for direction setup and adds mutationObserver\n   *\n   * @private\n   * @static\n   * @returns\n   * @memberof LocalizationHelper\n   */\n  private static initDirection() {\n    if (this._isDirectionInit) {\n      return;\n    }\n    this._isDirectionInit = true;\n    this.mutationObserver = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.attributeName == 'dir') {\n          this._directionEventDispatcher.fire(null);\n        }\n      });\n    });\n    const options = { attributes: true, attributeFilter: ['dir'] };\n    this.mutationObserver.observe(document.body, options);\n    this.mutationObserver.observe(document.documentElement, options);\n  }\n\n  /**\n   * Provided helper method to determine localized or defaultString for specific string is returned\n   *\n   * @static updateStringsForTag\n   * @param {string} tagName\n   * @param  stringsObj\n   * @returns\n   * @memberof LocalizationHelper\n   */\n  public static updateStringsForTag(tagName: string, stringObj) {\n    tagName = tagName.toLowerCase();\n\n    if (tagName.startsWith('mgt-')) {\n      tagName = tagName.substring(4);\n    }\n\n    if (this._strings && stringObj) {\n      //check for top level strings, applied per component, overridden by specific component def\n      for (let prop of Object.entries(stringObj)) {\n        if (this._strings[prop[0]]) {\n          stringObj[prop[0]] = this._strings[prop[0]];\n        }\n      }\n      //strings defined component specific\n      if (this._strings['_components'] && this._strings['_components'][tagName]) {\n        let strings: any = this._strings['_components'][tagName];\n        for (let key of Object.keys(strings)) {\n          if (stringObj[key]) {\n            stringObj[key] = strings[key];\n          }\n        }\n      }\n    }\n\n    return stringObj;\n  }\n}\n"]}