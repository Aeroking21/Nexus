/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
import { EventDispatcher } from './EventDispatcher';
/**
 * Helper class for Localization
 *
 *
 * @export
 * @class LocalizationHelper
 */
export class LocalizationHelper {
    static get strings() {
        return this._strings;
    }
    /**
     * Set strings to be localized
     *
     * @static
     * @memberof LocalizationHelper
     */
    static set strings(value) {
        this._strings = value;
        this._stringsEventDispatcher.fire(null);
    }
    /**
     * returns body dir attribute to determine rtl or ltr
     *
     * @static
     * @returns {string} dir
     * @memberof LocalizationHelper
     */
    static getDocumentDirection() {
        var _a, _b;
        return ((_a = document.body) === null || _a === void 0 ? void 0 : _a.getAttribute('dir')) || ((_b = document.documentElement) === null || _b === void 0 ? void 0 : _b.getAttribute('dir'));
    }
    /**
     * Fires event when LocalizationHelper changes state
     *
     * @static
     * @param {EventHandler<ProvidersChangedState>} event
     * @memberof LocalizationHelper
     */
    static onStringsUpdated(event) {
        this._stringsEventDispatcher.add(event);
    }
    static removeOnStringsUpdated(event) {
        this._stringsEventDispatcher.remove(event);
    }
    static onDirectionUpdated(event) {
        this._directionEventDispatcher.add(event);
        this.initDirection();
    }
    static removeOnDirectionUpdated(event) {
        this._directionEventDispatcher.remove(event);
    }
    /**
     * Checks for direction setup and adds mutationObserver
     *
     * @private
     * @static
     * @returns
     * @memberof LocalizationHelper
     */
    static initDirection() {
        if (this._isDirectionInit) {
            return;
        }
        this._isDirectionInit = true;
        this.mutationObserver = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.attributeName == 'dir') {
                    this._directionEventDispatcher.fire(null);
                }
            });
        });
        const options = { attributes: true, attributeFilter: ['dir'] };
        this.mutationObserver.observe(document.body, options);
        this.mutationObserver.observe(document.documentElement, options);
    }
    /**
     * Provided helper method to determine localized or defaultString for specific string is returned
     *
     * @static updateStringsForTag
     * @param {string} tagName
     * @param  stringsObj
     * @returns
     * @memberof LocalizationHelper
     */
    static updateStringsForTag(tagName, stringObj) {
        tagName = tagName.toLowerCase();
        if (tagName.startsWith('mgt-')) {
            tagName = tagName.substring(4);
        }
        if (this._strings && stringObj) {
            //check for top level strings, applied per component, overridden by specific component def
            for (let prop of Object.entries(stringObj)) {
                if (this._strings[prop[0]]) {
                    stringObj[prop[0]] = this._strings[prop[0]];
                }
            }
            //strings defined component specific
            if (this._strings['_components'] && this._strings['_components'][tagName]) {
                let strings = this._strings['_components'][tagName];
                for (let key of Object.keys(strings)) {
                    if (stringObj[key]) {
                        stringObj[key] = strings[key];
                    }
                }
            }
        }
        return stringObj;
    }
}
LocalizationHelper._stringsEventDispatcher = new EventDispatcher();
LocalizationHelper._directionEventDispatcher = new EventDispatcher();
LocalizationHelper._isDirectionInit = false;
//# sourceMappingURL=LocalizationHelper.js.map