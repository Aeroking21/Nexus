{"version":3,"file":"SdkVersionMiddleware.js","sourceRoot":"src/","sources":["utils/SdkVersionMiddleware.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAGH,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,oEAAoE,CAAC;AACxH,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AAEjD;;;;;;GAMG;AACH,MAAM,OAAO,oBAAoB;IAS/B,YAAY,cAAsB,EAAE,YAAqB;QACvD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,2CAA2C;IAC9B,OAAO,CAAC,OAAgB;;;YACnC,IAAI;gBACF,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE;oBACvC,IAAI,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;wBACpC,sDAAsD;wBACtD,MAAM,WAAW,GAAa,EAAE,CAAC;wBAEjC,MAAM,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,oBAAoB,CACrE,0BAA0B,CACG,CAAC;wBAEhC,IAAI,gBAAgB,EAAE;4BACpB,MAAM,gBAAgB,GAAW,GAAG,gBAAgB,CAAC,aAAa,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;4BAC7F,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;yBACpC;wBAED,IAAI,IAAI,CAAC,aAAa,EAAE;4BACtB,MAAM,eAAe,GAAW,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;4BAChF,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;yBACnC;wBAED,kBAAkB;wBAClB,MAAM,cAAc,GAAW,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;wBAC7D,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAEjC,mCAAmC;wBACnC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;wBAEnF,gFAAgF;wBAChF,MAAM,qBAAqB,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACrD,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,YAAY,EAAE,qBAAqB,CAAC,CAAC;qBACzF;yBAAM;wBACE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,+CAAE,OAAO,CAAC,YAAY,CAAC,CAAC;qBAChD;iBACF;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,eAAe;aAChB;YACD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;KACpD;IAED;;;;;OAKG;IACI,OAAO,CAAC,IAAgB;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Context, Middleware } from '@microsoft/microsoft-graph-client';\nimport { getRequestHeader, setRequestHeader } from '@microsoft/microsoft-graph-client/lib/es/middleware/MiddlewareUtil';\nimport { ComponentMiddlewareOptions } from './ComponentMiddlewareOptions';\nimport { validateBaseURL } from './GraphHelpers';\n\n/**\n * Implements Middleware for the Graph sdk to inject\n * the toolkit version in the SdkVersion header\n *\n * @class SdkVersionMiddleware\n * @implements {Middleware}\n */\nexport class SdkVersionMiddleware implements Middleware {\n  /**\n   * @private\n   * A member to hold next middleware in the middleware chain\n   */\n  private _nextMiddleware: Middleware;\n  private _packageVersion: string;\n  private _providerName: string;\n\n  constructor(packageVersion: string, providerName?: string) {\n    this._packageVersion = packageVersion;\n    this._providerName = providerName;\n  }\n\n  // tslint:disable-next-line: completed-docs\n  public async execute(context: Context): Promise<void> {\n    try {\n      if (typeof context.request === 'string') {\n        if (validateBaseURL(context.request)) {\n          // Header parts must follow the format: 'name/version'\n          const headerParts: string[] = [];\n\n          const componentOptions = context.middlewareControl.getMiddlewareOptions(\n            ComponentMiddlewareOptions\n          ) as ComponentMiddlewareOptions;\n\n          if (componentOptions) {\n            const componentVersion: string = `${componentOptions.componentName}/${this._packageVersion}`;\n            headerParts.push(componentVersion);\n          }\n\n          if (this._providerName) {\n            const providerVersion: string = `${this._providerName}/${this._packageVersion}`;\n            headerParts.push(providerVersion);\n          }\n\n          // Package version\n          const packageVersion: string = `mgt/${this._packageVersion}`;\n          headerParts.push(packageVersion);\n\n          // Existing SdkVersion header value\n          headerParts.push(getRequestHeader(context.request, context.options, 'SdkVersion'));\n\n          // Join the header parts together and update the SdkVersion request header value\n          const sdkVersionHeaderValue = headerParts.join(', ');\n          setRequestHeader(context.request, context.options, 'SdkVersion', sdkVersionHeaderValue);\n        } else {\n          delete context?.options?.headers['SdkVersion'];\n        }\n      }\n    } catch (error) {\n      // ignore error\n    }\n    return await this._nextMiddleware.execute(context);\n  }\n\n  /**\n   * Handles setting of next middleware\n   *\n   * @param {Middleware} next\n   * @memberof SdkVersionMiddleware\n   */\n  public setNext(next: Middleware): void {\n    this._nextMiddleware = next;\n  }\n}\n"]}