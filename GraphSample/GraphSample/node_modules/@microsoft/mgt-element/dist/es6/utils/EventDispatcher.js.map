{"version":3,"file":"EventDispatcher.js","sourceRoot":"src/","sources":["utils/EventDispatcher.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAOH;;;;;;GAMG;AACH,MAAM,OAAO,eAAe;IAA5B;QACU,kBAAa,GAA2B,EAAE,CAAC;IAsCrD,CAAC;IArCC;;;;;OAKG;IAEI,IAAI,CAAC,KAAQ;QAClB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,aAAa,EAAE;YACxC,OAAO,CAAC,KAAK,CAAC,CAAC;SAChB;IACH,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,YAA6B;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,YAA6B;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClD,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChC,CAAC,EAAE,CAAC;aACL;SACF;IACH,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * An EventHandler for custom events\n */\nexport type EventHandler<E> = (event: E) => void;\n\n/**\n * Provider EventDispatcher\n *\n * @export\n * @class EventDispatcher\n * @template E\n */\nexport class EventDispatcher<E> {\n  private eventHandlers: Array<EventHandler<E>> = [];\n  /**\n   * fires event handler\n   *\n   * @param {E} event\n   * @memberof EventDispatcher\n   */\n\n  public fire(event: E) {\n    for (const handler of this.eventHandlers) {\n      handler(event);\n    }\n  }\n\n  /**\n   * adds eventHandler\n   *\n   * @param {EventHandler<E>} eventHandler\n   * @memberof EventDispatcher\n   */\n  public add(eventHandler: EventHandler<E>) {\n    this.eventHandlers.push(eventHandler);\n  }\n\n  /**\n   * removes eventHandler\n   *\n   * @param {EventHandler<E>} eventHandler\n   * @memberof EventDispatcher\n   */\n  public remove(eventHandler: EventHandler<E>) {\n    for (let i = 0; i < this.eventHandlers.length; i++) {\n      if (this.eventHandlers[i] === eventHandler) {\n        this.eventHandlers.splice(i, 1);\n        i--;\n      }\n    }\n  }\n}\n"]}