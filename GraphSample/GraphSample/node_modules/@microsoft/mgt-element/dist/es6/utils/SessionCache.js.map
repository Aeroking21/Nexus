{"version":3,"file":"SessionCache.js","sourceRoot":"src/","sources":["utils/SessionCache.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH;;;GAGG;AACH,MAAM,OAAO,YAAY;IAGvB;QACE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,KAAa;QAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF;AAED;;;;;GAKG;AACH,MAAM,UAAU,gBAAgB,CAAC,WAAmB;IAClD,IAAI,OAAgB,CAAC;IACrB,IAAI;QACF,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,kBAAkB,CAAC;QAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;KACb;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CACL,CAAC,YAAY,YAAY;YACzB,4BAA4B;YAC5B,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE;gBACZ,UAAU;gBACV,CAAC,CAAC,IAAI,KAAK,IAAI;gBACf,yDAAyD;gBACzD,4BAA4B;gBAC5B,CAAC,CAAC,IAAI,KAAK,oBAAoB;gBAC/B,UAAU;gBACV,CAAC,CAAC,IAAI,KAAK,4BAA4B,CAAC;YAC1C,0EAA0E;YAC1E,OAAO;YACP,OAAO,CAAC,MAAM,KAAK,CAAC,CACrB,CAAC;KACH;AACH,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * Wrapper around the window.sessionStorage API. Use\n * this to set, get and clear session items.\n */\nexport class SessionCache {\n  private session: Storage;\n\n  constructor() {\n    this.session = window.sessionStorage;\n  }\n\n  setItem(key: string, value: string) {\n    this.session.setItem(key, value);\n  }\n\n  getItem(key: string): string {\n    return this.session.getItem(key);\n  }\n\n  clear() {\n    this.session.clear();\n  }\n}\n\n/**\n * Checks if a sessionStorage or a localStorage is available\n * for use in a browser.\n * @param storageType can be 'sessionStorage' or 'localStorage'.\n * @returns true if the storage is available for use.\n */\nexport function storageAvailable(storageType: string): boolean {\n  let storage: Storage;\n  try {\n    storage = window[storageType];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n"]}