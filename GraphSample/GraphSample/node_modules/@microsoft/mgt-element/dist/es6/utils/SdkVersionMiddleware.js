/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getRequestHeader, setRequestHeader } from '@microsoft/microsoft-graph-client/lib/es/middleware/MiddlewareUtil';
import { ComponentMiddlewareOptions } from './ComponentMiddlewareOptions';
import { validateBaseURL } from './GraphHelpers';
/**
 * Implements Middleware for the Graph sdk to inject
 * the toolkit version in the SdkVersion header
 *
 * @class SdkVersionMiddleware
 * @implements {Middleware}
 */
export class SdkVersionMiddleware {
    constructor(packageVersion, providerName) {
        this._packageVersion = packageVersion;
        this._providerName = providerName;
    }
    // tslint:disable-next-line: completed-docs
    execute(context) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (typeof context.request === 'string') {
                    if (validateBaseURL(context.request)) {
                        // Header parts must follow the format: 'name/version'
                        const headerParts = [];
                        const componentOptions = context.middlewareControl.getMiddlewareOptions(ComponentMiddlewareOptions);
                        if (componentOptions) {
                            const componentVersion = `${componentOptions.componentName}/${this._packageVersion}`;
                            headerParts.push(componentVersion);
                        }
                        if (this._providerName) {
                            const providerVersion = `${this._providerName}/${this._packageVersion}`;
                            headerParts.push(providerVersion);
                        }
                        // Package version
                        const packageVersion = `mgt/${this._packageVersion}`;
                        headerParts.push(packageVersion);
                        // Existing SdkVersion header value
                        headerParts.push(getRequestHeader(context.request, context.options, 'SdkVersion'));
                        // Join the header parts together and update the SdkVersion request header value
                        const sdkVersionHeaderValue = headerParts.join(', ');
                        setRequestHeader(context.request, context.options, 'SdkVersion', sdkVersionHeaderValue);
                    }
                    else {
                        (_a = context === null || context === void 0 ? void 0 : context.options) === null || _a === void 0 ? true : delete _a.headers['SdkVersion'];
                    }
                }
            }
            catch (error) {
                // ignore error
            }
            return yield this._nextMiddleware.execute(context);
        });
    }
    /**
     * Handles setting of next middleware
     *
     * @param {Middleware} next
     * @memberof SdkVersionMiddleware
     */
    setNext(next) {
        this._nextMiddleware = next;
    }
}
//# sourceMappingURL=SdkVersionMiddleware.js.map