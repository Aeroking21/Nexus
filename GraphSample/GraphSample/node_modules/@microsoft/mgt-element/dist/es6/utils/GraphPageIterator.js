/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * A helper class to assist in getting multiple pages from a resource
 *
 * @export
 * @class GraphPageIterator
 * @template T
 */
export class GraphPageIterator {
    /**
     * Gets all the items already fetched for this request
     *
     * @readonly
     * @type {T[]}
     * @memberof GraphPageIterator
     */
    get value() {
        return this._value;
    }
    /**
     * Gets wheather this request has more pages
     *
     * @readonly
     * @type {boolean}
     * @memberof GraphPageIterator
     */
    get hasNext() {
        return !!this._nextLink;
    }
    /**
     * Creates a new GraphPageIterator
     *
     * @static
     * @template T - the type of entities expected from this request
     * @param {IGraph} graph - the graph instance to use for making requests
     * @param {GraphRequest} request - the initial request
     * @param {string} [version] - optional version to use for the requests - by default uses the default version
     * from the graph parameter
     * @returns a GraphPageIterator
     * @memberof GraphPageIterator
     */
    static create(graph, request, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield request.get();
            if (response && response.value) {
                const iterator = new GraphPageIterator();
                iterator._graph = graph;
                iterator._value = response.value;
                iterator._nextLink = response['@odata.nextLink'];
                iterator._version = version || graph.version;
                return iterator;
            }
            return null;
        });
    }
    /**
     * Creates a new GraphPageIterator from existing value
     *
     * @static
     * @template T - the type of entities expected from this request
     * @param {IGraph} graph - the graph instance to use for making requests
     * @param value - the existing value
     * @param nextLink - optional nextLink to use to get the next page
     * from the graph parameter
     * @returns a GraphPageIterator
     * @memberof GraphPageIterator
     */
    static createFromValue(graph, value, nextLink) {
        let iterator = new GraphPageIterator();
        // create iterator from values
        iterator._graph = graph;
        iterator._value = value;
        iterator._nextLink = nextLink ? nextLink : null;
        iterator._version = graph.version;
        return iterator || null;
    }
    /**
     * Gets the next page for this request
     *
     * @returns {Promise<T[]>}
     * @memberof GraphPageIterator
     */
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._nextLink) {
                const nextResource = this._nextLink.split(this._version)[1];
                const response = yield this._graph.api(nextResource).version(this._version).get();
                if (response && response.value && response.value.length) {
                    this._value = this._value.concat(response.value);
                    this._nextLink = response['@odata.nextLink'];
                    return response.value;
                }
            }
            return null;
        });
    }
}
//# sourceMappingURL=GraphPageIterator.js.map