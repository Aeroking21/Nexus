{"version":3,"file":"Providers.js","sourceRoot":"src/","sources":["providers/Providers.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAKH,OAAO,EAAE,eAAe,EAAgB,MAAM,0BAA0B,CAAC;AACzE,OAAO,EAAa,aAAa,EAAE,MAAM,aAAa,CAAC;AAEvD;;;;;GAKG;AACH,MAAM,OAAO,SAAS;IACpB;;;;;;OAMG;IACI,MAAM,KAAK,cAAc;QAC9B,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEM,MAAM,KAAK,cAAc,CAAC,QAAmB;QAClD,IAAI,QAAQ,KAAK,IAAI,CAAC,eAAe,EAAE;YACrC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBAChF,IAAI,CAAC,eAAe,CAAC,iCAAiC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;aACzF;YAED,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBACzD,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;aAClE;YAED,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;SACnE;IACH,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,iBAAiB,CAAC,KAA0C;QACxE,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,6BAA6B,CAAC,KAA0C;QACpF,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,sBAAsB,CAAC,KAAwB;QAC3D,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,kCAAkC,CAAC,KAAwB;QACvE,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAO,EAAE;;YACpB,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACb,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC3B,IAAI,MAAM,EAAE;oBACV,IAAI;wBACF,MAAM,QAAQ,GAAS,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;wBACpD,IAAI,QAAQ,IAAI,QAAQ,CAAC,EAAE,EAAE;4BAC3B,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;yBACrB;qBACF;oBAAC,WAAM,GAAE;iBACX;aACF;YAED,OAAO,IAAI,CAAC,GAAG,CAAC;QAClB,CAAC;KAAA;IAED;;;;;;;OAOG;IACI,MAAM,KAAK,MAAM;QACtB,IAAI,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,KAAK,aAAa,CAAC,QAAQ,EAAE;YACzF,OAAO,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IASO,MAAM,CAAC,0BAA0B;QACvC,IAAI,CAAC,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,KAAK,aAAa,CAAC,QAAQ,EAAE;YAC1F,oCAAoC;YACpC,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC;SACtB;QAED,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC9E,CAAC;IAEO,MAAM,CAAC,0BAA0B;QACvC,SAAS,CAAC,+BAA+B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;;AAlBc,0BAAgB,GAA2C,IAAI,eAAe,EAAyB,CAAC;AAExG,yCAA+B,GAAyB,IAAI,eAAe,EAAO,CAAC;AAmBpG;;;;;GAKG;AACH,MAAM,CAAN,IAAY,qBASX;AATD,WAAY,qBAAqB;IAC/B;;OAEG;IACH,uFAAe,CAAA;IACf;;OAEG;IACH,iGAAoB,CAAA;AACtB,CAAC,EATW,qBAAqB,KAArB,qBAAqB,QAShC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { User } from '@microsoft/microsoft-graph-types';\n\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\nimport { IProvider, ProviderState } from './IProvider';\n\n/**\n * Provides implementation for acquiring the necessary access token for calling the Microsoft Graph APIs.\n *\n * @export\n * @class Providers\n */\nexport class Providers {\n  /**\n   * returns the value of provider used globally. All components use this property to get a reference to the provider.\n   *\n   * @static\n   * @type {IProvider}\n   * @memberof Providers\n   */\n  public static get globalProvider(): IProvider {\n    return this._globalProvider;\n  }\n\n  public static set globalProvider(provider: IProvider) {\n    if (provider !== this._globalProvider) {\n      if (this._globalProvider) {\n        this._globalProvider.removeStateChangedHandler(this.handleProviderStateChanged);\n        this._globalProvider.removeActiveAccountChangedHandler(this.handleActiveAccountChanged);\n      }\n\n      if (provider) {\n        provider.onStateChanged(this.handleProviderStateChanged);\n        provider.onActiveAccountChanged(this.handleActiveAccountChanged);\n      }\n\n      this._globalProvider = provider;\n      this._eventDispatcher.fire(ProvidersChangedState.ProviderChanged);\n    }\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onProviderUpdated(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeProviderUpdatedListener(event: EventHandler<ProvidersChangedState>) {\n    this._eventDispatcher.remove(event);\n  }\n\n  /**\n   * Fires event when Provider changes state\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static onActiveAccountChanged(event: EventHandler<any>) {\n    this._activeAccountChangedDispatcher.add(event);\n  }\n\n  /**\n   * Remove event handler\n   *\n   * @static\n   * @param {EventHandler<ProvidersChangedState>} event\n   * @memberof Providers\n   */\n  public static removeActiveAccountChangedListener(event: EventHandler<any>) {\n    this._activeAccountChangedDispatcher.remove(event);\n  }\n\n  /**\n   * Gets the current signed in user\n   *\n   * @static\n   * @memberof Providers\n   */\n  public static async me() {\n    if (!this._me) {\n      const client = this.client;\n      if (client) {\n        try {\n          const response: User = await client.api('me').get();\n          if (response && response.id) {\n            this._me = response;\n          }\n        } catch {}\n      }\n    }\n\n    return this._me;\n  }\n\n  /**\n   * Gets the current graph client\n   *\n   * @readonly\n   * @static\n   * @type {Client}\n   * @memberof Providers\n   */\n  public static get client(): Client {\n    if (Providers.globalProvider && Providers.globalProvider.state === ProviderState.SignedIn) {\n      return Providers.globalProvider.graph.client;\n    }\n    return null;\n  }\n\n  private static _eventDispatcher: EventDispatcher<ProvidersChangedState> = new EventDispatcher<ProvidersChangedState>();\n\n  private static _activeAccountChangedDispatcher: EventDispatcher<any> = new EventDispatcher<any>();\n\n  private static _globalProvider: IProvider;\n  private static _me: User;\n\n  private static handleProviderStateChanged() {\n    if (!Providers.globalProvider || Providers.globalProvider.state !== ProviderState.SignedIn) {\n      // clear current signed in user info\n      Providers._me = null;\n    }\n\n    Providers._eventDispatcher.fire(ProvidersChangedState.ProviderStateChanged);\n  }\n\n  private static handleActiveAccountChanged() {\n    Providers._activeAccountChangedDispatcher.fire(null);\n  }\n}\n\n/**\n * on Provider Change State\n *\n * @export\n * @enum {number}\n */\nexport enum ProvidersChangedState {\n  /**\n   * ProviderChanged = 0\n   */\n  ProviderChanged,\n  /**\n   * ProviderStateChanged = 1\n   */\n  ProviderStateChanged\n}\n"]}