{"version":3,"file":"SimpleProvider.js","sourceRoot":"src/","sources":["providers/SimpleProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAGH,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC;;;;;;GAMG;AACH,MAAM,OAAO,cAAe,SAAQ,SAAS;IAK3C;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,YACE,qBAA4D,EAC5D,YAAkC,EAClC,aAAmC;QAEnC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;QACpD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACI,cAAc,CAAC,OAAuC;QAC3D,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,KAAK;QACV,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;IAC/B,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\nimport { createFromProvider } from '../Graph';\nimport { IProvider } from './IProvider';\n\n/**\n * Facilitates create of new custom provider\n *\n * @export\n * @class SimpleProvider\n * @extends {IProvider}\n */\nexport class SimpleProvider extends IProvider {\n  private _getAccessTokenHandler: (scopes: string[]) => Promise<string>;\n  private _loginHandler: () => Promise<void>;\n  private _logoutHandler: () => Promise<void>;\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtSimpleProvider';\n  }\n\n  constructor(\n    getAccessTokenHandler: (scopes: string[]) => Promise<string>,\n    loginHandler?: () => Promise<void>,\n    logoutHandler?: () => Promise<void>\n  ) {\n    super();\n\n    this._getAccessTokenHandler = getAccessTokenHandler;\n    this._loginHandler = loginHandler;\n    this._logoutHandler = logoutHandler;\n\n    this.graph = createFromProvider(this);\n  }\n\n  /**\n   * Invokes the getAccessToken function\n   *\n   * @param {AuthenticationProviderOptions} [options]\n   * @returns {Promise<string>}\n   * @memberof SimpleProvider\n   */\n  public getAccessToken(options?: AuthenticationProviderOptions): Promise<string> {\n    return this._getAccessTokenHandler(options?.scopes);\n  }\n\n  /**\n   * Invokes login function\n   *\n   * @returns {Promise<void>}\n   * @memberof SimpleProvider\n   */\n  public login(): Promise<void> {\n    return this._loginHandler();\n  }\n\n  /**\n   * Invokes logout function\n   *\n   * @returns {Promise<void>}\n   * @memberof SimpleProvider\n   */\n  public logout(): Promise<void> {\n    return this._logoutHandler();\n  }\n}\n"]}