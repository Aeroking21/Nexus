{"version":3,"file":"IProvider.js","sourceRoot":"src/","sources":["providers/IProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAKH,OAAO,EAAE,eAAe,EAAgB,MAAM,0BAA0B,CAAC;AAEzE;;;;;;;GAOG;AACH,MAAM,OAAgB,SAAS;IA6B7B;;;;;;OAMG;IACH,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,IAAW,4BAA4B;QACrC,OAAO,IAAI,CAAC,6BAA6B,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACH,IAAW,4BAA4B,CAAC,QAAiB;QACvD,IAAI,CAAC,6BAA6B,GAAG,QAAQ,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;QA9DA;;;;;;WAMG;QACO,8BAAyB,GAAY,IAAI,CAAC;QAE5C,4BAAuB,GAAG,IAAI,eAAe,EAAqB,CAAC;QACnE,oCAA+B,GAAG,IAAI,eAAe,EAAwB,CAAC;QAEtF;;;;;;WAMG;QACK,kCAA6B,GAAY,KAAK,CAAC;QA4CrD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACI,QAAQ,CAAC,KAAoB;QAClC,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;YACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACvC;IACH,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,YAA6C;QACjE,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;IACD;;;;;OAKG;IACI,yBAAyB,CAAC,YAA6C;QAC5E,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC;IA0BD;;;;;OAKG;IACI,gBAAgB,CAAE,IAAsB;QAC7C,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACI,sBAAsB,CAAC,YAAgD;QAC5E,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,iCAAiC,CAAC,YAAgD;QACvF,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACK,wBAAwB;QAC9B,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACI,uBAAuB,CAAC,GAAG,MAAgB;QAChD,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACzC,CAAC;CAWF;AAkBD;;;;;GAKG;AACH,MAAM,CAAN,IAAY,SASX;AATD,WAAY,SAAS;IACnB;;OAEG;IACH,2CAAK,CAAA;IACL;;OAEG;IACH,iDAAQ,CAAA;AACV,CAAC,EATW,SAAS,KAAT,SAAS,QASpB;AAED;;;;;GAKG;AACH,MAAM,CAAN,IAAY,aAaX;AAbD,WAAY,aAAa;IACvB;;OAEG;IACH,uDAAO,CAAA;IACP;;OAEG;IACH,2DAAS,CAAA;IACT;;OAEG;IACH,yDAAQ,CAAA;AACV,CAAC,EAbW,aAAa,KAAb,aAAa,QAaxB","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProvider } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProvider';\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\nimport { IGraph } from '../IGraph';\nimport { EventDispatcher, EventHandler } from '../utils/EventDispatcher';\n\n/**\n * Provider Type to be extended for implmenting new providers\n *\n * @export\n * @abstract\n * @class IProvider\n * @implements {AuthenticationProvider}\n */\nexport abstract class IProvider implements AuthenticationProvider {\n  /**\n   * The Graph object that contains the Graph client sdk\n   *\n   * @type {Graph}\n   * @memberof IProvider\n   */\n  public graph: IGraph;\n  /**\n   * Enable/Disable multi account functionality\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  protected isMultipleAccountDisabled: boolean = true;\n  private _state: ProviderState;\n  private _loginChangedDispatcher = new EventDispatcher<LoginChangedEvent>();\n  private _activeAccountChangedDispatcher = new EventDispatcher<ActiveAccountChanged>();\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof IProvider\n   */\n  private _isIncrementalConsentDisabled: boolean = false;\n\n  /**\n   * returns state of Provider\n   *\n   * @readonly\n   * @type {ProviderState}\n   * @memberof IProvider\n   */\n  public get state(): ProviderState {\n    return this._state;\n  }\n\n  /**\n   * Incremental consent setting\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get isIncrementalConsentDisabled(): boolean {\n    return this._isIncrementalConsentDisabled;\n  }\n\n  /**\n   * Enable/Disable incremental consent\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public set isIncrementalConsentDisabled(disabled: boolean) {\n    this._isIncrementalConsentDisabled = disabled;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtIProvider';\n  }\n\n  constructor() {\n    this._state = ProviderState.Loading;\n  }\n\n  /**\n   * sets state of Provider and fires loginchangedDispatcher\n   *\n   * @param {ProviderState} state\n   * @memberof IProvider\n   */\n  public setState(state: ProviderState) {\n    if (state !== this._state) {\n      this._state = state;\n      this._loginChangedDispatcher.fire({});\n    }\n  }\n\n  /**\n   * event handler when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public onStateChanged(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.add(eventHandler);\n  }\n  /**\n   * removes event handler for when login changes\n   *\n   * @param {EventHandler<LoginChangedEvent>} eventHandler\n   * @memberof IProvider\n   */\n  public removeStateChangedHandler(eventHandler: EventHandler<LoginChangedEvent>) {\n    this._loginChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * option implementation that can be called to sign in user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public login?(): Promise<void>;\n\n  /**\n   * optional implementation that can be called to sign out user (required for mgt-login to work)\n   *\n   * @returns {Promise<void>}\n   * @memberof IProvider\n   */\n  public logout?(): Promise<void>;\n\n  /**\n   * Returns all signed in accounts.\n   *\n   * @return {*}  {any[]}\n   * @memberof IProvider\n   */\n  public getAllAccounts?(): IProviderAccount[];\n\n  /**\n   * Switch between two signed in accounts\n   *\n   * @param {*} user\n   * @memberof IProvider\n   */\n  public setActiveAccount?(user: IProviderAccount) {\n    this.fireActiveAccountChanged();\n  }\n\n  /**\n   * Event handler when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public onActiveAccountChanged(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.add(eventHandler);\n  }\n\n  /**\n   * Removes event handler for when Active account changes\n   *\n   * @param {EventHandler<ActiveAccountChanged>} eventHandler\n   * @memberof IProvider\n   */\n  public removeActiveAccountChangedHandler(eventHandler: EventHandler<ActiveAccountChanged>) {\n    this._activeAccountChangedDispatcher.remove(eventHandler);\n  }\n\n  /**\n   * Fires event when active account changes\n   *\n   * @memberof IProvider\n   */\n  private fireActiveAccountChanged() {\n    this._activeAccountChangedDispatcher.fire({});\n  }\n\n  /**\n   * uses scopes to recieve access token\n   *\n   * @param {...string[]} scopes\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public getAccessTokenForScopes(...scopes: string[]): Promise<string> {\n    return this.getAccessToken({ scopes });\n  }\n\n  /**\n   * Promise to receive access token using Provider options\n   *\n   * @abstract\n   * @param {AuthenticationProviderOptions} [options]\n   * @returns {Promise<string>}\n   * @memberof IProvider\n   */\n  public abstract getAccessToken(options?: AuthenticationProviderOptions): Promise<string>;\n}\n\n/**\n * ActiveAccountChanged Event\n *\n * @export\n * @interface ActiveAccountChanged\n */\nexport interface ActiveAccountChanged {}\n/**\n * loginChangedEvent\n *\n * @export\n * @interface LoginChangedEvent\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface LoginChangedEvent {}\n\n/**\n * LoginType\n *\n * @export\n * @enum {number}\n */\nexport enum LoginType {\n  /**\n   * Popup = 0\n   */\n  Popup,\n  /**\n   * Redirect = 1\n   */\n  Redirect\n}\n\n/**\n * ProviderState\n *\n * @export\n * @enum {number}\n */\nexport enum ProviderState {\n  /**\n   * Loading = 0\n   */\n  Loading,\n  /**\n   * SignedOut = 1\n   */\n  SignedOut,\n  /**\n   * SignedIn = 2\n   */\n  SignedIn\n}\n\n/**\n * Account details\n *\n * @export\n */\nexport type IProviderAccount = {\n  username?: string;\n  id: string;\n};\n"]}