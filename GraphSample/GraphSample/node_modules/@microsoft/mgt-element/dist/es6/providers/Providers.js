/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventDispatcher } from '../utils/EventDispatcher';
import { ProviderState } from './IProvider';
/**
 * Provides implementation for acquiring the necessary access token for calling the Microsoft Graph APIs.
 *
 * @export
 * @class Providers
 */
export class Providers {
    /**
     * returns the value of provider used globally. All components use this property to get a reference to the provider.
     *
     * @static
     * @type {IProvider}
     * @memberof Providers
     */
    static get globalProvider() {
        return this._globalProvider;
    }
    static set globalProvider(provider) {
        if (provider !== this._globalProvider) {
            if (this._globalProvider) {
                this._globalProvider.removeStateChangedHandler(this.handleProviderStateChanged);
                this._globalProvider.removeActiveAccountChangedHandler(this.handleActiveAccountChanged);
            }
            if (provider) {
                provider.onStateChanged(this.handleProviderStateChanged);
                provider.onActiveAccountChanged(this.handleActiveAccountChanged);
            }
            this._globalProvider = provider;
            this._eventDispatcher.fire(ProvidersChangedState.ProviderChanged);
        }
    }
    /**
     * Fires event when Provider changes state
     *
     * @static
     * @param {EventHandler<ProvidersChangedState>} event
     * @memberof Providers
     */
    static onProviderUpdated(event) {
        this._eventDispatcher.add(event);
    }
    /**
     * Remove event handler
     *
     * @static
     * @param {EventHandler<ProvidersChangedState>} event
     * @memberof Providers
     */
    static removeProviderUpdatedListener(event) {
        this._eventDispatcher.remove(event);
    }
    /**
     * Fires event when Provider changes state
     *
     * @static
     * @param {EventHandler<ProvidersChangedState>} event
     * @memberof Providers
     */
    static onActiveAccountChanged(event) {
        this._activeAccountChangedDispatcher.add(event);
    }
    /**
     * Remove event handler
     *
     * @static
     * @param {EventHandler<ProvidersChangedState>} event
     * @memberof Providers
     */
    static removeActiveAccountChangedListener(event) {
        this._activeAccountChangedDispatcher.remove(event);
    }
    /**
     * Gets the current signed in user
     *
     * @static
     * @memberof Providers
     */
    static me() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._me) {
                const client = this.client;
                if (client) {
                    try {
                        const response = yield client.api('me').get();
                        if (response && response.id) {
                            this._me = response;
                        }
                    }
                    catch (_a) { }
                }
            }
            return this._me;
        });
    }
    /**
     * Gets the current graph client
     *
     * @readonly
     * @static
     * @type {Client}
     * @memberof Providers
     */
    static get client() {
        if (Providers.globalProvider && Providers.globalProvider.state === ProviderState.SignedIn) {
            return Providers.globalProvider.graph.client;
        }
        return null;
    }
    static handleProviderStateChanged() {
        if (!Providers.globalProvider || Providers.globalProvider.state !== ProviderState.SignedIn) {
            // clear current signed in user info
            Providers._me = null;
        }
        Providers._eventDispatcher.fire(ProvidersChangedState.ProviderStateChanged);
    }
    static handleActiveAccountChanged() {
        Providers._activeAccountChangedDispatcher.fire(null);
    }
}
Providers._eventDispatcher = new EventDispatcher();
Providers._activeAccountChangedDispatcher = new EventDispatcher();
/**
 * on Provider Change State
 *
 * @export
 * @enum {number}
 */
export var ProvidersChangedState;
(function (ProvidersChangedState) {
    /**
     * ProviderChanged = 0
     */
    ProvidersChangedState[ProvidersChangedState["ProviderChanged"] = 0] = "ProviderChanged";
    /**
     * ProviderStateChanged = 1
     */
    ProvidersChangedState[ProvidersChangedState["ProviderStateChanged"] = 1] = "ProviderStateChanged";
})(ProvidersChangedState || (ProvidersChangedState = {}));
//# sourceMappingURL=Providers.js.map