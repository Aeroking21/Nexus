{"version":3,"file":"MockProvider.js","sourceRoot":"src/","sources":["mock/MockProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAClE,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC;;;;;;GAMG;AACH,MAAM,OAAO,YAAa,SAAQ,SAAS;IAUzC,YAAY,WAAoB,KAAK;QACnC,KAAK,EAAE,CAAC;QAPV;;;;WAIG;QACI,UAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QAGjC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;SACxC;IACH,CAAC;IAED;;;;;OAKG;IACU,KAAK;;YAChB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;KAAA;IAED;;;;;OAKG;IACU,MAAM;;YACjB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC;KAAA;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,OAAO,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,iBAAiB,CAAC;IAC3B,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IProvider, ProviderState } from '../providers/IProvider';\nimport { MockGraph } from './MockGraph';\n\n/**\n * Mock Provider access token for Microsoft Graph APIs\n *\n * @export\n * @class MockProvider\n * @extends {IProvider}\n */\nexport class MockProvider extends IProvider {\n  // tslint:disable-next-line: completed-docs\n  public provider: any;\n\n  /**\n   * new instance of mock graph provider\n   *\n   * @memberof MockProvider\n   */\n  public graph = new MockGraph(this);\n  constructor(signedIn: boolean = false) {\n    super();\n    if (signedIn) {\n      this.setState(ProviderState.SignedIn);\n    } else {\n      this.setState(ProviderState.SignedOut);\n    }\n  }\n\n  /**\n   * sets Provider state to SignedIn\n   *\n   * @returns {Promise<void>}\n   * @memberof MockProvider\n   */\n  public async login(): Promise<void> {\n    this.setState(ProviderState.Loading);\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    this.setState(ProviderState.SignedIn);\n  }\n\n  /**\n   * sets Provider state to signed out\n   *\n   * @returns {Promise<void>}\n   * @memberof MockProvider\n   */\n  public async logout(): Promise<void> {\n    this.setState(ProviderState.Loading);\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    this.setState(ProviderState.SignedOut);\n  }\n\n  /**\n   * Promise returning token from graph.microsoft.com\n   *\n   * @returns {Promise<string>}\n   * @memberof MockProvider\n   */\n  public getAccessToken(): Promise<string> {\n    return Promise.resolve('{token:https://graph.microsoft.com/}');\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtMockProvider';\n  }\n}\n"]}