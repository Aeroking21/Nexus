{"version":3,"file":"templatedComponent.js","sourceRoot":"src/","sources":["components/templatedComponent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, property, PropertyValues } from 'lit-element';\n\nimport { equals } from '../utils/equals';\nimport { MgtBaseComponent } from './baseComponent';\nimport { TemplateContext } from '../utils/TemplateContext';\nimport { TemplateHelper } from '../utils/TemplateHelper';\n\n/**\n * Lookup for rendered component templates and contexts by slot name.\n */\ninterface RenderedTemplates {\n  [name: string]: {\n    /**\n     * Reference to the data context used to render the slot.\n     */\n    context: any;\n    /**\n     * Reference to the rendered DOM element corresponding to the slot.\n     */\n    slot: HTMLElement;\n  };\n}\n\n/**\n * An abstract class that defines a templatable web component\n *\n * @export\n * @abstract\n * @class MgtTemplatedComponent\n * @extends {MgtBaseComponent}\n *\n * @fires templateRendered - fires when a template is rendered\n */\nexport abstract class MgtTemplatedComponent extends MgtBaseComponent {\n  /**\n   * Additional data context to be used in template binding\n   * Use this to add event listeners or value converters\n   *\n   * @type {MgtElement.TemplateContext}\n   * @memberof MgtTemplatedComponent\n   */\n  @property({ attribute: false }) public templateContext: TemplateContext;\n\n  /**\n   * Holds all templates defined by developer\n   *\n   * @protected\n   * @memberof MgtTemplatedComponent\n   */\n  protected templates = {};\n\n  private _renderedSlots = false;\n  private _renderedTemplates: RenderedTemplates = {};\n  private _slotNamesAddedDuringRender = [];\n\n  constructor() {\n    super();\n\n    this.templateContext = this.templateContext || {};\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties) {\n    this.templates = this.getTemplates();\n    this._slotNamesAddedDuringRender = [];\n    super.update(changedProperties);\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param changedProperties Map of changed properties with old values\n   */\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    this.removeUnusedSlottedElements();\n  }\n\n  /**\n   * Render a <template> by type and return content to render\n   *\n   * @param templateType type of template (indicated by the data-type attribute)\n   * @param context the data context that should be expanded in template\n   * @param slotName the slot name that will be used to host the new rendered template. set to a unique value if multiple templates of this type will be rendered. default is templateType\n   */\n  protected renderTemplate(templateType: string, context: object, slotName?: string) {\n    if (!this.hasTemplate(templateType)) {\n      return null;\n    }\n\n    slotName = slotName || templateType;\n    this._slotNamesAddedDuringRender.push(slotName);\n    this._renderedSlots = true;\n\n    const template = html`\n      <slot name=${slotName}></slot>\n    `;\n\n    const dataContext = { ...context, ...this.templateContext };\n\n    if (this._renderedTemplates.hasOwnProperty(slotName)) {\n      const { context: existingContext, slot } = this._renderedTemplates[slotName];\n      if (equals(existingContext, dataContext)) {\n        return template;\n      }\n      this.removeChild(slot);\n    }\n\n    const div = document.createElement('div');\n    div.slot = slotName;\n    div.dataset.generated = 'template';\n\n    TemplateHelper.renderTemplate(div, this.templates[templateType], dataContext);\n\n    this.appendChild(div);\n\n    this._renderedTemplates[slotName] = { context: dataContext, slot: div };\n\n    this.fireCustomEvent('templateRendered', { templateType, context: dataContext, element: div });\n\n    return template;\n  }\n\n  /**\n   * Check if a specific template has been provided.\n   *\n   * @protected\n   * @param {string} templateName\n   * @returns {boolean}\n   * @memberof MgtTemplatedComponent\n   */\n  protected hasTemplate(templateName: string): boolean {\n    return this.templates && this.templates[templateName];\n  }\n\n  private getTemplates() {\n    const templates: any = {};\n\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.nodeName === 'TEMPLATE') {\n        const template = child as HTMLElement;\n        if (template.dataset.type) {\n          templates[template.dataset.type] = template;\n        } else {\n          templates.default = template;\n        }\n\n        (template as any).templateOrder = i;\n      }\n    }\n\n    return templates;\n  }\n\n  private removeUnusedSlottedElements() {\n    if (this._renderedSlots) {\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i] as HTMLElement;\n        if (child.dataset && child.dataset.generated && !this._slotNamesAddedDuringRender.includes(child.slot)) {\n          this.removeChild(child);\n          delete this._renderedTemplates[child.slot];\n          i--;\n        }\n      }\n      this._renderedSlots = false;\n    }\n  }\n}\n"]}