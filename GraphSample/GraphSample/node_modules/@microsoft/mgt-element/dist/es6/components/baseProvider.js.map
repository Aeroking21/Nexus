{"version":3,"file":"baseProvider.js","sourceRoot":"src/","sources":["components/baseProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAGnD;;;;;;;GAOG;AACH,MAAM,OAAgB,eAAgB,SAAQ,gBAAgB;IAC5D;;;;OAIG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAW,QAAQ,CAAC,KAAgB;QAClC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACzE;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC9D;IACH,CAAC;IAED;;;;;;OAMG;IACH,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAqBD;;;;;;;;OAQG;IACO,YAAY,CAAC,iBAAiB;QACtC,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAEtC,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC;YAC5C,OAAO,sBAAsB,EAAE;gBAC7B,IAAI,sBAAsB,CAAC,WAAW,EAAE;oBACtC,cAAc,GAAG,IAAI,CAAC;oBACtB,MAAM;iBACP;gBACD,sBAAsB,GAAG,sBAAsB,CAAC,SAAS,CAAC;aAC3D;SACF;QAED,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,EAAE;YACvC,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;IACH,CAAC;IAED;;;;;;OAMG;IACH,qCAAqC;IAC3B,kBAAkB,KAAI,CAAC;IAEzB,mBAAmB;QACzB,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;CACF;AArDC;IAAC,QAAQ,CAAC;QACR,SAAS,EAAE,YAAY;QACvB,SAAS,EAAE,QAAQ,CAAC,EAAE;YACpB,OAAO,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,EAAE,MAAM;KACb,CAAC;8BACgB,eAAe;kDAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { property } from 'lit-element';\nimport { MgtBaseComponent } from './baseComponent';\nimport { IProvider } from '../providers/IProvider';\n\n/**\n * Abstract implementation for provider component\n *\n * @export\n * @abstract\n * @class MgtBaseProvider\n * @extends {MgtBaseComponent}\n */\nexport abstract class MgtBaseProvider extends MgtBaseComponent {\n  /**\n   * The IProvider created by this component\n   *\n   * @memberof MgtBaseProvider\n   */\n  public get provider(): IProvider {\n    return this._provider;\n  }\n\n  public set provider(value: IProvider) {\n    if (this._provider) {\n      this.provider.removeStateChangedHandler(() => this.stateChangedHandler);\n    }\n    this._provider = value;\n    if (this._provider) {\n      this.provider.onStateChanged(() => this.stateChangedHandler);\n    }\n  }\n\n  /**\n   * Gets weather this provider can be used in this environment\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof MgtBaseProvider\n   */\n  public get isAvailable(): boolean {\n    return true;\n  }\n\n  /**\n   * Higher priority provider that should be initialized before attempting\n   * to initialize this provider. This provider will only be initialized\n   * if all higher priority providers are not available.\n   *\n   * @type {MgtBaseProvider}\n   * @memberof MgtBaseProvider\n   */\n  @property({\n    attribute: 'depends-on',\n    converter: newValue => {\n      return document.querySelector(newValue);\n    },\n    type: String\n  })\n  public dependsOn: MgtBaseProvider;\n\n  private _provider: IProvider;\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n\n    let higherPriority = false;\n    if (this.dependsOn) {\n      let higherPriorityProvider = this.dependsOn;\n      while (higherPriorityProvider) {\n        if (higherPriorityProvider.isAvailable) {\n          higherPriority = true;\n          break;\n        }\n        higherPriorityProvider = higherPriorityProvider.dependsOn;\n      }\n    }\n\n    if (!higherPriority && this.isAvailable) {\n      this.initializeProvider();\n    }\n  }\n\n  /**\n   * method called to initialize the provider. Each derived class should provide\n   * their own implementation\n   *\n   * @protected\n   * @memberof MgtBaseProvider\n   */\n  // tslint:disable-next-line: no-empty\n  protected initializeProvider() {}\n\n  private stateChangedHandler() {\n    this.fireCustomEvent('onStateChanged', this.provider.state);\n  }\n}\n"]}