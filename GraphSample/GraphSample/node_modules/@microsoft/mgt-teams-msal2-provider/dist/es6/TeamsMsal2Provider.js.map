{"version":3,"file":"TeamsMsal2Provider.js","sourceRoot":"src/","sources":["TeamsMsal2Provider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { AuthenticationProviderOptions } from '@microsoft/microsoft-graph-client/lib/es/IAuthenticationProviderOptions';\nimport { Configuration, InteractionRequiredAuthError, SilentRequest } from '@azure/msal-browser';\nimport { LoginType, ProviderState, TeamsHelper } from '@microsoft/mgt-element';\nimport { Msal2Provider, PromptType } from '@microsoft/mgt-msal2-provider';\n\n// tslint:disable-next-line: completed-docs\ndeclare global {\n  // tslint:disable-next-line: completed-docs\n  interface Window {\n    // tslint:disable-next-line: completed-docs\n    nativeInterface: any;\n  }\n}\n\n/**\n * Enumeration to define if we are using get or post\n *\n * @export\n * @enum {string}\n */\nexport enum HttpMethod {\n  /**\n   * Will use Get and the querystring\n   */\n  GET = 'GET',\n\n  /**\n   * Will use Post and the request body\n   */\n  POST = 'POST'\n}\n\n/**\n * Interface used to store authentication parameters in session storage\n * between redirects\n *\n * @interface AuthParams\n */\ninterface AuthParams {\n  /**\n   * The app clientId\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  clientId?: string;\n\n  /**\n   * The comma separated scopes\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  scopes?: string;\n\n  /**\n   * The login hint to be used for authentication\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  loginHint?: string;\n\n  /**\n   * Additional Msal configurations options to use\n   * See Msal.js documentation for more details\n   *\n   * @type {Configuration}\n   * @memberof AuthParams\n   */\n  options?: Configuration;\n  /**\n   * The login hint to be used for authentication\n   *\n   * @type {string}\n   * @memberof AuthParams\n   */\n  isConsent?: boolean;\n}\n\n/**\n * Interface to define the configuration when creating a TeamsMsal2Provider\n *\n * @export\n * @interface TeamsMsal2Config\n */\nexport interface TeamsMsal2Config {\n  /**\n   * The app clientId\n   *\n   * @type {string}\n   * @memberof TeamsMsal2Config\n   */\n  clientId: string;\n  /**\n   * The relative or absolute path of the html page that will handle the authentication\n   *\n   * @type {string}\n   * @memberof TeamsMsal2Config\n   */\n  authPopupUrl: string;\n  /**\n   * The scopes to use when authenticating the user\n   *\n   * @type {string[]}\n   * @memberof TeamsMsal2Config\n   */\n  scopes?: string[];\n  /**\n   * Additional Msal configurations options to use\n   * See Msal.js documentation for more details\n   *\n   * @type {Configuration}\n   * @memberof TeamsMsal2Config\n   */\n  msalOptions?: Configuration;\n  /**\n   * The relative or absolute path to the token exchange backend service\n   *\n   * @type {string}\n   * @memberof TeamsMsal2Config\n   */\n  ssoUrl?: string;\n  /**\n   * Should the provider display a consent popup automatically if needed\n   *\n   * @type {string}\n   * @memberof TeamsMsal2Config\n   */\n  autoConsent?: boolean;\n  /**\n   * Should the provider display a consent popup automatically if needed\n   *\n   * @type {AuthMethod}\n   * @memberof TeamsMsal2Config\n   */\n  httpMethod?: HttpMethod;\n}\n\n/**\n * Enables authentication of Single page apps inside of a Microsoft Teams tab\n *\n * @export\n * @class TeamsMsal2Provider\n * @extends {Msal2Provider}\n */\nexport class TeamsMsal2Provider extends Msal2Provider {\n  /**\n   * Gets whether the Teams provider can be used in the current context\n   * (Whether the app is running in Microsoft Teams)\n   *\n   * @readonly\n   * @static\n   * @memberof TeamsMsal2Provider\n   */\n  public static get isAvailable(): boolean {\n    return TeamsHelper.isAvailable;\n  }\n\n  /**\n   * Optional entry point to the teams library\n   * If this value is not set, the provider will attempt to use\n   * the microsoftTeams global variable.\n   *\n   * @static\n   * @memberof TeamsMsal2Provider\n   */\n  public static get microsoftTeamsLib(): any {\n    return TeamsHelper.microsoftTeamsLib;\n  }\n  public static set microsoftTeamsLib(value: any) {\n    TeamsHelper.microsoftTeamsLib = value;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtTeamsMsal2Provider';\n  }\n\n  /**\n   * Handle all authentication redirects in the authentication page and authenticates the user\n   *\n   * @static\n   * @returns\n   * @memberof TeamsMsal2Provider\n   */\n  public static async handleAuth() {\n    // we are in popup world now - authenticate and handle it\n    const teams = TeamsHelper.microsoftTeamsLib;\n    if (!teams) {\n      // tslint:disable-next-line: no-console\n      console.error('Make sure you have referenced the Microsoft Teams sdk before using the TeamsMsal2Provider');\n      return;\n    }\n\n    teams.initialize();\n\n    // if we were signing out before, then we are done\n    if (sessionStorage.getItem(this._sessionStorageLogoutInProgress)) {\n      teams.authentication.notifySuccess();\n    }\n\n    const url = new URL(window.location.href);\n    const isSignOut = url.searchParams.get('signout');\n\n    const paramsString = localStorage.getItem(this._localStorageParametersKey);\n    let authParams: AuthParams;\n\n    if (paramsString) {\n      authParams = JSON.parse(paramsString);\n    } else {\n      authParams = {};\n    }\n\n    if (!authParams.clientId) {\n      teams.authentication.notifyFailure('no clientId provided');\n      return;\n    }\n\n    const scopes = authParams.scopes ? authParams.scopes.split(',') : null;\n    const prompt = authParams.isConsent ? PromptType.CONSENT : PromptType.SELECT_ACCOUNT;\n\n    const options = authParams.options || { auth: { clientId: authParams.clientId } };\n\n    options.system = options.system || {};\n    options.system.loadFrameTimeout = 10000;\n\n    const provider = new Msal2Provider({\n      clientId: authParams.clientId,\n      options,\n      scopes,\n      loginHint: authParams.loginHint,\n      prompt: prompt\n    });\n\n    const handleProviderState = async () => {\n      // how do we handle when user can't sign in\n      // change to promise and return status\n      if (provider.state === ProviderState.SignedOut) {\n        if (isSignOut) {\n          teams.authentication.notifySuccess();\n          return;\n        }\n\n        // make sure we are calling login only once\n        if (!sessionStorage.getItem(this._sessionStorageLoginInProgress)) {\n          const isInIframe = window.parent !== window;\n          if (!isInIframe) {\n            sessionStorage.setItem(this._sessionStorageLoginInProgress, 'true');\n          } else {\n            console.warn(\n              'handleProviderState - Is in iframe... will try to login anyway... but will not set session storage variable'\n            );\n          }\n\n          provider.login();\n        }\n      } else if (provider.state === ProviderState.SignedIn) {\n        if (isSignOut) {\n          sessionStorage.setItem(this._sessionStorageLogoutInProgress, 'true');\n          await provider.logout();\n          return;\n        }\n\n        try {\n          const accessToken = await provider.getAccessTokenForScopes(...provider.scopes);\n          teams.authentication.notifySuccess(accessToken);\n        } catch (e) {\n          teams.authentication.notifyFailure(e);\n        }\n      }\n    };\n\n    provider.onStateChanged(handleProviderState);\n    handleProviderState();\n  }\n\n  protected clientId: string;\n\n  private static _localStorageParametersKey = 'msg-TeamsMsal2Provider-auth-parameters';\n  private static _sessionStorageLoginInProgress = 'msg-TeamsMsal2Provider-login-in-progress';\n  private static _sessionStorageLogoutInProgress = 'msg-TeamsMsal2Provider-logout-in-progress';\n\n  private teamsContext;\n  private _authPopupUrl: string;\n  private _msalOptions: Configuration;\n  private _ssoUrl: string;\n  private _needsConsent: boolean;\n  private _autoConsent: boolean;\n  private _httpMethod: HttpMethod;\n\n  constructor(config: TeamsMsal2Config) {\n    super({\n      clientId: config.clientId,\n      loginType: LoginType.Redirect,\n      options: config.msalOptions,\n      scopes: config.scopes\n    });\n    this.clientId = config.clientId;\n    this._msalOptions = config.msalOptions;\n    this._authPopupUrl = config.authPopupUrl;\n    this._ssoUrl = config.ssoUrl;\n    this._autoConsent = typeof config.autoConsent !== 'undefined' ? config.autoConsent : true;\n    this._httpMethod = typeof config.httpMethod !== 'undefined' ? config.httpMethod : HttpMethod.GET;\n\n    const teams = TeamsHelper.microsoftTeamsLib;\n    teams.initialize();\n\n    // If we are in SSO-mode.\n    if (this._ssoUrl) {\n      this.internalLogin();\n    }\n  }\n\n  /**\n   * Opens the teams authentication popup to the authentication page\n   *\n   * @returns {Promise<void>}\n   * @memberof TeamsMsal2Provider\n   */\n  public async login(): Promise<void> {\n    // In SSO mode the login should not be able to be run via user click\n    // this method is called from the SSO internal login process if we need to consent\n    if (this._ssoUrl && !this._needsConsent) {\n      return;\n    }\n\n    this.setState(ProviderState.Loading);\n    const teams = TeamsHelper.microsoftTeamsLib;\n\n    return new Promise((resolve, reject) => {\n      teams.getContext(context => {\n        this.teamsContext = context;\n\n        const authParams: AuthParams = {\n          clientId: this.clientId,\n          loginHint: context.loginHint,\n          options: this._msalOptions,\n          scopes: this.scopes.join(','),\n          isConsent: this._autoConsent\n        };\n\n        localStorage.setItem(TeamsMsal2Provider._localStorageParametersKey, JSON.stringify(authParams));\n\n        const url = new URL(this._authPopupUrl, new URL(window.location.href));\n\n        teams.authentication.authenticate({\n          failureCallback: reason => {\n            this.setState(ProviderState.SignedOut);\n            reject();\n          },\n          successCallback: result => {\n            // If we are in SSO Mode, the consent has been successful. Consider logged in\n            if (this._ssoUrl) {\n              this.setState(ProviderState.SignedIn);\n              resolve();\n            } else {\n              // Otherwise log in via MSAL\n              this.trySilentSignIn();\n              resolve();\n            }\n          },\n          url: url.href\n        });\n      });\n    });\n  }\n\n  /**\n   * sign out user\n   *\n   * @returns {Promise<void>}\n   * @memberof MsalProvider\n   */\n  public async logout(): Promise<void> {\n    // In SSO mode the logout should not be able to be run at all\n    if (this._ssoUrl) {\n      return;\n    }\n    const teams = TeamsHelper.microsoftTeamsLib;\n\n    return new Promise((resolve, reject) => {\n      teams.getContext(context => {\n        this.teamsContext = context;\n\n        const url = new URL(this._authPopupUrl, new URL(window.location.href));\n        url.searchParams.append('signout', 'true');\n\n        teams.authentication.authenticate({\n          failureCallback: reason => {\n            this.trySilentSignIn();\n            reject();\n          },\n          successCallback: result => {\n            this.trySilentSignIn();\n            resolve();\n          },\n          url: url.href\n        });\n      });\n    });\n  }\n\n  /**\n   * Returns an access token that can be used for making calls to the Microsoft Graph\n   *\n   * @param {AuthenticationProviderOptions} options\n   * @returns {Promise<string>}\n   * @memberof TeamsMsal2Provider\n   */\n  public async getAccessToken(options: AuthenticationProviderOptions): Promise<string> {\n    if (!this.teamsContext && TeamsHelper.microsoftTeamsLib) {\n      const teams = TeamsHelper.microsoftTeamsLib;\n      teams.initialize();\n      this.teamsContext = await this.getTeamsContext();\n    }\n\n    const scopes = options ? options.scopes || this.scopes : this.scopes;\n\n    // If we are in SSO Mode\n    if (this._ssoUrl) {\n      // Get token via the Teams SDK\n      const clientToken = await this.getClientToken();\n\n      let url: URL = new URL(this._ssoUrl, new URL(window.location.href));\n      let response: Response;\n\n      // Use GET and Query String\n      if (this._httpMethod === HttpMethod.GET) {\n        const params = new URLSearchParams({\n          ssoToken: clientToken,\n          scopes: scopes.join(','),\n          clientId: this.clientId\n        });\n\n        response = await fetch(`${url.href}?${params}`, {\n          method: 'GET',\n          mode: 'cors',\n          cache: 'default'\n        });\n      }\n      // Use POST and body\n      else {\n        response = await fetch(url.href, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            authorization: `Bearer ${clientToken}`\n          },\n          body: JSON.stringify({\n            scopes: scopes,\n            clientid: this.clientId\n          }),\n          mode: 'cors',\n          cache: 'default'\n        });\n      }\n\n      // Exchange token from server\n      const data = await response.json().catch(this.unhandledFetchError);\n\n      if (!response.ok && data.error === 'consent_required') {\n        // A consent_required error means the user must consent to the requested scope, or use MFA\n        // If we are in the log in process, display a dialog\n        this._needsConsent = true;\n      } else if (!response.ok) {\n        throw data;\n      } else {\n        this._needsConsent = false;\n        return data.access_token;\n      }\n    }\n    // If we are not in SSO Mode and using the Login component\n    else {\n      return new Promise(async (resolve, reject) => {\n        const accessTokenRequest: SilentRequest = {\n          scopes: scopes,\n          account: this.getAccount()\n        };\n\n        try {\n          const response = await this.publicClientApplication.acquireTokenSilent(accessTokenRequest);\n          // return response.accessToken;\n          resolve(response.accessToken);\n        } catch (e) {\n          if (e instanceof InteractionRequiredAuthError) {\n            // nothing we can do now until we can do incremental consent\n            // return null;\n            resolve(null);\n          } else {\n            // throw e;\n            reject(e);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Makes sure we can get an access token before considered logged in\n   *\n   * @returns {Promise<void>}\n   * @memberof TeamsMsal2Provider\n   */\n  private async internalLogin(): Promise<void> {\n    // Try to get access token\n    const accessToken: string = await this.getAccessToken(null);\n\n    // If we have an access token. Consider the user signed in\n    if (accessToken) {\n      this.setState(ProviderState.SignedIn);\n    } else {\n      // If we need to consent to additional scopes\n      if (this._needsConsent) {\n        // If autoconsent is configured. Display a popup where the user can consent\n        if (this._autoConsent) {\n          // We need to pass the scopes from the client side\n          if (!this.scopes) {\n            throw new Error('For auto consent, scopes must be provided');\n          } else {\n            this.login();\n            return;\n          }\n        } else {\n          throw new Error('Auto consent is not configured. You need to consent to additional scopes');\n        }\n      }\n    }\n  }\n\n  /**\n   * Get a token via the Teams SDK\n   *\n   * @returns {Promise<string>}\n   * @memberof TeamsMsal2Provider\n   */\n  private async getClientToken(): Promise<string> {\n    const teams = TeamsHelper.microsoftTeamsLib;\n    return new Promise((resolve, reject) => {\n      teams.authentication.getAuthToken({\n        successCallback: (result: string) => {\n          resolve(result);\n        },\n        failureCallback: reason => {\n          this.setState(ProviderState.SignedOut);\n          reject();\n        }\n      });\n    });\n  }\n\n  /**\n   * Retrieves the Teams context\n   */\n  private async getTeamsContext() {\n    return new Promise(resolve => {\n      const teams = TeamsHelper.microsoftTeamsLib;\n      teams.initialize();\n      teams.getContext(context => {\n        resolve(context);\n        return;\n      });\n    });\n  }\n\n  private unhandledFetchError(err: any) {\n    console.error(`There was an error during the server side token exchange: ${err}`);\n  }\n}\n"]}