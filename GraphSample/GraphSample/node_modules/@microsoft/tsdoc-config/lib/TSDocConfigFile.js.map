{"version":3,"file":"TSDocConfigFile.js","sourceRoot":"","sources":["../src/TSDocConfigFile.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  TSDocTagDefinition,\r\n  TSDocTagSyntaxKind,\r\n  TSDocConfiguration,\r\n  ParserMessageLog,\r\n  TSDocMessageId,\r\n  ParserMessage,\r\n  TextRange,\r\n  IParserMessageParameters,\r\n} from '@microsoft/tsdoc';\r\nimport * as fs from 'fs';\r\nimport * as resolve from 'resolve';\r\nimport * as path from 'path';\r\nimport Ajv from 'ajv';\r\nimport * as jju from 'jju';\r\n\r\nconst ajv: Ajv.Ajv = new Ajv({ verbose: true });\r\n\r\nfunction initializeSchemaValidator(): Ajv.ValidateFunction {\r\n  const jsonSchemaPath: string = resolve.sync('@microsoft/tsdoc/schemas/tsdoc.schema.json', { basedir: __dirname });\r\n  const jsonSchemaContent: string = fs.readFileSync(jsonSchemaPath).toString();\r\n  const jsonSchema: object = jju.parse(jsonSchemaContent, { mode: 'cjson' });\r\n  return ajv.compile(jsonSchema);\r\n}\r\n\r\n// Warning: AJV has a fairly strange API.  Each time this function is called, the function  object's\r\n// properties get overwritten with the results of the latest validation.  Thus we need to be careful\r\n// to read the properties before a subsequent call may occur.\r\nconst tsdocSchemaValidator: Ajv.ValidateFunction = initializeSchemaValidator();\r\n\r\ninterface ITagConfigJson {\r\n  tagName: string;\r\n  syntaxKind: 'inline' | 'block' | 'modifier';\r\n  allowMultiple?: boolean;\r\n}\r\n\r\ninterface IConfigJson {\r\n  $schema: string;\r\n  tsdocVersion: string;\r\n  extends?: string[];\r\n  tagDefinitions: ITagConfigJson[];\r\n}\r\n\r\n/**\r\n * Represents an individual `tsdoc.json` file.\r\n *\r\n * @public\r\n */\r\nexport class TSDocConfigFile {\r\n  public static readonly FILENAME: string = 'tsdoc.json';\r\n  public static readonly CURRENT_SCHEMA_URL: string =\r\n    'https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json';\r\n\r\n  /**\r\n   * A queryable log that reports warnings and error messages that occurred during parsing.\r\n   */\r\n  public readonly log: ParserMessageLog;\r\n\r\n  private readonly _extendsFiles: TSDocConfigFile[];\r\n  private _filePath: string;\r\n  private _fileNotFound: boolean;\r\n  private _fileMTime: number;\r\n  private _hasErrors: boolean;\r\n  private _tsdocSchema: string;\r\n  private readonly _extendsPaths: string[];\r\n  private readonly _tagDefinitions: TSDocTagDefinition[];\r\n\r\n  private constructor() {\r\n    this.log = new ParserMessageLog();\r\n\r\n    this._extendsFiles = [];\r\n    this._filePath = '';\r\n    this._fileNotFound = true;\r\n    this._hasErrors = false;\r\n    this._fileMTime = 0;\r\n    this._tsdocSchema = '';\r\n    this._extendsPaths = [];\r\n    this._tagDefinitions = [];\r\n  }\r\n\r\n  /**\r\n   * Other config files that this file extends from.\r\n   */\r\n  public get extendsFiles(): ReadonlyArray<TSDocConfigFile> {\r\n    return this._extendsFiles;\r\n  }\r\n\r\n  /**\r\n   * The full path of the file that was attempted to load.\r\n   */\r\n  public get filePath(): string {\r\n    return this._filePath;\r\n  }\r\n\r\n  /**\r\n   * If true, then the TSDocConfigFile object contains an empty state, because the `tsdoc.json` file could\r\n   * not be found by the loader.\r\n   */\r\n  public get fileNotFound(): boolean {\r\n    return this._fileNotFound;\r\n  }\r\n\r\n  /**\r\n   * If true, then at least one error was encountered while loading this file or one of its \"extends\" files.\r\n   *\r\n   * @remarks\r\n   * You can use {@link TSDocConfigFile.getErrorSummary} to report these errors.\r\n   *\r\n   * The individual messages can be retrieved from the {@link TSDocConfigFile.log} property of each `TSDocConfigFile`\r\n   * object (including the {@link TSDocConfigFile.extendsFiles} tree).\r\n   */\r\n  public get hasErrors(): boolean {\r\n    return this._hasErrors;\r\n  }\r\n\r\n  /**\r\n   * The `$schema` field from the `tsdoc.json` file.\r\n   */\r\n  public get tsdocSchema(): string {\r\n    return this._tsdocSchema;\r\n  }\r\n\r\n  /**\r\n   * The `extends` field from the `tsdoc.json` file.  For the parsed file contents,\r\n   * use the `extendsFiles` property instead.\r\n   */\r\n  public get extendsPaths(): ReadonlyArray<string> {\r\n    return this._extendsPaths;\r\n  }\r\n\r\n  public get tagDefinitions(): ReadonlyArray<TSDocTagDefinition> {\r\n    return this._tagDefinitions;\r\n  }\r\n\r\n  /**\r\n   * This can be used for cache eviction.  It returns true if the modification timestamp has changed for\r\n   * any of the files that were read when loading this `TSDocConfigFile`, which indicates that the file should be\r\n   * reloaded.  It does not consider cases where `TSDocConfigFile.fileNotFound` was `true`.\r\n   *\r\n   * @remarks\r\n   * This can be used for cache eviction.  An example eviction strategy might be like this:\r\n   *\r\n   * - call `checkForModifiedFiles()` once per second, and reload the configuration if it returns true\r\n   *\r\n   * - otherwise, reload the configuration when it is more than 10 seconds old (to handle less common cases such\r\n   *   as creation of a missing file, or creation of a file at an earlier location in the search path).\r\n   */\r\n  public checkForModifiedFiles(): boolean {\r\n    if (this._checkForModifiedFile()) {\r\n      return true;\r\n    }\r\n    for (const extendsFile of this.extendsFiles) {\r\n      if (extendsFile.checkForModifiedFiles()) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks the last modification time for `TSDocConfigFile.filePath` and returns `true` if it has changed\r\n   * since the file was loaded.  If the file is missing, this returns `false`.  If the timestamp cannot be read,\r\n   * then this returns `true`.\r\n   */\r\n  private _checkForModifiedFile(): boolean {\r\n    if (this._fileNotFound || !this._filePath) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const mtimeMs: number = fs.statSync(this._filePath).mtimeMs;\r\n      return mtimeMs !== this._fileMTime;\r\n    } catch (error) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private _reportError(parserMessageParameters: IParserMessageParameters): void {\r\n    this.log.addMessage(new ParserMessage(parserMessageParameters));\r\n    this._hasErrors = true;\r\n  }\r\n\r\n  private _loadJsonFile(): void {\r\n    const configJsonContent: string = fs.readFileSync(this._filePath).toString();\r\n    this._fileMTime = fs.statSync(this._filePath).mtimeMs;\r\n    this._fileNotFound = false;\r\n\r\n    const configJson: IConfigJson = jju.parse(configJsonContent, { mode: 'cjson' });\r\n\r\n    if (configJson.$schema !== TSDocConfigFile.CURRENT_SCHEMA_URL) {\r\n      this._reportError({\r\n        messageId: TSDocMessageId.ConfigFileUnsupportedSchema,\r\n        messageText: `Unsupported JSON \"$schema\" value; expecting \"${TSDocConfigFile.CURRENT_SCHEMA_URL}\"`,\r\n        textRange: TextRange.empty,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const success: boolean = tsdocSchemaValidator(configJson) as boolean;\r\n\r\n    if (!success) {\r\n      const description: string = ajv.errorsText(tsdocSchemaValidator.errors);\r\n\r\n      this._reportError({\r\n        messageId: TSDocMessageId.ConfigFileSchemaError,\r\n        messageText: 'Error loading config file: ' + description,\r\n        textRange: TextRange.empty,\r\n      });\r\n      return;\r\n    }\r\n\r\n    this._tsdocSchema = configJson.$schema;\r\n    if (configJson.extends) {\r\n      this._extendsPaths.push(...configJson.extends);\r\n    }\r\n\r\n    for (const jsonTagDefinition of configJson.tagDefinitions || []) {\r\n      let syntaxKind: TSDocTagSyntaxKind;\r\n      switch (jsonTagDefinition.syntaxKind) {\r\n        case 'inline':\r\n          syntaxKind = TSDocTagSyntaxKind.InlineTag;\r\n          break;\r\n        case 'block':\r\n          syntaxKind = TSDocTagSyntaxKind.BlockTag;\r\n          break;\r\n        case 'modifier':\r\n          syntaxKind = TSDocTagSyntaxKind.ModifierTag;\r\n          break;\r\n        default:\r\n          // The JSON schema should have caught this error\r\n          throw new Error('Unexpected tag kind');\r\n      }\r\n      this._tagDefinitions.push(\r\n        new TSDocTagDefinition({\r\n          tagName: jsonTagDefinition.tagName,\r\n          syntaxKind: syntaxKind,\r\n          allowMultiple: jsonTagDefinition.allowMultiple,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private _loadWithExtends(\r\n    configFilePath: string,\r\n    referencingConfigFile: TSDocConfigFile | undefined,\r\n    alreadyVisitedPaths: Set<string>\r\n  ): void {\r\n    if (!configFilePath) {\r\n      this._reportError({\r\n        messageId: TSDocMessageId.ConfigFileNotFound,\r\n        messageText: 'File not found',\r\n        textRange: TextRange.empty,\r\n      });\r\n      return;\r\n    }\r\n\r\n    this._filePath = path.resolve(configFilePath);\r\n\r\n    if (!fs.existsSync(this._filePath)) {\r\n      this._reportError({\r\n        messageId: TSDocMessageId.ConfigFileNotFound,\r\n        messageText: 'File not found',\r\n        textRange: TextRange.empty,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const hashKey: string = fs.realpathSync(this._filePath);\r\n    if (referencingConfigFile && alreadyVisitedPaths.has(hashKey)) {\r\n      this._reportError({\r\n        messageId: TSDocMessageId.ConfigFileCyclicExtends,\r\n        messageText: `Circular reference encountered for \"extends\" field of \"${referencingConfigFile.filePath}\"`,\r\n        textRange: TextRange.empty,\r\n      });\r\n      return;\r\n    }\r\n    alreadyVisitedPaths.add(hashKey);\r\n\r\n    this._loadJsonFile();\r\n\r\n    const configFileFolder: string = path.dirname(this.filePath);\r\n\r\n    for (const extendsField of this.extendsPaths) {\r\n      const resolvedExtendsPath: string = resolve.sync(extendsField, { basedir: configFileFolder });\r\n\r\n      const baseConfigFile: TSDocConfigFile = new TSDocConfigFile();\r\n\r\n      baseConfigFile._loadWithExtends(resolvedExtendsPath, this, alreadyVisitedPaths);\r\n\r\n      if (baseConfigFile.fileNotFound) {\r\n        this._reportError({\r\n          messageId: TSDocMessageId.ConfigFileUnresolvedExtends,\r\n          messageText: `Unable to resolve \"extends\" reference to \"${extendsField}\"`,\r\n          textRange: TextRange.empty,\r\n        });\r\n      }\r\n\r\n      this._extendsFiles.push(baseConfigFile);\r\n\r\n      if (baseConfigFile.hasErrors) {\r\n        this._hasErrors = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For the given folder, look for the relevant tsdoc.json file (if any), and return its path.\r\n   *\r\n   * @param folderPath - the path to a folder where the search should start\r\n   * @returns the (possibly relative) path to tsdoc.json, or an empty string if not found\r\n   */\r\n  public static findConfigPathForFolder(folderPath: string): string {\r\n    if (folderPath) {\r\n      let foundFolder: string = folderPath;\r\n      for (;;) {\r\n        const tsconfigJsonPath: string = path.join(foundFolder, 'tsconfig.json');\r\n        if (fs.existsSync(tsconfigJsonPath)) {\r\n          // Stop when we reach a folder containing tsconfig.json\r\n          return path.join(foundFolder, TSDocConfigFile.FILENAME);\r\n        }\r\n        const packageJsonPath: string = path.join(foundFolder, 'package.json');\r\n        if (fs.existsSync(packageJsonPath)) {\r\n          // Stop when we reach a folder containing package.json; this avoids crawling out of the current package\r\n          return path.join(foundFolder, TSDocConfigFile.FILENAME);\r\n        }\r\n\r\n        const previousFolder: string = foundFolder;\r\n        foundFolder = path.dirname(foundFolder);\r\n\r\n        if (!foundFolder || foundFolder === previousFolder) {\r\n          // Give up if we reach the filesystem root directory\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Calls `TSDocConfigFile.findConfigPathForFolder()` to find the relevant tsdoc.json config file, if one exists.\r\n   * Then calls `TSDocConfigFile.findConfigPathForFolder()` to return the loaded result.\r\n   * @param folderPath - the path to a folder where the search should start\r\n   */\r\n  public static loadForFolder(folderPath: string): TSDocConfigFile {\r\n    const rootConfigPath: string = TSDocConfigFile.findConfigPathForFolder(folderPath);\r\n    return TSDocConfigFile.loadFile(rootConfigPath);\r\n  }\r\n\r\n  /**\r\n   * Loads the specified tsdoc.json and any base files that it refers to using the \"extends\" option.\r\n   * @param tsdocJsonFilePath - the path to the tsdoc.json config file\r\n   */\r\n  public static loadFile(tsdocJsonFilePath: string): TSDocConfigFile {\r\n    const configFile: TSDocConfigFile = new TSDocConfigFile();\r\n    const alreadyVisitedPaths: Set<string> = new Set<string>();\r\n    configFile._loadWithExtends(tsdocJsonFilePath, undefined, alreadyVisitedPaths);\r\n    return configFile;\r\n  }\r\n\r\n  /**\r\n   * Returns a report of any errors that occurred while attempting to load this file or any files\r\n   * referenced via the \"extends\" field.\r\n   *\r\n   * @remarks\r\n   * Use {@link TSDocConfigFile.hasErrors} to determine whether any errors occurred.\r\n   */\r\n  public getErrorSummary(): string {\r\n    if (!this._hasErrors) {\r\n      return 'No errors.';\r\n    }\r\n\r\n    let result: string = `Errors encountered for ${this.filePath}:\\n`;\r\n\r\n    for (const message of this.log.messages) {\r\n      result += `  ${message.text}\\n`;\r\n    }\r\n\r\n    for (const extendsFile of this.extendsFiles) {\r\n      if (extendsFile.hasErrors) {\r\n        result += extendsFile.getErrorSummary();\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Applies the settings from this config file to a TSDoc parser configuration.\r\n   * Any `extendsFile` settings will also applied.\r\n   */\r\n  public configureParser(configuration: TSDocConfiguration): void {\r\n    // First apply the base config files\r\n    for (const extendsFile of this.extendsFiles) {\r\n      extendsFile.configureParser(configuration);\r\n    }\r\n\r\n    // Then apply this one\r\n    for (const tagDefinition of this.tagDefinitions) {\r\n      configuration.addTagDefinition(tagDefinition);\r\n    }\r\n  }\r\n}\r\n"]}