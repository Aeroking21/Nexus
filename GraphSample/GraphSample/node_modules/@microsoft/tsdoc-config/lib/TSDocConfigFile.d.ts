import { TSDocTagDefinition, TSDocConfiguration, ParserMessageLog } from '@microsoft/tsdoc';
/**
 * Represents an individual `tsdoc.json` file.
 *
 * @public
 */
export declare class TSDocConfigFile {
    static readonly FILENAME: string;
    static readonly CURRENT_SCHEMA_URL: string;
    /**
     * A queryable log that reports warnings and error messages that occurred during parsing.
     */
    readonly log: ParserMessageLog;
    private readonly _extendsFiles;
    private _filePath;
    private _fileNotFound;
    private _fileMTime;
    private _hasErrors;
    private _tsdocSchema;
    private readonly _extendsPaths;
    private readonly _tagDefinitions;
    private constructor();
    /**
     * Other config files that this file extends from.
     */
    get extendsFiles(): ReadonlyArray<TSDocConfigFile>;
    /**
     * The full path of the file that was attempted to load.
     */
    get filePath(): string;
    /**
     * If true, then the TSDocConfigFile object contains an empty state, because the `tsdoc.json` file could
     * not be found by the loader.
     */
    get fileNotFound(): boolean;
    /**
     * If true, then at least one error was encountered while loading this file or one of its "extends" files.
     *
     * @remarks
     * You can use {@link TSDocConfigFile.getErrorSummary} to report these errors.
     *
     * The individual messages can be retrieved from the {@link TSDocConfigFile.log} property of each `TSDocConfigFile`
     * object (including the {@link TSDocConfigFile.extendsFiles} tree).
     */
    get hasErrors(): boolean;
    /**
     * The `$schema` field from the `tsdoc.json` file.
     */
    get tsdocSchema(): string;
    /**
     * The `extends` field from the `tsdoc.json` file.  For the parsed file contents,
     * use the `extendsFiles` property instead.
     */
    get extendsPaths(): ReadonlyArray<string>;
    get tagDefinitions(): ReadonlyArray<TSDocTagDefinition>;
    /**
     * This can be used for cache eviction.  It returns true if the modification timestamp has changed for
     * any of the files that were read when loading this `TSDocConfigFile`, which indicates that the file should be
     * reloaded.  It does not consider cases where `TSDocConfigFile.fileNotFound` was `true`.
     *
     * @remarks
     * This can be used for cache eviction.  An example eviction strategy might be like this:
     *
     * - call `checkForModifiedFiles()` once per second, and reload the configuration if it returns true
     *
     * - otherwise, reload the configuration when it is more than 10 seconds old (to handle less common cases such
     *   as creation of a missing file, or creation of a file at an earlier location in the search path).
     */
    checkForModifiedFiles(): boolean;
    /**
     * Checks the last modification time for `TSDocConfigFile.filePath` and returns `true` if it has changed
     * since the file was loaded.  If the file is missing, this returns `false`.  If the timestamp cannot be read,
     * then this returns `true`.
     */
    private _checkForModifiedFile;
    private _reportError;
    private _loadJsonFile;
    private _loadWithExtends;
    /**
     * For the given folder, look for the relevant tsdoc.json file (if any), and return its path.
     *
     * @param folderPath - the path to a folder where the search should start
     * @returns the (possibly relative) path to tsdoc.json, or an empty string if not found
     */
    static findConfigPathForFolder(folderPath: string): string;
    /**
     * Calls `TSDocConfigFile.findConfigPathForFolder()` to find the relevant tsdoc.json config file, if one exists.
     * Then calls `TSDocConfigFile.findConfigPathForFolder()` to return the loaded result.
     * @param folderPath - the path to a folder where the search should start
     */
    static loadForFolder(folderPath: string): TSDocConfigFile;
    /**
     * Loads the specified tsdoc.json and any base files that it refers to using the "extends" option.
     * @param tsdocJsonFilePath - the path to the tsdoc.json config file
     */
    static loadFile(tsdocJsonFilePath: string): TSDocConfigFile;
    /**
     * Returns a report of any errors that occurred while attempting to load this file or any files
     * referenced via the "extends" field.
     *
     * @remarks
     * Use {@link TSDocConfigFile.hasErrors} to determine whether any errors occurred.
     */
    getErrorSummary(): string;
    /**
     * Applies the settings from this config file to a TSDoc parser configuration.
     * Any `extendsFile` settings will also applied.
     */
    configureParser(configuration: TSDocConfiguration): void;
}
//# sourceMappingURL=TSDocConfigFile.d.ts.map