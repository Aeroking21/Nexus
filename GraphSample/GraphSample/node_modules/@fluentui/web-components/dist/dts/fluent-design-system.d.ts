import { Direction } from '@microsoft/fast-web-utilities';
export declare type DesignSystemResolver<T, Y = DesignSystem> = (d: Y) => T;
export declare type DensityOffset = -3 | -2 | -1 | 0 | 1 | 2 | 3;
/**
 * Defines the properties in the FAST Design System
 * @public
 */
export interface DesignSystem {
    /**
     * Type-ramp font-size and line-height values
     */
    typeRampMinus2FontSize: string;
    typeRampMinus2LineHeight: string;
    typeRampMinus1FontSize: string;
    typeRampMinus1LineHeight: string;
    typeRampBaseFontSize: string;
    typeRampBaseLineHeight: string;
    typeRampPlus1FontSize: string;
    typeRampPlus1LineHeight: string;
    typeRampPlus2FontSize: string;
    typeRampPlus2LineHeight: string;
    typeRampPlus3FontSize: string;
    typeRampPlus3LineHeight: string;
    typeRampPlus4FontSize: string;
    typeRampPlus4LineHeight: string;
    typeRampPlus5FontSize: string;
    typeRampPlus5LineHeight: string;
    typeRampPlus6FontSize: string;
    typeRampPlus6LineHeight: string;
    /**
     * The background color of the current context.
     * May be used to draw an actual background or not. Color recipes evaluated within this context will use this as their basis.
     */
    backgroundColor: string;
    /**
     * The neutral color, which the neutral palette is based on.
     * Keep this value in sync with neutralPalette.
     */
    neutralBaseColor: string;
    /**
     * The accent color, which the accent palette is based on.
     * Keep this value in sync with accentPalette.
     */
    accentBaseColor: string;
    /**
     * An array of colors in a ramp from light to dark, used to look up values for neutral color recipes.
     * Keep this value in sync with neutralBaseColor.
     * Generate by calling createColorPalette.
     */
    neutralPalette: string[];
    /**
     * An array of colors in a ramp from light to dark, used to lookup values for accent color recipes.
     * Keep this value in sync with accentBaseColor.
     * Generate by calling createColorPalette.
     */
    accentPalette: string[];
    /**
     * The density offset, used with designUnit to calculate height and spacing.
     */
    density: number;
    /**
     * The grid-unit that UI dimensions are derived from in pixels.
     */
    designUnit: number;
    /**
     * The primary document direction.
     */
    direction: Direction;
    /**
     * The number of designUnits used for component height at the base density.
     */
    baseHeightMultiplier: number;
    /**
     * The number of designUnits used for horizontal spacing at the base density.
     */
    baseHorizontalSpacingMultiplier: number;
    /**
     * The corner radius applied to controls.
     */
    cornerRadius: number;
    /**
     * The corner radius applied to elevated surfaces or controls.
     */
    elevatedCornerRadius?: number;
    /**
     * The width of the standard outline applied to outline components in pixels.
     */
    outlineWidth: number;
    /**
     * The width of the standard focus outline in pixels.
     */
    focusOutlineWidth: number;
    /**
     * The opacity of a disabled control.
     */
    disabledOpacity: number;
    /**
     * Color swatch deltas for the accent-fill recipe.
     */
    accentFillRestDelta: number;
    accentFillHoverDelta: number;
    accentFillActiveDelta: number;
    accentFillFocusDelta: number;
    accentFillSelectedDelta: number;
    /**
     * Color swatch deltas for the accent-foreground recipe.
     */
    accentForegroundRestDelta: number;
    accentForegroundHoverDelta: number;
    accentForegroundActiveDelta: number;
    accentForegroundFocusDelta: number;
    neutralFillRestDelta: number;
    neutralFillHoverDelta: number;
    neutralFillActiveDelta: number;
    neutralFillFocusDelta: number;
    neutralFillSelectedDelta: number;
    /**
     * Color swatch deltas for the neutral-fill-input recipe.
     */
    neutralFillInputRestDelta: number;
    neutralFillInputHoverDelta: number;
    neutralFillInputActiveDelta: number;
    neutralFillInputFocusDelta: number;
    neutralFillInputSelectedDelta: number;
    /**
     * Color swatch deltas for the neutral-fill-stealth recipe.
     */
    neutralFillStealthRestDelta: number;
    neutralFillStealthHoverDelta: number;
    neutralFillStealthActiveDelta: number;
    neutralFillStealthFocusDelta: number;
    neutralFillStealthSelectedDelta: number;
    /**
     * Configuration for the neutral-fill-toggle recipe.
     */
    neutralFillToggleHoverDelta: number;
    neutralFillToggleActiveDelta: number;
    neutralFillToggleFocusDelta: number;
    /**
     * The luminance value to base layer recipes on.
     * Sets the luminance value for the L1 layer recipe in a manner that can adjust to variable contrast.
     *
     * Currently defaults to -1 to turn the feature off and use backgroundColor for layer colors instead.
     */
    baseLayerLuminance: number;
    /**
     * Color swatch deltas for the neutral-fill-card recipe.
     */
    neutralFillCardDelta: number;
    /**
     * Color swatch delta for neutral-foreground recipe.
     */
    neutralForegroundHoverDelta: number;
    neutralForegroundActiveDelta: number;
    neutralForegroundFocusDelta: number;
    /**
     * Color swatch delta for the neutral-divider recipe.
     */
    neutralDividerRestDelta: number;
    /**
     * Color swatch deltas for the neutral-outline recipe.
     */
    neutralOutlineRestDelta: number;
    neutralOutlineHoverDelta: number;
    neutralOutlineActiveDelta: number;
    neutralOutlineFocusDelta: number;
    neutralContrastFillRestDelta: number;
    neutralContrastFillHoverDelta: number;
    neutralContrastFillActiveDelta: number;
    neutralContrastFillFocusDelta: number;
}
/**
 * The default values for {@link DesignSystem}
 * @public
 */
export declare const DesignSystemDefaults: DesignSystem;
/**
 * Returns the argument if basic, otherwise calls the DesignSystemResolver function.
 *
 * @param arg A value or a DesignSystemResolver function
 * @param designSystem The design system config.
 */
export declare function evaluateDesignSystemResolver<T>(arg: T | DesignSystemResolver<T>, designSystem: DesignSystem): T;
/**
 * Safely retrieves the value from a key of the DesignSystem.
 */
export declare function getDesignSystemValue<T extends DesignSystem, K extends keyof T>(key: K): (designSystem?: T) => T[K];
/**
 * Retrieve the backgroundColor when invoked with a DesignSystem
 */
export declare const backgroundColor: DesignSystemResolver<string>;
/**
 * Retrieve the neutralBaseColor when invoked with a DesignSystem
 */
export declare const neutralBaseColor: DesignSystemResolver<string>;
/**
 * Retrieve the accentBaseColor when invoked with a DesignSystem
 */
export declare const accentBaseColor: DesignSystemResolver<string>;
/**
 * Retrieve the cornerRadius when invoked with a DesignSystem
 */
export declare const cornerRadius: DesignSystemResolver<number>;
/**
 * Retrieve the neutral palette from the design system
 */
export declare const neutralPalette: DesignSystemResolver<string[]>;
/**
 * Retrieve the accent palette from the design system
 */
export declare const accentPalette: DesignSystemResolver<string[]>;
/**
 * Retrieve the designUnit from the design system
 */
export declare const designUnit: DesignSystemResolver<number>;
/**
 * Retrieve the baseHeightMultiplier from the design system
 */
export declare const baseHeightMultiplier: DesignSystemResolver<number>;
/**
 * Retrieve the baseHorizontalSpacingMultiplier from the design system
 */
export declare const baseHorizontalSpacingMultiplier: DesignSystemResolver<number>;
/**
 * Retrieve the outlineWidth from the design system
 */
export declare const outlineWidth: DesignSystemResolver<number>;
/**
 * Retrieve the focusOutlineWidth from the design system
 */
export declare const focusOutlineWidth: DesignSystemResolver<number>;
/**
 * Retrieve the disabledOpacity from the design system
 */
export declare const disabledOpacity: DesignSystemResolver<number>;
/**
 * Retrieve the disabledOpacity from the design system
 */
export declare const direction: DesignSystemResolver<Direction>;
export declare const accentFillRestDelta: DesignSystemResolver<number>;
export declare const accentFillHoverDelta: DesignSystemResolver<number>;
export declare const accentFillActiveDelta: DesignSystemResolver<number>;
export declare const accentFillFocusDelta: DesignSystemResolver<number>;
export declare const accentFillSelectedDelta: DesignSystemResolver<number>;
export declare const accentForegroundRestDelta: DesignSystemResolver<number>;
export declare const accentForegroundHoverDelta: DesignSystemResolver<number>;
export declare const accentForegroundActiveDelta: DesignSystemResolver<number>;
export declare const accentForegroundFocusDelta: DesignSystemResolver<number>;
export declare const neutralFillRestDelta: DesignSystemResolver<number>;
export declare const neutralFillHoverDelta: DesignSystemResolver<number>;
export declare const neutralFillActiveDelta: DesignSystemResolver<number>;
export declare const neutralFillFocusDelta: DesignSystemResolver<number>;
export declare const neutralFillSelectedDelta: DesignSystemResolver<number>;
export declare const neutralFillInputRestDelta: DesignSystemResolver<number>;
export declare const neutralFillInputHoverDelta: DesignSystemResolver<number>;
export declare const neutralFillInputActiveDelta: DesignSystemResolver<number>;
export declare const neutralFillInputFocusDelta: DesignSystemResolver<number>;
export declare const neutralFillInputSelectedDelta: DesignSystemResolver<number>;
export declare const neutralFillStealthRestDelta: DesignSystemResolver<number>;
export declare const neutralFillStealthHoverDelta: DesignSystemResolver<number>;
export declare const neutralFillStealthActiveDelta: DesignSystemResolver<number>;
export declare const neutralFillStealthFocusDelta: DesignSystemResolver<number>;
export declare const neutralFillStealthSelectedDelta: DesignSystemResolver<number>;
export declare const neutralFillToggleHoverDelta: DesignSystemResolver<number>;
export declare const neutralFillToggleActiveDelta: DesignSystemResolver<number>;
export declare const neutralFillToggleFocusDelta: DesignSystemResolver<number>;
export declare const baseLayerLuminance: DesignSystemResolver<number>;
export declare const neutralFillCardDelta: DesignSystemResolver<number>;
export declare const neutralForegroundHoverDelta: DesignSystemResolver<number>;
export declare const neutralForegroundActiveDelta: DesignSystemResolver<number>;
export declare const neutralForegroundFocusDelta: DesignSystemResolver<number>;
export declare const neutralDividerRestDelta: DesignSystemResolver<number>;
export declare const neutralOutlineRestDelta: DesignSystemResolver<number>;
export declare const neutralOutlineHoverDelta: DesignSystemResolver<number>;
export declare const neutralOutlineActiveDelta: DesignSystemResolver<number>;
export declare const neutralOutlineFocusDelta: DesignSystemResolver<number>;
export declare const neutralContrastFillRestDelta: DesignSystemResolver<number>;
export declare const neutralContrastFillHoverDelta: DesignSystemResolver<number>;
export declare const neutralContrastFillActiveDelta: DesignSystemResolver<number>;
export declare const neutralContrastFillFocusDelta: DesignSystemResolver<number>;
