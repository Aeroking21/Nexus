import { __decorate } from "tslib";
import { attr, Observable } from '@microsoft/fast-element';
import { parseColorHexRGB } from '@microsoft/fast-colors';
import { designSystemProvider, CardTemplate as template } from '@microsoft/fast-foundation';
import { neutralFillCard } from '../color';
import { FluentDesignSystemProvider } from '../design-system-provider';
import { CardStyles as styles } from './card.styles';
/**
 * The Fluent Card Element. Implements {@link @microsoft/fast-foundation#Card},
 * {@link @microsoft/fast-foundation#CardTemplate}
 *
 *
 * @public
 * @remarks
 * HTML Element: \<fluent-card\>
 */
let FluentCard = class FluentCard extends FluentDesignSystemProvider {
    cardBackgroundColorChanged(prev, next) {
        if (next) {
            const parsedColor = parseColorHexRGB(this.cardBackgroundColor);
            if (parsedColor !== null) {
                this.neutralBaseColor = this.cardBackgroundColor;
                this.backgroundColor = this.cardBackgroundColor;
            }
        }
        else if (this.provider && this.provider.designSystem) {
            this.handleChange(this.provider.designSystem, 'backgroundColor');
        }
    }
    /**
     * @internal
     */
    handleChange(source, name) {
        if (!this.cardBackgroundColor) {
            if (this.neutralBaseColor) {
                this.backgroundColor = neutralFillCard(this.designSystem);
            }
            else {
                this.backgroundColor = neutralFillCard(source);
            }
        }
    }
    connectedCallback() {
        var _a, _b;
        super.connectedCallback();
        const parentDSNotifier = Observable.getNotifier((_a = this.provider) === null || _a === void 0 ? void 0 : _a.designSystem);
        parentDSNotifier.subscribe(this, 'backgroundColor');
        parentDSNotifier.subscribe(this, 'neutralPalette');
        this.handleChange((_b = this.provider) === null || _b === void 0 ? void 0 : _b.designSystem, 'backgroundColor');
    }
};
__decorate([
    attr({
        attribute: 'card-background-color',
        mode: 'fromView',
    })
], FluentCard.prototype, "cardBackgroundColor", void 0);
FluentCard = __decorate([
    designSystemProvider({
        name: 'fluent-card',
        template,
        styles,
        shadowOptions: {
            mode: 'closed',
        },
    })
], FluentCard);
export { FluentCard };
/**
 * Styles for Card
 * @public
 */
export const CardStyles = styles;
