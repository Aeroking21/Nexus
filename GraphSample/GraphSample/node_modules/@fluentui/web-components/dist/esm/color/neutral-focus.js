import { accentPalette, backgroundColor, neutralPalette, } from '../fluent-design-system';
import { findClosestSwatchIndex, isDarkMode, swatchByContrast } from './palette';
import { colorRecipeFactory } from './common';
const targetRatio = 3.5;
function neutralFocusIndexResolver(referenceColor, palette, designSystem) {
    return findClosestSwatchIndex(neutralPalette, referenceColor)(designSystem);
}
function neutralFocusDirectionResolver(index, palette, designSystem) {
    return isDarkMode(designSystem) ? -1 : 1;
}
function neutralFocusContrastCondition(contrastRatio) {
    return contrastRatio > targetRatio;
}
const neutralFocusAlgorithm = swatchByContrast(backgroundColor)(neutralPalette)(neutralFocusIndexResolver)(neutralFocusDirectionResolver)(neutralFocusContrastCondition);
/**
 * @internal
 */
export const neutralFocus = colorRecipeFactory(neutralFocusAlgorithm);
function neutralFocusInnerAccentIndexResolver(accentFillColor) {
    return (referenceColor, sourcePalette, designSystem) => {
        return sourcePalette.indexOf(accentFillColor(designSystem));
    };
}
function neutralFocusInnerAccentDirectionResolver(referenceIndex, palette, designSystem) {
    return isDarkMode(designSystem) ? 1 : -1;
}
/**
 * @internal
 */
export function neutralFocusInnerAccent(accentFillColor) {
    return swatchByContrast(neutralFocus)(accentPalette)(neutralFocusInnerAccentIndexResolver(accentFillColor))(neutralFocusInnerAccentDirectionResolver)(neutralFocusContrastCondition);
}
