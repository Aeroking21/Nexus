import { neutralOutlineActiveDelta, neutralOutlineFocusDelta, neutralOutlineHoverDelta, neutralOutlineRestDelta, neutralPalette, } from '../fluent-design-system';
import { findClosestBackgroundIndex, getSwatch, isDarkMode } from './palette';
import { colorRecipeFactory, swatchFamilyToSwatchRecipeFactory, SwatchFamilyType, } from './common';
const neutralOutlineAlgorithm = (designSystem) => {
    const palette = neutralPalette(designSystem);
    const backgroundIndex = findClosestBackgroundIndex(designSystem);
    const direction = isDarkMode(designSystem) ? -1 : 1;
    const restDelta = neutralOutlineRestDelta(designSystem);
    const restIndex = backgroundIndex + direction * restDelta;
    const hoverDelta = neutralOutlineHoverDelta(designSystem);
    const hoverIndex = restIndex + direction * (hoverDelta - restDelta);
    const activeDelta = neutralOutlineActiveDelta(designSystem);
    const activeIndex = restIndex + direction * (activeDelta - restDelta);
    const focusDelta = neutralOutlineFocusDelta(designSystem);
    const focusIndex = restIndex + direction * (focusDelta - restDelta);
    return {
        rest: getSwatch(restIndex, palette),
        hover: getSwatch(hoverIndex, palette),
        active: getSwatch(activeIndex, palette),
        focus: getSwatch(focusIndex, palette),
    };
};
/**
 * @internal
 */
export const neutralOutline = colorRecipeFactory(neutralOutlineAlgorithm);
/**
 * @internal
 */
export const neutralOutlineRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, neutralOutline);
/**
 * @internal
 */
export const neutralOutlineHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, neutralOutline);
/**
 * @internal
 */
export const neutralOutlineActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, neutralOutline);
/**
 * @internal
 */
export const neutralOutlineFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, neutralOutline);
