import { accentBaseColor, accentForegroundActiveDelta, accentForegroundFocusDelta, accentForegroundHoverDelta, accentForegroundRestDelta, accentPalette, backgroundColor, } from '../fluent-design-system';
import { findClosestSwatchIndex, findSwatchIndex, getSwatch, isDarkMode, swatchByContrast } from './palette';
import { colorRecipeFactory, swatchFamilyToSwatchRecipeFactory, SwatchFamilyType, } from './common';
function accentForegroundAlgorithm(contrastTarget) {
    return (designSystem) => {
        const palette = accentPalette(designSystem);
        const accent = accentBaseColor(designSystem);
        const accentIndex = findClosestSwatchIndex(accentPalette, accent)(designSystem);
        const stateDeltas = {
            rest: accentForegroundRestDelta(designSystem),
            hover: accentForegroundHoverDelta(designSystem),
            active: accentForegroundActiveDelta(designSystem),
            focus: accentForegroundFocusDelta(designSystem),
        };
        const direction = isDarkMode(designSystem) ? -1 : 1;
        const startIndex = accentIndex +
            (direction === 1
                ? Math.min(stateDeltas.rest, stateDeltas.hover)
                : Math.max(direction * stateDeltas.rest, direction * stateDeltas.hover));
        const accessibleSwatch = swatchByContrast(backgroundColor)(accentPalette)(() => startIndex)(() => direction)((swatchContrast) => swatchContrast >= contrastTarget)(designSystem);
        // One of these will be rest, the other will be hover. Depends on the offsets and the direction.
        const accessibleIndex1 = findSwatchIndex(accentPalette, accessibleSwatch)(designSystem);
        const accessibleIndex2 = accessibleIndex1 + direction * Math.abs(stateDeltas.rest - stateDeltas.hover);
        const indexOneIsRestState = direction === 1
            ? stateDeltas.rest < stateDeltas.hover
            : direction * stateDeltas.rest > direction * stateDeltas.hover;
        const restIndex = indexOneIsRestState ? accessibleIndex1 : accessibleIndex2;
        const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex1;
        const activeIndex = restIndex + direction * stateDeltas.active;
        const focusIndex = restIndex + direction * stateDeltas.focus;
        return {
            rest: getSwatch(restIndex, palette),
            hover: getSwatch(hoverIndex, palette),
            active: getSwatch(activeIndex, palette),
            focus: getSwatch(focusIndex, palette),
        };
    };
}
/**
 * @internal
 */
export const accentForeground = colorRecipeFactory(accentForegroundAlgorithm(4.5));
/**
 * @internal
 */
export const accentForegroundLarge = colorRecipeFactory(accentForegroundAlgorithm(3));
/**
 * @internal
 */
export const accentForegroundRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForeground);
/**
 * @internal
 */
export const accentForegroundHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForeground);
/**
 * @internal
 */
export const accentForegroundActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForeground);
/**
 * @internal
 */
export const accentForegroundFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForeground);
/**
 * @internal
 */
export const accentForegroundLargeRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForegroundLarge);
/**
 * @internal
 */
export const accentForegroundLargeHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForegroundLarge);
/**
 * @internal
 */
export const accentForegroundLargeActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForegroundLarge);
/**
 * @internal
 */
export const accentForegroundLargeFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForegroundLarge);
