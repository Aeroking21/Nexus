import { neutralFillActiveDelta, neutralFillFocusDelta, neutralFillHoverDelta, neutralFillRestDelta, neutralFillSelectedDelta, neutralPalette, } from '../fluent-design-system';
import { colorRecipeFactory, designSystemResolverMax, } from './common';
import { findClosestBackgroundIndex, getSwatch } from './palette';
const neutralFillThreshold = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta, neutralFillFocusDelta);
function neutralFillAlgorithm(deltaResolver) {
    return (designSystem) => {
        const backgroundIndex = findClosestBackgroundIndex(designSystem);
        const swapThreshold = neutralFillThreshold(designSystem);
        const direction = backgroundIndex >= swapThreshold ? -1 : 1;
        return getSwatch(backgroundIndex + direction * deltaResolver(designSystem), neutralPalette(designSystem));
    };
}
/**
 * @internal
 */
export const neutralFillRest = colorRecipeFactory(neutralFillAlgorithm(neutralFillRestDelta));
/**
 * @internal
 */
export const neutralFillHover = colorRecipeFactory(neutralFillAlgorithm(neutralFillHoverDelta));
/**
 * @internal
 */
export const neutralFillActive = colorRecipeFactory(neutralFillAlgorithm(neutralFillActiveDelta));
/**
 * @internal
 */
export const neutralFillFocus = colorRecipeFactory(neutralFillAlgorithm(neutralFillFocusDelta));
/**
 * @internal
 */
export const neutralFillSelected = colorRecipeFactory(neutralFillAlgorithm(neutralFillSelectedDelta));
/**
 * @internal
 */
export const neutralFill = colorRecipeFactory((designSystem) => {
    return {
        rest: neutralFillRest(designSystem),
        hover: neutralFillHover(designSystem),
        active: neutralFillActive(designSystem),
        focus: neutralFillFocus(designSystem),
        selected: neutralFillSelected(designSystem),
    };
});
